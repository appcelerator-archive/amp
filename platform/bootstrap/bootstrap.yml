AWSTemplateFormatVersion: '2010-09-09'
Description: Swarm cluster managed with InfraKit

Mappings:
  AMI:
    # Ubuntu 16.04 HVM
    ap-southeast-2:
      Ubuntu: ami-92e8e6f1
      Debian: ami-0dcac96e
    eu-west-1:
      Ubuntu: ami-b5a893d3
      Debian: ami-3291be54
    us-east-1:
      Ubuntu: ami-e4139df2
      Debian: ami-cb4b94dd
    us-east-2:
      Ubuntu: ami-33ab8f56
      Debian: ami-c5ba9fa0
    us-west-2:
      Ubuntu: ami-17ba2a77
      Debian: ami-fde96b9d
  VpcCidrs:
    subnet1:
      cidr: 192.168.0.0/24
    subnet2:
      cidr: 192.168.16.0/24
    subnet3:
      cidr: 192.168.32.0/24
    vpc:
      cidr: 192.168.0.0/16

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Cluster Properties
      Parameters:
      - KeyName
      - TrustedCidr
      - LinuxDistribution
    - Label:
        default: Swarm Manager Properties
      Parameters:
      - ManagerSize
      - ManagerInstanceType
      - DrainManager
    - Label:
        default: InfraKit Configuration
      Parameters:
      - InfraKitConfigurationBaseURL
    - Label:
        default: Docker Configuration
      Parameters:
      - AufsVolumeSize
      - MirrorRegistries
      - OverlayNetworks
    ParameterLabels:
      KeyName:
        default: Which SSH key to use?
      ManagerSize:
        default: Number of Swarm managers?
      ManagerInstanceType:
        default: Swarm manager instance type?
      DrainManager:
        default: Drain manager nodes?
      OverlayNetworks:
        default: Docker overlay networks
      InfraKitConfigurationBaseURL:
        default: InfraKit configuration base URL
      AufsVolumeSize:
        default: EBS Volume Size
      MirrorRegistries:
        default: Docker mirror registries

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    MinLength: '1'
  ManagerSize:
    Type: Number
    AllowedValues:
      - 1
      - 3
      - 5
    Default: 3
    Description: Number of Swarm manager nodes (1, 3, 5).
  LinuxDistribution:
    Type: String
    AllowedValues:
    - Ubuntu
    - Debian
    Default: Ubuntu
  ManagerInstanceType:
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.medium
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc).
  DrainManager:
    Type: String
    Description: Disable the services on the manager nodes.
    AllowedValues:
    - false
    - true
    Default: false
  InfraKitConfigurationBaseURL:
    Type: String
    ConstraintDescription: must be an URL.
    Description: Base URL for InfraKit configuration. there should be a bootstrap script, a default.ikt and a config.aws.tpl file.
    Default: https://raw.githubusercontent.com/appcelerator/amp/master/platform/bootstrap
    AllowedPattern: "https?://[0-9a-z\\.-]+\\.[a-z\\.]{2,6}[/\\w\\.-]*/?"
  AufsVolumeSize:
    Type: Number
    Description: Size in GB of the EBS volume for the Docker AUFS storage on each node.
    Default: 26
  MirrorRegistries:
    Type: String
    Description: Docker mirror registries, with scheme (https://) separated by space
  OverlayNetworks:
    Type: String
    Description: Docker overlay networks to create on the swarm, separated by space
    Default: ampnet
  TrustedCidr:
    Type: String
    Description: CIDR of a trusted origin
  LinuxDistribution:
    Type: String
    Description: Linux Distribution

Conditions:
  WithTrustedCidr:
    !Not [ !Equals [ TrustedCidr, "" ] ]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - Vpc
    - InternetGateway
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: Vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: Vpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - RT
      VpcId:
        Ref: Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachGateway
    - RouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet1
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet1
      VpcId:
        Ref: Vpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet2
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet2
      VpcId:
        Ref: Vpc
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet3
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet3
      VpcId:
        Ref: Vpc
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet3
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: VPC-wide security group
      SecurityGroupIngress:
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: '-1'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '2375'
        ToPort: '2375'
      VpcId:
        Ref: Vpc
  EngineAPIIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: WithTrustedCidr
    Properties:
      GroupId:
        Ref: SecurityGroup
      IpProtocol: tcp
      FromPort: '2375'
      ToPort: '2375'
      CidrIp:
        Ref: TrustedCidr
  InfrakitIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: WithTrustedCidr
    Properties:
      GroupId:
        Ref: SecurityGroup
      IpProtocol: tcp
      FromPort: '24864'
      ToPort: '24864'
      CidrIp:
        Ref: TrustedCidr
  ProvisionerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  ProvisionerPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - 'ec2:Describe*'
          - 'ec2:Get*'
          - 'ec2:CreateTags'
          - 'autoscaling:Describe*'
          - 'autoscaling:CreateOrUpdateTags'
          Resource: '*'
          Effect: Allow
        - Action:
          - 'ec2:RunInstances'
          - 'ec2:StartInstances'
          - 'ec2:StopInstances'
          - 'ec2:RebootInstances'
          - 'ec2:TerminateInstances'
          - 'ec2:AttachVolume'
          - 'ec2:DetachVolume'
          - 'autoscaling:*'
          Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*'
          Condition:
            StringEquals:
              "ec2:vpc": !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${Vpc}"
          Effect: Allow
        - Action:
          - 'ec2:RunInstances'
          - 'ec2:StartInstances'
          - 'ec2:StopInstances'
          - 'ec2:RebootInstances'
          - 'ec2:TerminateInstances'
          - 'ec2:AttachVolume'
          - 'ec2:DetachVolume'
          Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
          Condition:
            StringEquals:
              "ec2:InstanceProfile": !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/${ClusterInstanceProfile}"
          Effect: Allow
        - Action:
          - 'ec2:RunInstances'
          Resource:
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}::snapshot/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
          Effect: Allow
        - Action:
          - 'iam:PassRole'
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ClusterRole}'
          Effect: Allow
        Version: '2012-10-17'
      PolicyName: provisioner-policy
      Roles:
      - Ref: ProvisionerRole
  ProvisionerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: ProvisionerRole
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  ClusterPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - 'ec2:DescribeVolume*'
          - 'ec2:AttachVolume'
          - 'ec2:CreateVolume'
          - 'ec2:CreateTags'
          - 'ec2:ModifyInstanceAttribute'
          Resource: '*'
          Effect: Allow
        Version: '2012-10-17'
      PolicyName: cluster-policy
      Roles:
      - Ref: ClusterRole
  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: ClusterRole
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT3M
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: !Ref ManagerSize
      HealthCheckGracePeriod: 200
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AsgLaunchConfig
      MaxSize: 5
      MinSize: 0
      LoadBalancerNames:
      - !Ref ManagerInternalELB
      - !Ref ManagerExternalELB
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - manager
      - Key: amp.clusterid
        PropagateAtLaunch: true
        Value: !Ref AWS::StackName
      - Key: SwarmRole
        PropagateAtLaunch: true
        Value: manager
      VPCZoneIdentifier:
      - Fn::Join:
        - ','
        -  - !Ref PublicSubnet1
           - !Ref PublicSubnet2
           - !Ref PublicSubnet3
  AsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ProvisionerInstanceProfile
      - SecurityGroup
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ProvisionerInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ref: LinuxDistribution
      InstanceType: !Ref ManagerInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdn
          Ebs:
            VolumeSize: !Ref AufsVolumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config
              repo_update: true
              repo_upgrade: security
              packages:
                - ca-certificates
                - jq
                - curl
                - unzip
                - awscli
                - sysstat
                - iotop
                - xfsprogs
              write_files:
                - path: /etc/infrakit.conf
                  content: |
                    {{/* Global variables */}}
                    {{ var "/aws/region" "${region}" }}
                    {{ var "/aws/stackname" "${stackname}" }}
                    {{ var "/aws/vpcid" "${Vpc}" }}
                    {{ var "/aws/subnetid1" "${PublicSubnet1}" }}
                    {{ var "/aws/subnetid2" "${PublicSubnet2}" }}
                    {{ var "/aws/subnetid3" "${PublicSubnet3}" }}
                    {{ var "/aws/securitygroupid" "${SecurityGroup}" }}
                    {{ var "/aws/amiid" "${ami}" }}
                    {{ var "/aws/instancetype" "${ManagerInstanceType}"}}
                    {{ var "/aws/instanceprofile" "${ClusterInstanceProfile}" }}
                    {{ var "/aws/keyname" "${KeyName}" }}
                    {{ var "/script/baseurl" "${InfraKitConfigurationBaseURL}" }}
                    {{ var "/docker/aufs/size" "${AufsVolumeSize}" }}
                    {{ var "/docker/mirrorregistries" "${MirrorRegistries}" }}
              runcmd:
                - curl -sf ${InfraKitConfigurationBaseURL}/userdata-aws -o /usr/local/bin/asg-init.sh
                - chmod +x /usr/local/bin/asg-init.sh
                - REGION=${region} STACK_NAME=${stackname} VPC_ID=${Vpc} MANAGER_SIZE=${ManagerSize} BASE_URL=${InfraKitConfigurationBaseURL} MIRROR_REGISTRIES=${MirrorRegistries} DRAIN_MANAGER=${DrainManager} DOCKER_DEVICE=/dev/sdn /usr/local/bin/asg-init.sh
            - { ami: !FindInMap [ AMI, !Ref "AWS::Region", !Ref LinuxDistribution ], stackname: !Ref "AWS::StackName", region: !Ref "AWS::Region" }
  ManagerInternalELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - Ref: SecurityGroup
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '2375'
        InstancePort: '2375'
        Protocol: TCP
        InstanceProtocol: TCP
      - LoadBalancerPort: '2377'
        InstancePort: '2377'
        Protocol: TCP
        InstanceProtocol: TCP
      HealthCheck:
        Target: TCP:2375
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
  ManagerExternalELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - Ref: SecurityGroup
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '22'
        InstancePort: '22'
        Protocol: TCP
        InstanceProtocol: TCP
      - LoadBalancerPort: '2375'
        InstancePort: '2375'
        Protocol: TCP
        InstanceProtocol: TCP
      - LoadBalancerPort: '24864'
        InstancePort: '24864'
        Protocol: TCP
        InstanceProtocol: TCP
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
Outputs:
  PrivateManagerHost:
    Description: internal endpoint for the swarm managers
    Value: !GetAtt ManagerInternalELB.DNSName
  PublicManagerHost:
    Description: public facing endpoint for the swarm managers
    Value: !GetAtt ManagerExternalELB.DNSName
  MetricsURL:
    Description: URL for cluster health dashboard
    Value:
      Fn::Join:
        - ':'
        - - !GetAtt ManagerExternalELB.DNSName
          - "9090"
  MirrorRegistries:
    Description: mirror registries used by the Docker engines
    Value: !Ref MirrorRegistries
  KeyName:
    Description: Keypair name
    Value: !Ref KeyName
  Region:
    Description: Deployment region
    Value: !Ref AWS::Region
  VpcId:
    Description: VPC ID
    Value: !Ref Vpc
  SubnetIds:
    Description: Subnet ID list
    Value:
      Fn::Join:
        - ','
        - - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
  SecurityGroup:
    Description: Security Group
    Value: !Ref SecurityGroup
  AMI:
    Description: AMI
    Value: !FindInMap [ AMI, !Ref "AWS::Region", !Ref LinuxDistribution ]
  InstanceProfile:
    Description: IAM instance profile
    Value: !Ref ClusterInstanceProfile
  BaseURL:
    Description: Scripts base URL
    Value: !Ref InfraKitConfigurationBaseURL
