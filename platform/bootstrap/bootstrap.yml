AWSTemplateFormatVersion: '2010-09-09'
Description: Docker Swarm cluster deployed with InfraKit

Mappings:
  AMI:
    # Ubuntu 16.04 HVM
    ap-southeast-2:
      Ubuntu: ami-92e8e6f1
    eu-west-1:
      Ubuntu: ami-b5a893d3
    us-east-2:
      Ubuntu: ami-33ab8f56
    us-west-2:
      Ubuntu: ami-17ba2a77
  VpcCidrs:
    subnet1:
      cidr: 192.168.0.0/24
    subnet2:
      cidr: 192.168.16.0/24
    subnet3:
      cidr: 192.168.32.0/24
    vpc:
      cidr: 192.168.0.0/16

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Swarm Properties
      Parameters:
      - KeyName
    - Label:
        default: Swarm Manager Properties
      Parameters:
      - ManagerSize
      - ManagerInstanceType
    - Label:
        default: Swarm Worker Properties
      Parameters:
      - WorkerSize
      - WorkerInstanceType
    - Label:
        default: InfraKit Configuration
      Parameters:
      - InfraKitConfigurationBaseURL
    - Label:
        default: Docker Configuration
      Parameters:
      - AufsVolumeSize
    ParameterLabels:
      KeyName:
        default: Which SSH key to use?
      ManagerSize:
        default: Number of Swarm managers?
      ManagerInstanceType:
        default: Swarm manager instance type?
      WorkerSize:
        default: Number of Swarm workers?
      WorkerInstanceType:
        default: Swarm worker instance type?
      InfraKitConfigurationBaseURL:
        default: InfraKit configuration base URL
      AufsVolumeSize:
        default: EBS Volume Size

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    MinLength: '1'
  ManagerSize:
    Type: Number
    AllowedValues:
      - 1
      - 3
      - 5
    Default: 3
    Description: Number of Swarm manager nodes (1, 3, 5).
  ManagerInstanceType:
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.micro
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc).
  WorkerSize:
    Type: Number
    Default: 2
    MaxValue: 1000
    MinValue: 0
    Description: Number of Swarm worker nodes.
  WorkerInstanceType:
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.medium
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc).
  InfraKitConfigurationBaseURL:
    Type: String
    ConstraintDescription: must be an URL.
    Description: Base URL for InfraKit configuration. there should be a bootstrap script, a default.ikt and a config.aws.tpl file.
    Default: https://raw.githubusercontent.com/appcelerator/amp/master/platform/bootstrap
    AllowedPattern: "https?://[0-9a-z\\.-]+\\.[a-z\\.]{2,6}[/\\w\\.-]*/?"
  AufsVolumeSize:
    Type: Number
    Description: Size in GB of the EBS volume for the Docker AUFS storage on each node.
    Default: 26

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - Vpc
    - InternetGateway
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: Vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: Vpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - RT
      VpcId:
        Ref: Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachGateway
    - RouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet1
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet1
      VpcId:
        Ref: Vpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet2
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet2
      VpcId:
        Ref: Vpc
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet3
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet3
      VpcId:
        Ref: Vpc
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet3
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: VPC-wide security group
      SecurityGroupIngress:
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: '-1'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '2375'
        ToPort: '2375'
      VpcId:
        Ref: Vpc
  ProvisionerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  ProvisionerPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - 'ec2:Describe*'
          - 'ec2:Get*'
          - 'ec2:CreateTags'
          - 'autoscaling:Describe*'
          - 'autoscaling:CreateOrUpdateTags'
          Resource: '*'
          Effect: Allow
        - Action:
          - 'ec2:RunInstances'
          - 'ec2:StartInstances'
          - 'ec2:StopInstances'
          - 'ec2:RebootInstances'
          - 'ec2:TerminateInstances'
          - 'ec2:AttachVolume'
          - 'ec2:DetachVolume'
          - 'autoscaling:*'
          Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*'
          Condition:
            StringEquals:
              "ec2:vpc": !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${Vpc}"
          Effect: Allow
        - Action:
          - 'ec2:RunInstances'
          - 'ec2:StartInstances'
          - 'ec2:StopInstances'
          - 'ec2:RebootInstances'
          - 'ec2:TerminateInstances'
          - 'ec2:AttachVolume'
          - 'ec2:DetachVolume'
          Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
          Condition:
            StringEquals:
              "ec2:InstanceProfile": !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/${ClusterInstanceProfile}"
          Effect: Allow
        - Action:
          - 'ec2:RunInstances'
          Resource:
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}::snapshot/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*'
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
          Effect: Allow
        - Action:
          - 'iam:PassRole'
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ClusterRole}'
          Effect: Allow
        Version: '2012-10-17'
      PolicyName: provisioner-policy
      Roles:
      - Ref: ProvisionerRole
  ProvisionerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: ProvisionerRole
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  ClusterPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - 'ec2:DescribeVolume*'
          - 'ec2:AttachVolume'
          - 'ec2:CreateVolume'
          - 'ec2:CreateTags'
          - 'ec2:ModifyInstanceAttribute'
          Resource: '*'
          Effect: Allow
        Version: '2012-10-17'
      PolicyName: cluster-policy
      Roles:
      - Ref: ClusterRole
  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: ClusterRole
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT10M
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: !Ref ManagerSize
      HealthCheckGracePeriod: 200
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AsgLaunchConfig
      MaxSize: 5
      MinSize: 0
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - manager
      - Key: Deployment
        PropagateAtLaunch: true
        Value: Infrakit
      - Key: Role
        PropagateAtLaunch: true
        Value: manager
      VPCZoneIdentifier:
      - Fn::Join:
        - ','
        -  - !Ref PublicSubnet1
           - !Ref PublicSubnet2
           - !Ref PublicSubnet3
  AsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ProvisionerInstanceProfile
      - SecurityGroup
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ProvisionerInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ubuntu
      InstanceType: !Ref ManagerInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config
              repo_update: true
              repo_upgrade: security
              packages:
                - ca-certificates
                - jq
                - git
                - curl
                - unzip
                - awscli
              write_files:
                - path: /tmp/env.ikt
                  content: |
                    {{/* Global variables */}}
                    {{ var "/aws/region" "${region}" }}
                    {{ var "/aws/stackname" "${stackname}" }}
                    {{ var "/aws/vpcid" "${Vpc}" }}
                    {{ var "/aws/subnetid1" "${PublicSubnet1}" }}
                    {{ var "/aws/subnetid2" "${PublicSubnet2}" }}
                    {{ var "/aws/subnetid3" "${PublicSubnet3}" }}
                    {{ var "/aws/securitygroupid" "${SecurityGroup}" }}
                    {{ var "/aws/amiid" "${ami}" }}
                    {{ var "/aws/instancetype" "${ManagerInstanceType}"}}
                    {{ var "/aws/instanceprofile" "${ClusterInstanceProfile}" }}
                    {{ var "/aws/keyname" "${KeyName}" }}
                    {{ var "/script/baseurl" "${InfraKitConfigurationBaseURL}" }}
                    {{ var "/docker/aufs/size" "${AufsVolumeSize}" }}
              runcmd:
                - curl ${InfraKitConfigurationBaseURL}/bootstrap -o /usr/local/bin/bootstrap.sh
                - curl ${InfraKitConfigurationBaseURL}/userdata-aws -o /usr/local/bin/asg-init.sh
                - REGION=${region} STACK_NAME=${stackname} VPC_ID=${Vpc} MANAGER_SIZE=${ManagerSize} BASE_URL=${InfraKitConfigurationBaseURL} ENV_FILE=/tmp/env.ikt /usr/local/bin/asg-init.sh
            - { ami: !FindInMap [ AMI, !Ref "AWS::Region", Ubuntu ], stackname: !Ref "AWS::StackName", region: !Ref "AWS::Region" }
