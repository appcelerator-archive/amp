// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/cmd/cluster-agent/agentgrpc/cluster-agent.proto
// DO NOT EDIT!

/*
Package agentgrpc is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/cmd/cluster-agent/agentgrpc/cluster-agent.proto

It has these top-level messages:
	AgentRet
	GetNodeInfoRequest
	NodeInfo
	PurgeNodeRequest
	PurgeNodeAnswer
	PullImageRequest
*/
package agentgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AgentRet struct {
}

func (m *AgentRet) Reset()                    { *m = AgentRet{} }
func (m *AgentRet) String() string            { return proto.CompactTextString(m) }
func (*AgentRet) ProtoMessage()               {}
func (*AgentRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetNodeInfoRequest struct {
}

func (m *GetNodeInfoRequest) Reset()                    { *m = GetNodeInfoRequest{} }
func (m *GetNodeInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeInfoRequest) ProtoMessage()               {}
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NodeInfo struct {
	Id                  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Role                string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	Availability        string `protobuf:"bytes,3,opt,name=availability" json:"availability,omitempty"`
	Hostname            string `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	HostArchitecture    string `protobuf:"bytes,5,opt,name=host_architecture,json=hostArchitecture" json:"host_architecture,omitempty"`
	HostOs              string `protobuf:"bytes,6,opt,name=host_os,json=hostOs" json:"host_os,omitempty"`
	Cpu                 int64  `protobuf:"varint,7,opt,name=cpu" json:"cpu,omitempty"`
	Memory              int64  `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	DockerVersion       string `protobuf:"bytes,9,opt,name=docker_version,json=dockerVersion" json:"docker_version,omitempty"`
	Status              string `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	Address             string `protobuf:"bytes,11,opt,name=address" json:"address,omitempty"`
	NbContainers        int64  `protobuf:"varint,12,opt,name=nb_containers,json=nbContainers" json:"nb_containers,omitempty"`
	NbContainersRunning int64  `protobuf:"varint,13,opt,name=nb_containers_running,json=nbContainersRunning" json:"nb_containers_running,omitempty"`
	NbContainersPaused  int64  `protobuf:"varint,14,opt,name=nb_containers_paused,json=nbContainersPaused" json:"nb_containers_paused,omitempty"`
	NbContainersStopped int64  `protobuf:"varint,15,opt,name=nb_containers_stopped,json=nbContainersStopped" json:"nb_containers_stopped,omitempty"`
	Images              int64  `protobuf:"varint,16,opt,name=images" json:"images,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfo) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *NodeInfo) GetAvailability() string {
	if m != nil {
		return m.Availability
	}
	return ""
}

func (m *NodeInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeInfo) GetHostArchitecture() string {
	if m != nil {
		return m.HostArchitecture
	}
	return ""
}

func (m *NodeInfo) GetHostOs() string {
	if m != nil {
		return m.HostOs
	}
	return ""
}

func (m *NodeInfo) GetCpu() int64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *NodeInfo) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *NodeInfo) GetDockerVersion() string {
	if m != nil {
		return m.DockerVersion
	}
	return ""
}

func (m *NodeInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeInfo) GetNbContainers() int64 {
	if m != nil {
		return m.NbContainers
	}
	return 0
}

func (m *NodeInfo) GetNbContainersRunning() int64 {
	if m != nil {
		return m.NbContainersRunning
	}
	return 0
}

func (m *NodeInfo) GetNbContainersPaused() int64 {
	if m != nil {
		return m.NbContainersPaused
	}
	return 0
}

func (m *NodeInfo) GetNbContainersStopped() int64 {
	if m != nil {
		return m.NbContainersStopped
	}
	return 0
}

func (m *NodeInfo) GetImages() int64 {
	if m != nil {
		return m.Images
	}
	return 0
}

type PurgeNodeRequest struct {
	Node      string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Container bool   `protobuf:"varint,2,opt,name=container" json:"container,omitempty"`
	Volume    bool   `protobuf:"varint,3,opt,name=volume" json:"volume,omitempty"`
	Image     bool   `protobuf:"varint,4,opt,name=image" json:"image,omitempty"`
	Force     bool   `protobuf:"varint,5,opt,name=force" json:"force,omitempty"`
}

func (m *PurgeNodeRequest) Reset()                    { *m = PurgeNodeRequest{} }
func (m *PurgeNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgeNodeRequest) ProtoMessage()               {}
func (*PurgeNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PurgeNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *PurgeNodeRequest) GetContainer() bool {
	if m != nil {
		return m.Container
	}
	return false
}

func (m *PurgeNodeRequest) GetVolume() bool {
	if m != nil {
		return m.Volume
	}
	return false
}

func (m *PurgeNodeRequest) GetImage() bool {
	if m != nil {
		return m.Image
	}
	return false
}

func (m *PurgeNodeRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type PurgeNodeAnswer struct {
	NbContainers int32 `protobuf:"varint,1,opt,name=nb_containers,json=nbContainers" json:"nb_containers,omitempty"`
	NbVolumes    int32 `protobuf:"varint,2,opt,name=nb_volumes,json=nbVolumes" json:"nb_volumes,omitempty"`
	NbImages     int32 `protobuf:"varint,3,opt,name=nb_images,json=nbImages" json:"nb_images,omitempty"`
}

func (m *PurgeNodeAnswer) Reset()                    { *m = PurgeNodeAnswer{} }
func (m *PurgeNodeAnswer) String() string            { return proto.CompactTextString(m) }
func (*PurgeNodeAnswer) ProtoMessage()               {}
func (*PurgeNodeAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PurgeNodeAnswer) GetNbContainers() int32 {
	if m != nil {
		return m.NbContainers
	}
	return 0
}

func (m *PurgeNodeAnswer) GetNbVolumes() int32 {
	if m != nil {
		return m.NbVolumes
	}
	return 0
}

func (m *PurgeNodeAnswer) GetNbImages() int32 {
	if m != nil {
		return m.NbImages
	}
	return 0
}

type PullImageRequest struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *PullImageRequest) Reset()                    { *m = PullImageRequest{} }
func (m *PullImageRequest) String() string            { return proto.CompactTextString(m) }
func (*PullImageRequest) ProtoMessage()               {}
func (*PullImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PullImageRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func init() {
	proto.RegisterType((*AgentRet)(nil), "agentgrpc.AgentRet")
	proto.RegisterType((*GetNodeInfoRequest)(nil), "agentgrpc.GetNodeInfoRequest")
	proto.RegisterType((*NodeInfo)(nil), "agentgrpc.NodeInfo")
	proto.RegisterType((*PurgeNodeRequest)(nil), "agentgrpc.PurgeNodeRequest")
	proto.RegisterType((*PurgeNodeAnswer)(nil), "agentgrpc.PurgeNodeAnswer")
	proto.RegisterType((*PullImageRequest)(nil), "agentgrpc.PullImageRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterAgentService service

type ClusterAgentServiceClient interface {
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*NodeInfo, error)
	PurgeNode(ctx context.Context, in *PurgeNodeRequest, opts ...grpc.CallOption) (*PurgeNodeAnswer, error)
	PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (*AgentRet, error)
}

type clusterAgentServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterAgentServiceClient(cc *grpc.ClientConn) ClusterAgentServiceClient {
	return &clusterAgentServiceClient{cc}
}

func (c *clusterAgentServiceClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/agentgrpc.ClusterAgentService/GetNodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAgentServiceClient) PurgeNode(ctx context.Context, in *PurgeNodeRequest, opts ...grpc.CallOption) (*PurgeNodeAnswer, error) {
	out := new(PurgeNodeAnswer)
	err := grpc.Invoke(ctx, "/agentgrpc.ClusterAgentService/PurgeNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAgentServiceClient) PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (*AgentRet, error) {
	out := new(AgentRet)
	err := grpc.Invoke(ctx, "/agentgrpc.ClusterAgentService/PullImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterAgentService service

type ClusterAgentServiceServer interface {
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*NodeInfo, error)
	PurgeNode(context.Context, *PurgeNodeRequest) (*PurgeNodeAnswer, error)
	PullImage(context.Context, *PullImageRequest) (*AgentRet, error)
}

func RegisterClusterAgentServiceServer(s *grpc.Server, srv ClusterAgentServiceServer) {
	s.RegisterService(&_ClusterAgentService_serviceDesc, srv)
}

func _ClusterAgentService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentgrpc.ClusterAgentService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServiceServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAgentService_PurgeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServiceServer).PurgeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentgrpc.ClusterAgentService/PurgeNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServiceServer).PurgeNode(ctx, req.(*PurgeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAgentService_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServiceServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentgrpc.ClusterAgentService/PullImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServiceServer).PullImage(ctx, req.(*PullImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterAgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentgrpc.ClusterAgentService",
	HandlerType: (*ClusterAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _ClusterAgentService_GetNodeInfo_Handler,
		},
		{
			MethodName: "PurgeNode",
			Handler:    _ClusterAgentService_PurgeNode_Handler,
		},
		{
			MethodName: "PullImage",
			Handler:    _ClusterAgentService_PullImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/cmd/cluster-agent/agentgrpc/cluster-agent.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/cmd/cluster-agent/agentgrpc/cluster-agent.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0x6d, 0x6b, 0xdb, 0x30,
	0x10, 0x6e, 0x9a, 0x26, 0xb5, 0xaf, 0x6f, 0x99, 0xda, 0x6d, 0x22, 0x5d, 0xa1, 0x78, 0x0c, 0x0a,
	0x63, 0xc9, 0xe8, 0x7e, 0xc0, 0x28, 0x85, 0x8d, 0x32, 0xd8, 0x8a, 0x0b, 0xfd, 0x1a, 0x64, 0xfb,
	0x9a, 0x8a, 0xd9, 0x92, 0x27, 0xc9, 0x19, 0xfd, 0x07, 0xfb, 0xb4, 0x3f, 0xb9, 0x3f, 0x32, 0x74,
	0x4a, 0xbc, 0xbc, 0xec, 0x4b, 0xd0, 0xf3, 0x3c, 0x27, 0xdd, 0x3d, 0x97, 0x3b, 0xc3, 0x97, 0xa9,
	0x74, 0x8f, 0x4d, 0x36, 0xca, 0x75, 0x35, 0x16, 0x75, 0x9d, 0x63, 0x89, 0x46, 0x38, 0x6d, 0xc6,
	0xa2, 0xaa, 0xc7, 0x79, 0x55, 0x8c, 0xf3, 0xb2, 0xb1, 0x0e, 0xcd, 0x3b, 0x31, 0x45, 0xe5, 0xc6,
	0xf4, 0x3b, 0x35, 0x75, 0xbe, 0xca, 0x8f, 0x6a, 0xa3, 0x9d, 0x66, 0x71, 0x2b, 0x27, 0x00, 0xd1,
	0x95, 0x07, 0x29, 0xba, 0xe4, 0x04, 0xd8, 0x67, 0x74, 0x5f, 0x75, 0x81, 0x37, 0xea, 0x41, 0xa7,
	0xf8, 0xa3, 0x41, 0xeb, 0x92, 0xdf, 0x3b, 0x10, 0x2d, 0x38, 0x76, 0x08, 0xdb, 0xb2, 0xe0, 0x9d,
	0xf3, 0xce, 0x45, 0x9c, 0x6e, 0xcb, 0x82, 0x31, 0xd8, 0x31, 0xba, 0x44, 0xbe, 0x4d, 0x0c, 0x9d,
	0x59, 0x02, 0xfb, 0x62, 0x26, 0x64, 0x29, 0x32, 0x59, 0x4a, 0xf7, 0xc4, 0xbb, 0xa4, 0xad, 0x70,
	0x6c, 0x08, 0xd1, 0xa3, 0xb6, 0x4e, 0x89, 0x0a, 0xf9, 0x0e, 0xe9, 0x2d, 0x66, 0x6f, 0xe1, 0x99,
	0x3f, 0x4f, 0x84, 0xc9, 0x1f, 0xa5, 0xc3, 0xdc, 0x35, 0x06, 0x79, 0x8f, 0x82, 0x06, 0x5e, 0xb8,
	0x5a, 0xe2, 0xd9, 0x4b, 0xd8, 0xa5, 0x60, 0x6d, 0x79, 0x9f, 0x42, 0xfa, 0x1e, 0x7e, 0xb3, 0x6c,
	0x00, 0xdd, 0xbc, 0x6e, 0xf8, 0xee, 0x79, 0xe7, 0xa2, 0x9b, 0xfa, 0x23, 0x7b, 0x01, 0xfd, 0x0a,
	0x2b, 0x6d, 0x9e, 0x78, 0x44, 0xe4, 0x1c, 0xb1, 0x37, 0x70, 0x58, 0xe8, 0xfc, 0x3b, 0x9a, 0xc9,
	0x0c, 0x8d, 0x95, 0x5a, 0xf1, 0x98, 0x5e, 0x3a, 0x08, 0xec, 0x7d, 0x20, 0xfd, 0x75, 0xeb, 0x84,
	0x6b, 0x2c, 0x87, 0x90, 0x28, 0x20, 0xc6, 0x61, 0x57, 0x14, 0x85, 0x41, 0x6b, 0xf9, 0x1e, 0x09,
	0x0b, 0xc8, 0x5e, 0xc3, 0x81, 0xca, 0x26, 0xb9, 0x56, 0x4e, 0x48, 0x85, 0xc6, 0xf2, 0x7d, 0xca,
	0xbb, 0xaf, 0xb2, 0xeb, 0x96, 0x63, 0x97, 0xf0, 0x7c, 0x25, 0x68, 0x62, 0x1a, 0xa5, 0xa4, 0x9a,
	0xf2, 0x03, 0x0a, 0x3e, 0x5e, 0x0e, 0x4e, 0x83, 0xc4, 0xde, 0xc3, 0xc9, 0xea, 0x9d, 0x5a, 0x34,
	0x16, 0x0b, 0x7e, 0x48, 0x57, 0xd8, 0xf2, 0x95, 0x5b, 0x52, 0x36, 0xb3, 0x58, 0xa7, 0xeb, 0x1a,
	0x0b, 0x7e, 0xb4, 0x99, 0xe5, 0x2e, 0x48, 0xde, 0xb0, 0xac, 0xc4, 0x14, 0x2d, 0x1f, 0x84, 0x7e,
	0x05, 0x94, 0xfc, 0xea, 0xc0, 0xe0, 0xb6, 0x31, 0x53, 0xf4, 0x53, 0x31, 0x9f, 0x12, 0x3f, 0x08,
	0x4a, 0x17, 0x38, 0x1f, 0x0d, 0x3a, 0xb3, 0x57, 0x10, 0xb7, 0x19, 0x69, 0x42, 0xa2, 0xf4, 0x1f,
	0xe1, 0x9f, 0x9f, 0xe9, 0xb2, 0xa9, 0x90, 0x06, 0x24, 0x4a, 0xe7, 0x88, 0x9d, 0x40, 0x8f, 0x12,
	0xd1, 0x5c, 0x44, 0x69, 0x00, 0x9e, 0x7d, 0xd0, 0x26, 0x0f, 0x83, 0x10, 0xa5, 0x01, 0x24, 0x06,
	0x8e, 0xda, 0x4a, 0xae, 0x94, 0xfd, 0x89, 0x66, 0xb3, 0xe9, 0xbe, 0xa2, 0xde, 0x5a, 0xd3, 0xcf,
	0x00, 0x54, 0x36, 0x09, 0x09, 0x2d, 0x95, 0xd6, 0x4b, 0x63, 0x95, 0xdd, 0x07, 0x82, 0x9d, 0x42,
	0xac, 0xb2, 0xc9, 0xdc, 0x7c, 0x97, 0xd4, 0x48, 0x65, 0x37, 0xc1, 0xfe, 0x85, 0x77, 0x5f, 0x96,
	0x84, 0x16, 0xee, 0xdb, 0x9a, 0x83, 0xfd, 0x00, 0x2e, 0xff, 0x74, 0xe0, 0xf8, 0x3a, 0xac, 0x1f,
	0xed, 0xd8, 0x1d, 0x9a, 0x99, 0xcc, 0x91, 0x5d, 0xc3, 0xde, 0xd2, 0x9e, 0xb1, 0xb3, 0x51, 0xbb,
	0x8e, 0xa3, 0xcd, 0xfd, 0x1b, 0x1e, 0x2f, 0xc9, 0x0b, 0x2d, 0xd9, 0x62, 0x9f, 0x20, 0x6e, 0xad,
	0xb3, 0xd3, 0xa5, 0x98, 0xf5, 0xbf, 0x66, 0x38, 0xfc, 0x9f, 0x18, 0xba, 0x95, 0x6c, 0xb1, 0x8f,
	0xfe, 0x9d, 0xb9, 0x9d, 0xb5, 0x77, 0x56, 0x4d, 0xae, 0x14, 0xd2, 0x7e, 0x33, 0xb6, 0xb2, 0x3e,
	0x7d, 0x53, 0x3e, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x20, 0xed, 0x4a, 0x0c, 0xa2, 0x04, 0x00,
	0x00,
}
