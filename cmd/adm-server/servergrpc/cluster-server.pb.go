// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/cmd/adm-server/servergrpc/cluster-server.proto
// DO NOT EDIT!

/*
Package servergrpc is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/cmd/adm-server/servergrpc/cluster-server.proto

It has these top-level messages:
	ClientMes
	RegisterRequest
	AgentHealthRequest
	ServerRet
	ServerRets
	GetNodesInfoRequest
	NodesInfo
	NodeInfo
	PurgeNodesRequest
	PurgeNodeAnswer
	PurgeNodesAnswers
	AmpRequest
	AmpRet
	TypedOutput
	AmpMonitorAnswers
	AmpStatusAnswer
*/
package servergrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientMes struct {
	ClientId string       `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Function string       `protobuf:"bytes,2,opt,name=function" json:"function,omitempty"`
	Output   *TypedOutput `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
}

func (m *ClientMes) Reset()                    { *m = ClientMes{} }
func (m *ClientMes) String() string            { return proto.CompactTextString(m) }
func (*ClientMes) ProtoMessage()               {}
func (*ClientMes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClientMes) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ClientMes) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ClientMes) GetOutput() *TypedOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

type RegisterRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisterRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RegisterRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *RegisterRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AgentHealthRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AgentHealthRequest) Reset()                    { *m = AgentHealthRequest{} }
func (m *AgentHealthRequest) String() string            { return proto.CompactTextString(m) }
func (*AgentHealthRequest) ProtoMessage()               {}
func (*AgentHealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AgentHealthRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ServerRet struct {
	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ServerRet) Reset()                    { *m = ServerRet{} }
func (m *ServerRet) String() string            { return proto.CompactTextString(m) }
func (*ServerRet) ProtoMessage()               {}
func (*ServerRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServerRet) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *ServerRet) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ServerRets struct {
	Rets []*ServerRet `protobuf:"bytes,1,rep,name=rets" json:"rets,omitempty"`
}

func (m *ServerRets) Reset()                    { *m = ServerRets{} }
func (m *ServerRets) String() string            { return proto.CompactTextString(m) }
func (*ServerRets) ProtoMessage()               {}
func (*ServerRets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServerRets) GetRets() []*ServerRet {
	if m != nil {
		return m.Rets
	}
	return nil
}

type GetNodesInfoRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Node     string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	More     bool   `protobuf:"varint,3,opt,name=more" json:"more,omitempty"`
}

func (m *GetNodesInfoRequest) Reset()                    { *m = GetNodesInfoRequest{} }
func (m *GetNodesInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodesInfoRequest) ProtoMessage()               {}
func (*GetNodesInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetNodesInfoRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *GetNodesInfoRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *GetNodesInfoRequest) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

type NodesInfo struct {
	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodesInfo) Reset()                    { *m = NodesInfo{} }
func (m *NodesInfo) String() string            { return proto.CompactTextString(m) }
func (*NodesInfo) ProtoMessage()               {}
func (*NodesInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NodesInfo) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeInfo struct {
	Id                  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Role                string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	Availability        string `protobuf:"bytes,3,opt,name=availability" json:"availability,omitempty"`
	Hostname            string `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	HostArchitecture    string `protobuf:"bytes,5,opt,name=host_architecture,json=hostArchitecture" json:"host_architecture,omitempty"`
	HostOs              string `protobuf:"bytes,6,opt,name=host_os,json=hostOs" json:"host_os,omitempty"`
	Cpu                 int64  `protobuf:"varint,7,opt,name=cpu" json:"cpu,omitempty"`
	Memory              int64  `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	DockerVersion       string `protobuf:"bytes,9,opt,name=docker_version,json=dockerVersion" json:"docker_version,omitempty"`
	Status              string `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	Leader              bool   `protobuf:"varint,11,opt,name=leader" json:"leader,omitempty"`
	Reachability        string `protobuf:"bytes,12,opt,name=reachability" json:"reachability,omitempty"`
	Address             string `protobuf:"bytes,13,opt,name=address" json:"address,omitempty"`
	NbContainers        int64  `protobuf:"varint,14,opt,name=nb_containers,json=nbContainers" json:"nb_containers,omitempty"`
	NbContainersRunning int64  `protobuf:"varint,15,opt,name=nb_containers_running,json=nbContainersRunning" json:"nb_containers_running,omitempty"`
	NbContainersPaused  int64  `protobuf:"varint,16,opt,name=nb_containers_paused,json=nbContainersPaused" json:"nb_containers_paused,omitempty"`
	NbContainersStopped int64  `protobuf:"varint,17,opt,name=nb_containers_stopped,json=nbContainersStopped" json:"nb_containers_stopped,omitempty"`
	Images              int64  `protobuf:"varint,18,opt,name=images" json:"images,omitempty"`
	Error               string `protobuf:"bytes,19,opt,name=error" json:"error,omitempty"`
	AgentId             string `protobuf:"bytes,20,opt,name=agentId" json:"agentId,omitempty"`
	NodeName            string `protobuf:"bytes,21,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfo) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *NodeInfo) GetAvailability() string {
	if m != nil {
		return m.Availability
	}
	return ""
}

func (m *NodeInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeInfo) GetHostArchitecture() string {
	if m != nil {
		return m.HostArchitecture
	}
	return ""
}

func (m *NodeInfo) GetHostOs() string {
	if m != nil {
		return m.HostOs
	}
	return ""
}

func (m *NodeInfo) GetCpu() int64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *NodeInfo) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *NodeInfo) GetDockerVersion() string {
	if m != nil {
		return m.DockerVersion
	}
	return ""
}

func (m *NodeInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeInfo) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *NodeInfo) GetReachability() string {
	if m != nil {
		return m.Reachability
	}
	return ""
}

func (m *NodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeInfo) GetNbContainers() int64 {
	if m != nil {
		return m.NbContainers
	}
	return 0
}

func (m *NodeInfo) GetNbContainersRunning() int64 {
	if m != nil {
		return m.NbContainersRunning
	}
	return 0
}

func (m *NodeInfo) GetNbContainersPaused() int64 {
	if m != nil {
		return m.NbContainersPaused
	}
	return 0
}

func (m *NodeInfo) GetNbContainersStopped() int64 {
	if m != nil {
		return m.NbContainersStopped
	}
	return 0
}

func (m *NodeInfo) GetImages() int64 {
	if m != nil {
		return m.Images
	}
	return 0
}

func (m *NodeInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *NodeInfo) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *NodeInfo) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type PurgeNodesRequest struct {
	ClientId  string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Node      string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Container bool   `protobuf:"varint,3,opt,name=container" json:"container,omitempty"`
	Volume    bool   `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	Image     bool   `protobuf:"varint,5,opt,name=image" json:"image,omitempty"`
	Force     bool   `protobuf:"varint,6,opt,name=force" json:"force,omitempty"`
}

func (m *PurgeNodesRequest) Reset()                    { *m = PurgeNodesRequest{} }
func (m *PurgeNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgeNodesRequest) ProtoMessage()               {}
func (*PurgeNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PurgeNodesRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *PurgeNodesRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *PurgeNodesRequest) GetContainer() bool {
	if m != nil {
		return m.Container
	}
	return false
}

func (m *PurgeNodesRequest) GetVolume() bool {
	if m != nil {
		return m.Volume
	}
	return false
}

func (m *PurgeNodesRequest) GetImage() bool {
	if m != nil {
		return m.Image
	}
	return false
}

func (m *PurgeNodesRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type PurgeNodeAnswer struct {
	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	AgentId      string `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	NbContainers int32  `protobuf:"varint,3,opt,name=nb_containers,json=nbContainers" json:"nb_containers,omitempty"`
	NbVolumes    int32  `protobuf:"varint,4,opt,name=nb_volumes,json=nbVolumes" json:"nb_volumes,omitempty"`
	NbImages     int32  `protobuf:"varint,5,opt,name=nb_images,json=nbImages" json:"nb_images,omitempty"`
	Error        string `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
}

func (m *PurgeNodeAnswer) Reset()                    { *m = PurgeNodeAnswer{} }
func (m *PurgeNodeAnswer) String() string            { return proto.CompactTextString(m) }
func (*PurgeNodeAnswer) ProtoMessage()               {}
func (*PurgeNodeAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PurgeNodeAnswer) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *PurgeNodeAnswer) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *PurgeNodeAnswer) GetNbContainers() int32 {
	if m != nil {
		return m.NbContainers
	}
	return 0
}

func (m *PurgeNodeAnswer) GetNbVolumes() int32 {
	if m != nil {
		return m.NbVolumes
	}
	return 0
}

func (m *PurgeNodeAnswer) GetNbImages() int32 {
	if m != nil {
		return m.NbImages
	}
	return 0
}

func (m *PurgeNodeAnswer) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PurgeNodesAnswers struct {
	Agents []*PurgeNodeAnswer `protobuf:"bytes,1,rep,name=agents" json:"agents,omitempty"`
}

func (m *PurgeNodesAnswers) Reset()                    { *m = PurgeNodesAnswers{} }
func (m *PurgeNodesAnswers) String() string            { return proto.CompactTextString(m) }
func (*PurgeNodesAnswers) ProtoMessage()               {}
func (*PurgeNodesAnswers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PurgeNodesAnswers) GetAgents() []*PurgeNodeAnswer {
	if m != nil {
		return m.Agents
	}
	return nil
}

type AmpRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Silence  bool   `protobuf:"varint,2,opt,name=silence" json:"silence,omitempty"`
	Verbose  bool   `protobuf:"varint,3,opt,name=verbose" json:"verbose,omitempty"`
	Force    bool   `protobuf:"varint,4,opt,name=force" json:"force,omitempty"`
	Local    bool   `protobuf:"varint,5,opt,name=local" json:"local,omitempty"`
	Node     string `protobuf:"bytes,6,opt,name=node" json:"node,omitempty"`
}

func (m *AmpRequest) Reset()                    { *m = AmpRequest{} }
func (m *AmpRequest) String() string            { return proto.CompactTextString(m) }
func (*AmpRequest) ProtoMessage()               {}
func (*AmpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AmpRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AmpRequest) GetSilence() bool {
	if m != nil {
		return m.Silence
	}
	return false
}

func (m *AmpRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *AmpRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *AmpRequest) GetLocal() bool {
	if m != nil {
		return m.Local
	}
	return false
}

func (m *AmpRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type AmpRet struct {
}

func (m *AmpRet) Reset()                    { *m = AmpRet{} }
func (m *AmpRet) String() string            { return proto.CompactTextString(m) }
func (*AmpRet) ProtoMessage()               {}
func (*AmpRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type TypedOutput struct {
	Output     string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	OutputType int32  `protobuf:"varint,2,opt,name=output_type,json=outputType" json:"output_type,omitempty"`
}

func (m *TypedOutput) Reset()                    { *m = TypedOutput{} }
func (m *TypedOutput) String() string            { return proto.CompactTextString(m) }
func (*TypedOutput) ProtoMessage()               {}
func (*TypedOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TypedOutput) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *TypedOutput) GetOutputType() int32 {
	if m != nil {
		return m.OutputType
	}
	return 0
}

type AmpMonitorAnswers struct {
	Outputs []*TypedOutput `protobuf:"bytes,1,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *AmpMonitorAnswers) Reset()                    { *m = AmpMonitorAnswers{} }
func (m *AmpMonitorAnswers) String() string            { return proto.CompactTextString(m) }
func (*AmpMonitorAnswers) ProtoMessage()               {}
func (*AmpMonitorAnswers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AmpMonitorAnswers) GetOutputs() []*TypedOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type AmpStatusAnswer struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *AmpStatusAnswer) Reset()                    { *m = AmpStatusAnswer{} }
func (m *AmpStatusAnswer) String() string            { return proto.CompactTextString(m) }
func (*AmpStatusAnswer) ProtoMessage()               {}
func (*AmpStatusAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AmpStatusAnswer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientMes)(nil), "servergrpc.ClientMes")
	proto.RegisterType((*RegisterRequest)(nil), "servergrpc.RegisterRequest")
	proto.RegisterType((*AgentHealthRequest)(nil), "servergrpc.AgentHealthRequest")
	proto.RegisterType((*ServerRet)(nil), "servergrpc.ServerRet")
	proto.RegisterType((*ServerRets)(nil), "servergrpc.ServerRets")
	proto.RegisterType((*GetNodesInfoRequest)(nil), "servergrpc.GetNodesInfoRequest")
	proto.RegisterType((*NodesInfo)(nil), "servergrpc.NodesInfo")
	proto.RegisterType((*NodeInfo)(nil), "servergrpc.NodeInfo")
	proto.RegisterType((*PurgeNodesRequest)(nil), "servergrpc.PurgeNodesRequest")
	proto.RegisterType((*PurgeNodeAnswer)(nil), "servergrpc.PurgeNodeAnswer")
	proto.RegisterType((*PurgeNodesAnswers)(nil), "servergrpc.PurgeNodesAnswers")
	proto.RegisterType((*AmpRequest)(nil), "servergrpc.AmpRequest")
	proto.RegisterType((*AmpRet)(nil), "servergrpc.AmpRet")
	proto.RegisterType((*TypedOutput)(nil), "servergrpc.TypedOutput")
	proto.RegisterType((*AmpMonitorAnswers)(nil), "servergrpc.AmpMonitorAnswers")
	proto.RegisterType((*AmpStatusAnswer)(nil), "servergrpc.AmpStatusAnswer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterServerService service

type ClusterServerServiceClient interface {
	GetClientStream(ctx context.Context, opts ...grpc.CallOption) (ClusterServerService_GetClientStreamClient, error)
	RegisterAgent(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ServerRet, error)
	AgentHealth(ctx context.Context, in *AgentHealthRequest, opts ...grpc.CallOption) (*ServerRet, error)
	GetNodesInfo(ctx context.Context, in *GetNodesInfoRequest, opts ...grpc.CallOption) (*NodesInfo, error)
	PurgeNodes(ctx context.Context, in *PurgeNodesRequest, opts ...grpc.CallOption) (*PurgeNodesAnswers, error)
	AmpMonitor(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpMonitorAnswers, error)
	AmpPull(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpRet, error)
	GetAmpStatus(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpStatusAnswer, error)
	AmpStart(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpRet, error)
	AmpStop(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpRet, error)
}

type clusterServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServerServiceClient(cc *grpc.ClientConn) ClusterServerServiceClient {
	return &clusterServerServiceClient{cc}
}

func (c *clusterServerServiceClient) GetClientStream(ctx context.Context, opts ...grpc.CallOption) (ClusterServerService_GetClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterServerService_serviceDesc.Streams[0], c.cc, "/servergrpc.ClusterServerService/GetClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterServerServiceGetClientStreamClient{stream}
	return x, nil
}

type ClusterServerService_GetClientStreamClient interface {
	Send(*ClientMes) error
	Recv() (*ClientMes, error)
	grpc.ClientStream
}

type clusterServerServiceGetClientStreamClient struct {
	grpc.ClientStream
}

func (x *clusterServerServiceGetClientStreamClient) Send(m *ClientMes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterServerServiceGetClientStreamClient) Recv() (*ClientMes, error) {
	m := new(ClientMes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterServerServiceClient) RegisterAgent(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ServerRet, error) {
	out := new(ServerRet)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/RegisterAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) AgentHealth(ctx context.Context, in *AgentHealthRequest, opts ...grpc.CallOption) (*ServerRet, error) {
	out := new(ServerRet)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/AgentHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) GetNodesInfo(ctx context.Context, in *GetNodesInfoRequest, opts ...grpc.CallOption) (*NodesInfo, error) {
	out := new(NodesInfo)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/GetNodesInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) PurgeNodes(ctx context.Context, in *PurgeNodesRequest, opts ...grpc.CallOption) (*PurgeNodesAnswers, error) {
	out := new(PurgeNodesAnswers)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/PurgeNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) AmpMonitor(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpMonitorAnswers, error) {
	out := new(AmpMonitorAnswers)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/AmpMonitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) AmpPull(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpRet, error) {
	out := new(AmpRet)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/AmpPull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) GetAmpStatus(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpStatusAnswer, error) {
	out := new(AmpStatusAnswer)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/GetAmpStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) AmpStart(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpRet, error) {
	out := new(AmpRet)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/AmpStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServerServiceClient) AmpStop(ctx context.Context, in *AmpRequest, opts ...grpc.CallOption) (*AmpRet, error) {
	out := new(AmpRet)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/AmpStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterServerService service

type ClusterServerServiceServer interface {
	GetClientStream(ClusterServerService_GetClientStreamServer) error
	RegisterAgent(context.Context, *RegisterRequest) (*ServerRet, error)
	AgentHealth(context.Context, *AgentHealthRequest) (*ServerRet, error)
	GetNodesInfo(context.Context, *GetNodesInfoRequest) (*NodesInfo, error)
	PurgeNodes(context.Context, *PurgeNodesRequest) (*PurgeNodesAnswers, error)
	AmpMonitor(context.Context, *AmpRequest) (*AmpMonitorAnswers, error)
	AmpPull(context.Context, *AmpRequest) (*AmpRet, error)
	GetAmpStatus(context.Context, *AmpRequest) (*AmpStatusAnswer, error)
	AmpStart(context.Context, *AmpRequest) (*AmpRet, error)
	AmpStop(context.Context, *AmpRequest) (*AmpRet, error)
}

func RegisterClusterServerServiceServer(s *grpc.Server, srv ClusterServerServiceServer) {
	s.RegisterService(&_ClusterServerService_serviceDesc, srv)
}

func _ClusterServerService_GetClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServerServiceServer).GetClientStream(&clusterServerServiceGetClientStreamServer{stream})
}

type ClusterServerService_GetClientStreamServer interface {
	Send(*ClientMes) error
	Recv() (*ClientMes, error)
	grpc.ServerStream
}

type clusterServerServiceGetClientStreamServer struct {
	grpc.ServerStream
}

func (x *clusterServerServiceGetClientStreamServer) Send(m *ClientMes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterServerServiceGetClientStreamServer) Recv() (*ClientMes, error) {
	m := new(ClientMes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClusterServerService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).RegisterAgent(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_AgentHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).AgentHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/AgentHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).AgentHealth(ctx, req.(*AgentHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_GetNodesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).GetNodesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/GetNodesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).GetNodesInfo(ctx, req.(*GetNodesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_PurgeNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).PurgeNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/PurgeNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).PurgeNodes(ctx, req.(*PurgeNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_AmpMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).AmpMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/AmpMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).AmpMonitor(ctx, req.(*AmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_AmpPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).AmpPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/AmpPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).AmpPull(ctx, req.(*AmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_GetAmpStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).GetAmpStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/GetAmpStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).GetAmpStatus(ctx, req.(*AmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_AmpStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).AmpStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/AmpStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).AmpStart(ctx, req.(*AmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterServerService_AmpStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).AmpStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/AmpStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).AmpStop(ctx, req.(*AmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servergrpc.ClusterServerService",
	HandlerType: (*ClusterServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _ClusterServerService_RegisterAgent_Handler,
		},
		{
			MethodName: "AgentHealth",
			Handler:    _ClusterServerService_AgentHealth_Handler,
		},
		{
			MethodName: "GetNodesInfo",
			Handler:    _ClusterServerService_GetNodesInfo_Handler,
		},
		{
			MethodName: "PurgeNodes",
			Handler:    _ClusterServerService_PurgeNodes_Handler,
		},
		{
			MethodName: "AmpMonitor",
			Handler:    _ClusterServerService_AmpMonitor_Handler,
		},
		{
			MethodName: "AmpPull",
			Handler:    _ClusterServerService_AmpPull_Handler,
		},
		{
			MethodName: "GetAmpStatus",
			Handler:    _ClusterServerService_GetAmpStatus_Handler,
		},
		{
			MethodName: "AmpStart",
			Handler:    _ClusterServerService_AmpStart_Handler,
		},
		{
			MethodName: "AmpStop",
			Handler:    _ClusterServerService_AmpStop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClientStream",
			Handler:       _ClusterServerService_GetClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/appcelerator/amp/cmd/adm-server/servergrpc/cluster-server.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/cmd/adm-server/servergrpc/cluster-server.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0xb7, 0x12, 0xff, 0x91, 0x9f, 0xf3, 0x97, 0x49, 0x5a, 0xcd, 0x69, 0xd7, 0x80, 0xdb, 0x80,
	0x74, 0xc3, 0xe2, 0x2e, 0x3d, 0x64, 0x87, 0x5d, 0x8c, 0x20, 0x69, 0x32, 0xac, 0x6d, 0xa0, 0x0c,
	0x3d, 0xec, 0x62, 0xd0, 0x12, 0xa3, 0x08, 0x93, 0x48, 0x8d, 0xa4, 0x3c, 0xe4, 0x8b, 0xec, 0xb6,
	0xeb, 0x3e, 0xc6, 0xb0, 0x8f, 0x36, 0x90, 0x94, 0x64, 0xc9, 0x8e, 0x8b, 0x75, 0x17, 0x9b, 0xef,
	0x0f, 0xf9, 0x7e, 0x7c, 0xef, 0xc7, 0xf7, 0x04, 0x3f, 0x46, 0xb1, 0xba, 0xcf, 0xa7, 0x27, 0x01,
	0x4f, 0x47, 0x24, 0xcb, 0x02, 0x9a, 0x50, 0x41, 0x14, 0x17, 0x23, 0x92, 0x66, 0xa3, 0x20, 0x0d,
	0x47, 0x24, 0x4c, 0xbf, 0x95, 0x54, 0xcc, 0xa8, 0x18, 0xd9, 0xbf, 0x48, 0x64, 0xc1, 0x28, 0x48,
	0x72, 0xa9, 0xa8, 0x28, 0x2c, 0x27, 0x99, 0xe0, 0x8a, 0x23, 0x98, 0x3b, 0x0c, 0x9f, 0x45, 0x9c,
	0x47, 0x09, 0x1d, 0x91, 0x2c, 0x1e, 0x11, 0xc6, 0xb8, 0x22, 0x2a, 0xe6, 0x4c, 0x5a, 0x4f, 0x9c,
	0x43, 0xff, 0x3c, 0x89, 0x29, 0x53, 0x6f, 0xa9, 0x44, 0x87, 0xd0, 0x0f, 0x8c, 0x30, 0x89, 0x43,
	0xcf, 0x39, 0x72, 0x8e, 0xfb, 0xbe, 0x6b, 0x15, 0xd7, 0x21, 0x1a, 0x82, 0x7b, 0x97, 0xb3, 0x40,
	0x6f, 0xf6, 0xd6, 0xac, 0xad, 0x94, 0xd1, 0x08, 0xba, 0x3c, 0x57, 0x59, 0xae, 0xbc, 0xf5, 0x23,
	0xe7, 0x78, 0x70, 0xfa, 0xf4, 0x64, 0x0e, 0xe0, 0xe4, 0xe7, 0x87, 0x8c, 0x86, 0xef, 0x8d, 0xd9,
	0x2f, 0xdc, 0x70, 0x06, 0xdb, 0x3e, 0x8d, 0x62, 0x8d, 0xdc, 0xa7, 0xbf, 0xe5, 0x54, 0x2a, 0xb4,
	0x05, 0x6b, 0x55, 0xd4, 0xb5, 0x38, 0x44, 0x4f, 0xa1, 0xc7, 0x78, 0x48, 0x35, 0x14, 0x1b, 0xae,
	0xab, 0x45, 0x0b, 0xe4, 0x9e, 0x4b, 0xc5, 0x48, 0x4a, 0x4d, 0xb8, 0xbe, 0x5f, 0xc9, 0xc8, 0x83,
	0x1e, 0x09, 0x43, 0x41, 0xa5, 0xf4, 0xda, 0xc6, 0x54, 0x8a, 0xf8, 0x4b, 0x40, 0xe3, 0x88, 0x32,
	0x75, 0x45, 0x49, 0xa2, 0xee, 0x57, 0x04, 0xc5, 0x3f, 0x40, 0xff, 0xd6, 0x20, 0xf7, 0xa9, 0x42,
	0x9f, 0x81, 0x4b, 0xa2, 0x46, 0x36, 0x7a, 0x46, 0xbe, 0x0e, 0xd1, 0x3e, 0x74, 0xa8, 0x10, 0x5c,
	0x14, 0xd0, 0xac, 0x80, 0xcf, 0x00, 0xaa, 0xdd, 0x12, 0xbd, 0x84, 0xb6, 0xa0, 0x4a, 0x7a, 0xce,
	0xd1, 0xfa, 0xf1, 0xe0, 0xf4, 0xa0, 0x9e, 0x92, 0xca, 0xcb, 0x37, 0x2e, 0xf8, 0x17, 0xd8, 0x7b,
	0x43, 0xd5, 0x3b, 0x1e, 0x52, 0x79, 0xcd, 0xee, 0x78, 0x89, 0xee, 0xa3, 0xf5, 0x40, 0xd0, 0xd6,
	0x09, 0x29, 0x10, 0x98, 0xb5, 0xd6, 0xa5, 0x5c, 0xd8, 0xb4, 0xb8, 0xbe, 0x59, 0xe3, 0x33, 0xe8,
	0x57, 0x07, 0xa3, 0xaf, 0xa1, 0xa3, 0x1d, 0x4b, 0x50, 0xfb, 0x75, 0x50, 0xda, 0xcb, 0x44, 0xb7,
	0x2e, 0xf8, 0x8f, 0x0e, 0xb8, 0xa5, 0x6e, 0xa9, 0x3a, 0x08, 0xda, 0x82, 0x27, 0x55, 0x74, 0xbd,
	0x46, 0x18, 0x36, 0xc8, 0x8c, 0xc4, 0x09, 0x99, 0xc6, 0x49, 0xac, 0x1e, 0x8a, 0xe2, 0x34, 0x74,
	0x8d, 0xe2, 0xb5, 0x17, 0x8a, 0xf7, 0x0d, 0xec, 0xea, 0xf5, 0x84, 0x88, 0xe0, 0x3e, 0x56, 0x34,
	0x50, 0xb9, 0xa0, 0x5e, 0xc7, 0x38, 0xed, 0x68, 0xc3, 0xb8, 0xa6, 0xd7, 0xf4, 0x30, 0xce, 0x5c,
	0x7a, 0x5d, 0x4b, 0x0f, 0x2d, 0xbe, 0x97, 0x68, 0x07, 0xd6, 0x83, 0x2c, 0xf7, 0x7a, 0x47, 0xce,
	0xf1, 0xba, 0xaf, 0x97, 0xe8, 0x09, 0x74, 0x53, 0x9a, 0x72, 0xf1, 0xe0, 0xb9, 0x46, 0x59, 0x48,
	0xe8, 0x2b, 0xd8, 0x0a, 0x79, 0xf0, 0x2b, 0x15, 0x93, 0x19, 0x15, 0x52, 0xf3, 0xba, 0x6f, 0x4e,
	0xda, 0xb4, 0xda, 0x0f, 0x56, 0xa9, 0xb7, 0x4b, 0x45, 0x54, 0x2e, 0x3d, 0xb0, 0x81, 0xac, 0xa4,
	0xf5, 0x09, 0x25, 0x21, 0x15, 0xde, 0xc0, 0xa4, 0xbb, 0x90, 0x74, 0x1a, 0x04, 0x25, 0xc1, 0x7d,
	0x99, 0x86, 0x0d, 0x9b, 0x86, 0xba, 0xae, 0xce, 0xd3, 0xcd, 0x06, 0x4f, 0xd1, 0x17, 0xb0, 0xc9,
	0xa6, 0x93, 0x80, 0x33, 0x45, 0x62, 0x46, 0x85, 0xf4, 0xb6, 0x0c, 0xe6, 0x0d, 0x36, 0x3d, 0xaf,
	0x74, 0xe8, 0x14, 0x0e, 0x1a, 0x4e, 0x13, 0x91, 0x33, 0x16, 0xb3, 0xc8, 0xdb, 0x36, 0xce, 0x7b,
	0x75, 0x67, 0xdf, 0x9a, 0xd0, 0x2b, 0xd8, 0x6f, 0xee, 0xc9, 0x48, 0x2e, 0x69, 0xe8, 0xed, 0x98,
	0x2d, 0xa8, 0xbe, 0xe5, 0xc6, 0x58, 0x96, 0xa3, 0x48, 0xc5, 0xb3, 0x8c, 0x86, 0xde, 0xee, 0x72,
	0x94, 0x5b, 0x6b, 0xd2, 0x49, 0x89, 0x53, 0x12, 0x51, 0xe9, 0x21, 0x9b, 0x6b, 0x2b, 0xcd, 0x1f,
	0xcc, 0x5e, 0xed, 0xc1, 0x98, 0x34, 0xd8, 0x17, 0xe5, 0xed, 0x37, 0x1f, 0xd8, 0x10, 0x5c, 0xcd,
	0xc2, 0x77, 0x9a, 0x27, 0x07, 0x96, 0x27, 0xa5, 0x8c, 0xff, 0x72, 0x60, 0xf7, 0x26, 0x17, 0x11,
	0x35, 0xbc, 0xfe, 0xdf, 0x8f, 0xe5, 0x19, 0xf4, 0xab, 0xbb, 0x15, 0x2f, 0x66, 0xae, 0xd0, 0x17,
	0x99, 0xf1, 0x24, 0x2f, 0x68, 0xea, 0xfa, 0x85, 0xa4, 0x2f, 0x62, 0xae, 0x64, 0x88, 0xe9, 0xfa,
	0x56, 0xd0, 0xda, 0x3b, 0x2e, 0x02, 0x6a, 0xb8, 0xe8, 0xfa, 0x56, 0xc0, 0xff, 0x38, 0xb0, 0x5d,
	0x01, 0x1d, 0x33, 0xf9, 0x3b, 0x15, 0x1f, 0x87, 0x59, 0xef, 0x38, 0x6b, 0xcd, 0x84, 0x2c, 0xf1,
	0x42, 0x23, 0xee, 0x2c, 0xf0, 0xe2, 0x39, 0x00, 0x9b, 0x4e, 0x2c, 0x52, 0xdb, 0x01, 0x3b, 0x7e,
	0x9f, 0x4d, 0x3f, 0x58, 0x85, 0x8e, 0xcd, 0xa6, 0x93, 0xa2, 0x3e, 0x1d, 0x63, 0x75, 0xd9, 0xf4,
	0x7a, 0xa1, 0x42, 0xdd, 0x7a, 0x4b, 0xbb, 0xaa, 0xa7, 0xda, 0x5e, 0x41, 0xa2, 0xd7, 0xd0, 0x35,
	0xb0, 0xca, 0x36, 0x72, 0x58, 0x6f, 0x23, 0x0b, 0x17, 0xf6, 0x0b, 0x57, 0xfc, 0xa7, 0x03, 0x30,
	0x4e, 0xb3, 0xff, 0x54, 0x2e, 0x0f, 0x7a, 0x32, 0x4e, 0x28, 0x0b, 0x6c, 0xc5, 0x5c, 0xbf, 0x14,
	0xb5, 0x65, 0x46, 0xc5, 0x94, 0xcb, 0xb2, 0xc9, 0x95, 0xe2, 0xbc, 0x04, 0xed, 0x5a, 0x09, 0xb4,
	0x36, 0xe1, 0x01, 0x49, 0xca, 0x72, 0x19, 0xa1, 0xa2, 0x43, 0x77, 0x4e, 0x07, 0xec, 0x42, 0xd7,
	0xc0, 0x53, 0xf8, 0x12, 0x06, 0xb5, 0x99, 0xa5, 0x99, 0x50, 0x0c, 0x37, 0x0b, 0xb3, 0x90, 0xd0,
	0x0b, 0x18, 0xd8, 0xd5, 0x44, 0x3d, 0x64, 0x16, 0x68, 0xc7, 0x07, 0xab, 0xd2, 0xfb, 0xf1, 0x25,
	0xec, 0x8e, 0xd3, 0xec, 0x2d, 0x67, 0xb1, 0xe2, 0xa2, 0xcc, 0xdd, 0x77, 0xd0, 0xb3, 0x2e, 0x65,
	0xf2, 0x56, 0xce, 0xca, 0xd2, 0x0f, 0xbf, 0x84, 0xed, 0x71, 0x9a, 0xdd, 0x9a, 0xae, 0x53, 0xb0,
	0x68, 0xde, 0x93, 0x9c, 0x7a, 0x4f, 0x3a, 0xfd, 0xbb, 0x03, 0xfb, 0xe7, 0xf6, 0x8b, 0xc0, 0xce,
	0x18, 0xfd, 0x1b, 0x07, 0x14, 0x5d, 0xc0, 0xf6, 0x1b, 0xaa, 0xec, 0xa8, 0xbf, 0x55, 0x82, 0x92,
	0x14, 0x35, 0x26, 0x52, 0xf5, 0x11, 0x30, 0x7c, 0x5c, 0x8d, 0x5b, 0xc7, 0xce, 0x2b, 0x07, 0x5d,
	0xc0, 0x66, 0x39, 0xb7, 0xcd, 0x34, 0x45, 0x8d, 0xd2, 0x2f, 0x8c, 0xf4, 0xe1, 0xe3, 0x33, 0x0f,
	0xb7, 0xd0, 0x25, 0x0c, 0x6a, 0xc3, 0x18, 0x7d, 0x5e, 0xf7, 0x5b, 0x9e, 0xd2, 0xab, 0xcf, 0xb9,
	0x82, 0x8d, 0xfa, 0xdc, 0x44, 0x2f, 0xea, 0x8e, 0x8f, 0x4c, 0xd4, 0xe6, 0x49, 0x95, 0x15, 0xb7,
	0xd0, 0x4f, 0x00, 0x73, 0x9e, 0xa3, 0xe7, 0x8f, 0x12, 0xba, 0x6c, 0x35, 0xc3, 0x15, 0xe6, 0xa2,
	0xc4, 0xb8, 0x85, 0x2e, 0x0c, 0xd5, 0x8b, 0xca, 0xa3, 0x27, 0x8d, 0xeb, 0x55, 0x4f, 0xa0, 0x79,
	0xcc, 0x12, 0x53, 0x70, 0x0b, 0x9d, 0x41, 0x6f, 0x9c, 0x66, 0x37, 0x79, 0x92, 0xac, 0x3c, 0x03,
	0x2d, 0xe9, 0x95, 0x89, 0xaf, 0xf3, 0x52, 0x91, 0x66, 0xe5, 0xee, 0xc3, 0x05, 0x7d, 0x9d, 0x63,
	0xb8, 0x85, 0xbe, 0x07, 0xd7, 0x2a, 0x85, 0xfa, 0x44, 0x00, 0x16, 0xb9, 0x1e, 0x0a, 0x9f, 0xb6,
	0x71, 0xda, 0x35, 0x9f, 0xa5, 0xaf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x0d, 0x40, 0x5e,
	0x0e, 0x0b, 0x00, 0x00,
}
