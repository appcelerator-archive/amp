#!/bin/bash

SUCCESS=0

CID=$1

# This script uses other scripts expected to be in the same directory
# This gets absolute path to script (resolving symlinks)
readonly SP="$(cd "$(dirname "$0")"; pwd -P)"

# commands
readonly bootstrap="$SP/../bootstrap/bootstrap"
readonly clustercheck="$SP/clustercheck"
readonly curlcheck="$SP/curlcheck"
readonly swarmcheck="$SP/swarmcheck"
readonly servicescheck="$SP/servicescheck"

checkexit() {
  [[ $1 -ne 0 ]] && printf "${@:2} (exit $1)\n" && exit $1
}

cleanup() {
  [[ SUCCESS -ne 1 && ! -z $CID ]] && echo "clean up" && $bootstrap -d $CID
}
trap cleanup EXIT

ok() {
  echo ok $1
}

pushimage() {
  echo "push image: $1/$2"
  docker tag $2 $1/$2
  checkexit $? "error tagging image"
  docker push $1/$2
  checkexit $? "error pushing image"
  ok
}

deploystack() {
  echo "deploy $1 => $2"
  docker run -it --rm --network=hostnet -v $(dirname $SP)/stacks:/stacks docker --host=m1 stack deploy -c /stacks/$1 $2
  checkexit $? "error deploying stack"
  ok
}

# can only use this once the swarm is ready
lookup() {
  [[ -z $amps ]] && echo "error to use lookup before swarm is created" && return 1
  $amps run --rm --network=ampnet appcelerator/alpine:3.5.2 nslookup $1
}

# can only use this once the swarm is ready
kurl() {
  [[ -z $amps ]] && echo "error to use kurl before swarm is created" && return 1
  $amps run --rm --network=ampnet appcelerator/alpine:3.5.2 curl -L -s -o /dev/null -w '%{http_code}\n' $1
}

if [ -z $CID ]; then
  echo "bootstrapping cluster"
  CID=$($bootstrap -f)
  checkexit $? "bootstrap failed"
  echo $CID
else
  $bootstrap -s $CID
  if [ $? -ne 0 ]; then
    echo "bootstrapping cluster: $CID"
    $bootstrap -fi $CID
    checkexit $? "bootstrap failed"
    echo $CID
  fi
fi

echo "wait for cluster"
$clustercheck $CID
checkexit $? "cluster timed out"
ok

echo "wait for swarm mode"
$swarmcheck 300
checkexit $? "swarm mode timed out"
ok

# helper for any subsequent docker commands
amps="docker run -it --rm --network=hostnet -v $(dirname $SP)/stacks:/stacks docker --host=m1"

echo "wait for registry"
$curlcheck localhost:5000/v2/ 200 10
checkexit $? "registry timed out"
ok

echo "push images to cluster"
pushimage localhost:5000 appcelerator/amplifier:local
pushimage localhost:5000 appcelerator/ampbeat:local
pushimage localhost:5000 appcelerator/agent:local

echo "deploy amp1 stack to cluster"
deploystack amp1.stack.yml amp1
echo "wait for all amp1 stack service replicas to be running"
$servicescheck 600
checkexit $? "amp1 service replica checks timed out"
ok

echo "deploy amp2 stack to cluster"
deploystack amp2.stack.yml amp2
maxwait=580
echo "wait for all amp2 service replicas to be running ($maxwait sec)"
$servicescheck $maxwait
checkexit $? "amp2 service replica checks timed out"
ok

echo "deploy amp3 stack to cluster"
deploystack amp3.stack.yml amp3
echo "wait for all amp3 service replicas to be running ($maxwait sec)"
$servicescheck $maxwait
checkexit $? "amp3 service replica checks timed out"
ok

# final sanity checks
# ===================

$servicescheck 0
checkexit $? "final service replica smoke check failed"
ok

echo
$amps service ls
echo

# sanity service lookup and ping checks after starting monitoring stack
echo "test nats availability"
lookup nats
checkexit $? "service lookup check failed: nats"
ok "service lookup check succeeded: nats"
kurl nats:8222
checkexit $? "service ping check failed: nats"
ok "service ping check succeeded: nats"

echo "test elasticsearch availability"
lookup elasticsearch
checkexit $? "service lookup check failed: elasticsearch"
ok "service lookup check succeeded: elasticsearch"
kurl elasticsearch:9200
checkexit $? "service ping check failed: elasticsearch"
ok "service ping check succeeded: elasticsearch"

SUCCESS=1

