#!/bin/bash

TIMEOUT="${1:-300}"
INTERVAL="${2:-2}"

[ -z "$DOCKERHOST" ] && DOCKERHOST=m1
[ "$DOCKERHOST" = "m1" ] && amps="docker run -it --rm --network=hostnet docker --host=m1" || amps="docker run -it --rm docker --host=$DOCKERHOST"

check() {
  list=$($amps service ls)
  result=$(echo "$list" | awk '{ print $4 }' | tail -n +2)

  read -ra replicas <<< $result

  for r in "${replicas[@]}"; do
    # split "1/1" into [actual, desired] replica arrays
    IFS="/" read -ra e <<< "$r"
    # if actual != desired then service is not healthy
    [[ "${e[0]}" -ne "${e[1]}" ]] && return 1
  done
  return 0
}

dumplogs() {
  uptime
  $amps service ls

  list=$($amps service ls)
  result=$(echo "$list" | awk '{ print $2 }' | tail -n +2)

  read -ra services <<< $result

  for s in "${services[@]}"; do
    echo "====================================================================="
    echo "service logs: $s"
    echo "====================================================================="
    $amps service logs $s
    echo "====================================================================="
    echo
  done
}

SECONDS=0
trace=0
while true; do
  check
  [[ $? -eq 0 ]] && exit 0
  [[ "${TIMEOUT}" -eq 0 || "${SECONDS}" -gt "${TIMEOUT}" ]] && dumplogs && exit 1
  sleep "${INTERVAL}"
  # heartbeat trace so CI builds don't time out
  if [ $(($SECONDS - $trace)) -gt 10 ]; then
    trace=$SECONDS
    $amps service ls
  fi
done

