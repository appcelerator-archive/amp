#!/usr/bin/env bash

echo $@

set -euo pipefail

# defaults
export UG="0:0"
export VERSION="${VERSION:-0.0.0}"
export BUILD="${BUILD:-$(git rev-parse HEAD | cut -c1-8)}"
export OWNER="${OWNER:-appcelerator}"
export REPO="${REPO:-github.com/$OWNER/amp}"
export DOCKER_CMD="${DOCKER_CMD:-sudo docker}"

TOOLS_VERSION=1.1.0
TOOLS=appcelerator/amptools:$TOOLS_VERSION
LOCALTOOLS=amptools:$TOOLS_VERSION
IMAGE=$TOOLS

TMP=$(mktemp -d)

# Map the host user id to the container user ("sudoer") so that the
# user has sudo permission in the container. This allows sudo root
# access to Docker while also ensuring files can be saved in mounted
# volumes with the correct owner on the host when not root.
# Based on code thanks to @ndegory after brainstorming session about using sudo.
map_user() {
UG="$(id -u):$(id -g)"
cat > $TMP/Dockerfile << EOF
FROM $TOOLS
RUN sed -i "s/sudoer:x:[0-9]*:[0-9]*/sudoer:x:$UG/" /etc/passwd
EOF
    docker build -t $LOCALTOOLS $TMP
}

# Special case handling for linux (not an issue with Docker for Mac / Docker for Windows)
case "$OSTYPE" in
linux*)
    # build the local image "amptools" for the current user, if not available
    # TODO: need an option to force build
    docker image list $LOCALTOOLS | grep -q "amptools" || map_user
    IMAGE=$LOCALTOOLS
    ;;
esac

docker run -it --rm --name amptools \
    -u "$UG" \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -v "$HOME/.ssh:/root/.ssh:ro" \
    -v "$HOME/.config:/root/.config:ro" \
    -v "$PWD:/go/src/$REPO" \
    -w "/go/src/$REPO" \
    -e "VERSION=$VERSION" \
    -e "BUILD=$BUILD" \
    -e "OWNER=$OWNER" \
    -e "REPO=$REPO" \
    -e "DOCKER_CMD=$DOCKER_CMD" \
    -e "GOPATH=/go" \
    $IMAGE "$@"

cleanup() {
    rm -rf $TMP
}

trap cleanup EXIT

