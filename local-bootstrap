#!/usr/bin/env bash

# This script starts containers that will run a registry
# and a number of Docker engines to participate as swarm nodes.

set -e
trap 'onexit $LINENO' EXIT

# These will be passed on as `docker run` options when creating the swarm manager
# (mainly for exposing extra ports)
# Use normal `docker run [OPTIONS]` syntax. Ex: `local-bootstrap -p=3000:3000 -p8000:8000`
SWARMOPTS="$@"

MANAGERS=${MANAGERS:-3}
WORKERS=${WORKERS:-2}

REGISTRY=registry
SWARMNET=swarmnet
SWARMIP=""
MTOKEN=""
WTOKEN=""
AMPNET=ampnet

main() {
  create_host_bridge_network
  start_registry
  create_swarm
}

create_host_bridge_network() {
  (docker network ls | grep ${SWARMNET} &> /dev/null) || ( \
    echo "Create host bridge network: ${SWARMNET}" && \
    docker network create ${SWARMNET} )
}

start_registry() {
  (docker ps --format '{{ .Names }}' | grep "^${REGISTRY}$" &> /dev/null ) || ( \
    echo start registry service: ${REGISTRY} && \
    docker run \
      --name=${REGISTRY} \
      --detach \
      --network=${SWARMNET} \
      -p=5000:5000 \
      --restart=unless-stopped \
      --volume=registry:/var/lib/registry \
      --label="ampcluster" \
      registry:2
    sleep 5 )
    echo "Registry is running on port 5000"
}

create_swarm() {
  create_managers
  create_workers
}

node_exists() {
  name=$1
  docker ps -aq --filter="name=${name}" | grep "${name}"
}

remove_node() {
  name=$1
  # remove existing instances
  # TODO: don't just filter on name, also filter on label
  #docker node rm -f $(docker node ls --filter="name=$name" -q) &> /dev/null && true
  (docker rm -f $(docker ps -aq --filter="name=$name")) &> /dev/null || true
}

start_node() {
  node=$1
  opts="${@:2}"
  remove_node $name
  docker run --privileged --detach --name=$name --hostname=$name \
    --network=${SWARMNET} \
    --label="ampcluster" \
    --label="ampswarm" \
    ${opts} \
    subfuzion/dind --registry-mirror=http://${REGISTRY}:5000
}

create_managers() {
  name=m1
  echo starting manager: ${name}
  # publish common default ports plus whatever is passed to this script as extra options
  start_node "${name}" "-p=3000:3000" "-p=80:80" "-p=8080:8080" "-p=50101:50101" "${SWARMOPTS}"
  SWARMIP=$(docker inspect "${name}" --format '{{ .NetworkSettings.Networks.swarmnet.IPAMConfig.IPv4Address }}')
  echo "swarm manager ip (m1): ${SWARMIP}"
  # a bit of extra time seems to be needed before trying to initalize the node as a swarm manager
  sleep 5
  (docker --host=${name} swarm init --advertise-addr="${SWARMIP}:2377") &> /dev/null
  MTOKEN=$(docker --host="${name}" swarm join-token -q manager)
  WTOKEN=$(docker --host="${name}" swarm join-token -q worker)
  docker --host=${name} network create -d overlay --attachable ${AMPNET}

  count=$((MANAGERS-1))
  for m in $(seq ${count}); do
    i=$((m+1))
    name="m$i"
    echo "Starting manager $i: ${name}"
    start_node $name
    echo "Joining manager ${name} to swarm at: m1:2377"
    docker --host="${name}" swarm join --token "${MTOKEN}" m1:2377
  done
}

create_workers() {
  for w in $(seq "${WORKERS}"); do
    name="w$w"
    echo "Starting worker $w: ${name}"
    start_node $name
    echo "Joining worker ${name} to swarm at: m1:2377"
    docker --host="${name}" swarm join --token "${WTOKEN}" m1:2377
  done
}

onexit() {
  if [[ "$?" -eq 0 ]]; then
    echo "---------------------------------------------------------------------------"
    echo "Swarm running at m1:2377"
    echo "---------------------------------------------------------------------------"
    docker --host=m1 node ls
  else
    echo "Bootstrap failed, line: $1"
  fi
}

main
