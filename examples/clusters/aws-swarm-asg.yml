AWSTemplateFormatVersion: '2010-09-09'
Description: Swarm cluster with autoscaling groups v0.18.0

Mappings:
  AMI:
    # ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20170330
    # debian-jessie-amd64-hvm-2017-01-15
    # N Virginia
    us-east-1:
      Ubuntu: ami-e4139df2
      Default: ami-a0d27cdd
      Debian: ami-cb4b94dd
    # Ohio
    us-east-2:
      Ubuntu: ami-33ab8f56
      Default: ami-202c1c45
      Debian: ami-c5ba9fa0
    # Oregon
    us-west-2:
      Ubuntu: ami-17ba2a77
      Default: ami-279bfc5f
      Debian: ami-fde96b9d
    # Ireland
    eu-west-1:
      Ubuntu: ami-b5a893d3
      Default: ami-cb174eb2
      Debian: ami-3291be54
    # Sydney
    ap-southeast-2:
      Ubuntu: ami-92e8e6f1
      Default: ami-cb2fe1a9
      Debian: ami-0dcac96e
  VpcCidrs:
    subnet1:
      cidr: 192.168.0.0/24
    subnet2:
      cidr: 192.168.16.0/24
    subnet3:
      cidr: 192.168.32.0/24
    vpc:
      cidr: 192.168.0.0/16

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    MinLength: '1'
  ManagerSize:
    Type: Number
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
    Default: 3
    Description: depending on your HA requirements, should be 1, 3 or 5. This shouldn't be change on a stack update
  CoreWorkerSize:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 12
    Description: "3 nodes for HA is a safe choice"
  UserWorkerSize:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 1000
    Description: "A good starting point is 3 nodes"
  LinuxDistribution:
    Type: String
    AllowedValues:
    - Default
    - Ubuntu
    - Debian
    Default: Default
    Description: "the default is a pre packaged Ubuntu image, this is the recommended choice"
  RegistryInstanceType:
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.small
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc)
  CAInstanceType:
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.nano
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc)
  ManagerInstanceType:
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: m5.large
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc)
  CoreWorkerInstanceType:
    Type: String
    AllowedValues:
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: m5.large
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc)
  UserWorkerInstanceType:
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: m5.large
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc)
  DrainManager:
    Type: String
    Description: If yes, disables the services on the manager nodes
    AllowedValues:
    - no
    - yes
    Default: no
  ConfigurationURL:
    Type: String
    Description: "Can be used to override the default userdata. Example: https://raw.githubusercontent.com/appcelerator/amp/master/examples/clusters"
    Default: ""
  AufsVolumeSize:
    Type: Number
    Description: Size in GB of the EBS volume for the Docker AUFS storage on each node (mounted on /dev/xvdl)
    Default: 26
    MinValue: 1
    MaxValue: 16384
  OverlayNetworks:
    Type: String
    Description: Docker overlay networks to create on the swarm, separated by space
    Default: ""
  DockerPlugins:
    Type: String
    Description: "space separated list of plugins to install. Options can be passed separated with pound sign. Example: rexray/ebs#REXRAY_PREEMPT=true"
    Default: ""
  InstallApplication:
    Type: String
    Description: If yes, AMP will be installed
    AllowedValues:
    - yes
    - no
    Default: yes
  ApplicationVersion:
    Type: String
    Description: Use the latest release version for the best result (a tag, e.g. 0.17.0)
    Default: 0.18.0
  ApplicationOptions:
    Type: String
    Description: Extra parameters passed to the ampagent for core services deployment
    Default: ""
  MirrorRegistry:
    Type: String
    Description: If yes, a mirror registry will be installed
    AllowedValues:
    - no
    - yes
    Default: no
  NFSEndpoint:
    Type: String
    Description: If yes, a NFSv4 service will be provided
    AllowedValues:
    - no
    - yes
    Default: no
  EnableSystemPrune:
    Type: String
    Description: "Cleans up unused images, containers, networks and volumes"
    AllowedValues:
    - yes
    - no
    Default: yes
  MonitoringPort:
    Type: Number
    Description: Public port for the monitoring dashboard
    Default: 8080
    MinValue: 1025
    MaxValue: 32768
  EnableTLS:
    Type: String
    Description: "Secure the Docker engine API for mutual auth"
    AllowedValues:
    - yes
    Default: yes
  TLSRotation:
    Type: String
    Description: "Expiration of Docker API certificates issued by the PKI"
    Default: "8760h"

Conditions:
  InstallApplicationCond: !Or [ !Equals [ !Ref InstallApplication, "yes" ], !Equals [ !Ref InstallApplication, "true" ] ]
  EnableSystemPruneCond:  !Or [ !Equals [ !Ref EnableSystemPrune, "yes" ], !Equals [ !Ref EnableSystemPrune, "true" ] ]
  MirrorRegistryCond:     !Or [ !Equals [ !Ref MirrorRegistry, "yes" ], !Equals [ !Ref MirrorRegistry, "true" ] ]
  NFSEndpointCond:     !Or [ !Equals [ !Ref NFSEndpoint, "yes" ], !Equals [ !Ref NFSEndpoint, "true" ] ]
  EnableTLSCond:          !Or [ !Equals [ !Ref EnableTLS,          "yes" ], !Equals [ !Ref EnableTLS,          "true" ] ]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - Vpc
    - InternetGateway
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: Vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: Vpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - RT
      VpcId:
        Ref: Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - AttachGateway
    - RouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet1
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet1
      VpcId:
        Ref: Vpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet2
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet2
      VpcId:
        Ref: Vpc
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - subnet3
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - PublicSubnet3
      VpcId:
        Ref: Vpc
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet3
  RegistrySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: MirrorRegistryCond
    DependsOn: InternetGateway
    Properties:
      GroupDescription: Registry security group
      SecurityGroupIngress:
      # registry ELB endpoint
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      # registry ELB endpoint (TLS)
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      VpcId:
        Ref: Vpc
  RegistrySelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: MirrorRegistryCond
    Properties:
      GroupId:
        Ref: RegistrySecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Ref: RegistrySecurityGroup

  ManagerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: Manager nodes security group
      SecurityGroupIngress:
      # http engine API open from all VPC
      - SourceSecurityGroupId:
          !Ref CoreSecurityGroup
        IpProtocol: tcp
        FromPort: '2375'
        ToPort: '2375'
      - SourceSecurityGroupId:
          !Ref UserSecurityGroup
        IpProtocol: tcp
        FromPort: '2375'
        ToPort: '2375'
      # docker swarm join
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '2377'
        ToPort: '2377'
      # node communication
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '7946'
        ToPort: '7946'
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: udp
        FromPort: '7946'
        ToPort: '7946'
      # overlay network traffic
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
      # node exporter
      - SourceSecurityGroupId:
          !Ref CoreSecurityGroup
        IpProtocol: tcp
        FromPort: '9100'
        ToPort: '9100'
      # docker metrics
      - SourceSecurityGroupId:
          !Ref CoreSecurityGroup
        IpProtocol: tcp
        FromPort: '9323'
        ToPort: '9323'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '2376'
        ToPort: '2376'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: !Ref MonitoringPort
        ToPort: !Ref MonitoringPort
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '50101'
        ToPort: '50101'
      VpcId:
        Ref: Vpc
  ManagerSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ManagerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Ref: ManagerSecurityGroup

  CoreSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: Core services security group
      SecurityGroupIngress:
      # node communication
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '7946'
        ToPort: '7946'
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: udp
        FromPort: '7946'
        ToPort: '7946'
      # overlay network traffic
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
      # node exporter: self ingress
      # docker metrics: self ingress
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '50101'
        ToPort: '50101'
      VpcId:
        Ref: Vpc
  CoreSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: CoreSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Ref: CoreSecurityGroup

  UserSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: User services security group
      SecurityGroupIngress:
      # node communication
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '7946'
        ToPort: '7946'
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: udp
        FromPort: '7946'
        ToPort: '7946'
      # overlay network traffic
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
      # node exporter
      - SourceSecurityGroupId:
          !Ref CoreSecurityGroup
        IpProtocol: tcp
        FromPort: '9100'
        ToPort: '9100'
      # docker metrics
      - SourceSecurityGroupId:
          !Ref CoreSecurityGroup
        IpProtocol: tcp
        FromPort: '9323'
        ToPort: '9323'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '50101'
        ToPort: '50101'
      VpcId:
        Ref: Vpc
  UserSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: UserSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Ref: UserSecurityGroup

  CAExtSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: Certificate Authority ELB security group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      VpcId:
        Ref: Vpc

  CASecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: InternetGateway
    Properties:
      GroupDescription: Certificate Authority security group
      SecurityGroupIngress:
      # all nodes to internal ELB
      - CidrIp:
          Fn::FindInMap:
          - VpcCidrs
          - vpc
          - cidr
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      # internet facing ELB to CA intances
      - SourceSecurityGroupId:
          !Ref CAExtSecurityGroup
        IpProtocol: tcp
        FromPort: '8888'
        ToPort: '8888'
      VpcId:
        Ref: Vpc
  # internal ELB to CA instances
  CASelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: CASecurityGroup
      IpProtocol: tcp
      FromPort: '8888'
      ToPort: '8888'
      SourceSecurityGroupId:
        Ref: CASecurityGroup

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  ClusterPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - 'ec2:DescribeInstances'
          - 'ec2:DescribeVolume*'
          - 'ec2:DescribeSnapshot*'
          - 'ec2:DescribeTags'
          - 'ec2:CopySnapshot'
          - 'ec2:AttachVolume'
          - 'ec2:DetachVolume'
          - 'ec2:DeleteVolume'
          - 'ec2:CreateVolume'
          - 'ec2:CreateSnapshot'
          - 'ec2:DeleteSnapshot'
          - 'ec2:CreateTags'
          - 'ec2:ModifyInstanceAttribute'
          - 'ec2:ModifySnapshotAttribute'
          - 'ec2:ModifyVolumeAttribute'
          - 'ec2:DescribeAvailabilityZones'
          - 'elasticfilesystem:CreateFileSystem'
          - 'elasticfilesystem:CreateMountTarget'
          - 'ec2:DescribeSubnets'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:CreateNetworkInterface'
          - 'elasticfilesystem:CreateTags'
          - 'elasticfilesystem:DeleteFileSystem'
          - 'elasticfilesystem:DeleteMountTarget'
          - 'ec2:DeleteNetworkInterface'
          - 'elasticfilesystem:DescribeFileSystems'
          - 'elasticfilesystem:DescribeMountTargets'
          #  next line for cluster status command
          - 'cloudformation:DescribeStacks'
          # next lines for cluster object command
          - 's3:CreateBucket'
          - 's3:ListBucket'
          - 's3:ListAllMyBuckets'
          - 's3:DeleteBucket'
          - 's3:GetBucketLocation'
          # next lines to allow access to s3 buckets
          - 's3:GetObject*'
          - 's3:PutObject*'
          - 's3:DeleteObject*'
          Resource: '*'
          Effect: Allow
        Version: '2012-10-17'
      PolicyName: cluster-policy
      Roles:
      - Ref: ClusterRole
  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: ClusterRole

  RegistryRole:
    Type: AWS::IAM::Role
    Condition: MirrorRegistryCond
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  RegistryPolicies:
    Type: AWS::IAM::Policy
    Condition: MirrorRegistryCond
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - 's3:ListBucket'
          - 's3:GetBucketLocation'
          - 's3:ListBucketMultipartUploads'
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref 'RegistryS3Bucket']]
          Effect: Allow
        - Action:
          - 's3:PutObject'
          - 's3:GetObject'
          - 's3:DeleteObject'
          - 's3:ListMultipartUploadParts'
          - 's3:AbortMultipartUpload'
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref 'RegistryS3Bucket', "/*"]]
          Effect: Allow
        Version: '2012-10-17'
      PolicyName: registry-policy
      Roles:
      - Ref: RegistryRole
  RegistryInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: MirrorRegistryCond
    Properties:
      Path: /
      Roles:
      - Ref: RegistryRole
  RegistryS3Bucket:
    Type: AWS::S3::Bucket
    Condition: MirrorRegistryCond
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join:
        - '-'
        - - Ref: AWS::AccountId
          - Ref: AWS::StackName
          - registry

  RegistryAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: MirrorRegistryCond
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT30S
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: 3
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref RegistryAsgLaunchConfig
      MaxSize: 4
      MinSize: 0
      LoadBalancerNames:
      - !Ref RegistryInternalELB
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - registry
      - Key: atomiq.clusterid
        PropagateAtLaunch: true
        Value: !Ref AWS::StackName
      VPCZoneIdentifier:
      - Fn::Join:
        - ','
        -  - !Ref PublicSubnet1
           - !Ref PublicSubnet2
           - !Ref PublicSubnet3
  RegistryAsgLaunchConfig:
    Condition: MirrorRegistryCond
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref RegistryInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ref: LinuxDistribution
      InstanceType: !Ref RegistryInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: RegistrySecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            repo_update: false
            repo_upgrade: none
            runcmd:
              - curl -sf ${ConfigurationURL}/userdata-aws-registry -o /usr/local/bin/userdata-aws-registry && chmod +x /usr/local/bin/userdata-aws-registry || true
              - BUCKET=${RegistryS3Bucket} REGION=${AWS::Region} REGISTRY_VERSION=2.5 /usr/local/bin/userdata-aws-registry || shutdown -h
  RegistryInternalELB:
    Condition: MirrorRegistryCond
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - Ref: RegistrySecurityGroup
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '5000'
        Protocol: HTTP
        InstanceProtocol: HTTP
      HealthCheck:
        Target: HTTP:5000/v2/
        HealthyThreshold: 2
        UnhealthyThreshold: 3
        Interval: 30
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'

  CAWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"
    Condition: EnableTLSCond

  CAWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Condition: EnableTLSCond
    DependsOn: CAAutoScalingGroup
    Properties:
      Handle: !Ref CAWaitHandle
      Timeout: 420
      Count: 1

  CAAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: EnableTLSCond
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT30S
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: 1
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LoadBalancerNames:
      - !Ref CAInternalELB
      - !Ref CAExternalELB
      LaunchConfigurationName: !Ref CAAsgLaunchConfig
      MaxSize: 2
      MinSize: 0
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - CA
      - Key: amp.clusterid
        PropagateAtLaunch: true
        Value: !Ref AWS::StackName
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
  CAAsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: EnableTLSCond
    DependsOn:
      - CAWaitHandle
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ClusterInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ref: LinuxDistribution
      InstanceType: !Ref CAInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: CASecurityGroup
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config
              repo_update: false
              repo_upgrade: none
              runcmd:
                - curl -sf ${ConfigurationURL}/userdata-aws-ca -o /usr/local/bin/userdata-aws-ca && chmod +x /usr/local/bin/userdata-aws-ca || true
                - SYSTEM_PRUNE="${EnableSystemPrune}" SYNC=true SIGNAL_URL="${CAWaitHandle}" CHANNEL="stable" PLUGINS="rexray/ebs" REGION=${AWS::Region} STACK_ID="${AWS::StackId}" STACK_NAME=${AWS::StackName} VPC_ID=${Vpc} MIRROR_REGISTRIES="${RegistryDnsName}" /usr/local/bin/userdata-aws-ca EXPIRY_CLIENT="$TLSRotation" EXPIRY_SERVER="$TLSRotation" || shutdown -h
            - { RegistryDnsName: !If [ MirrorRegistryCond, !Join ["", ["http://", !GetAtt RegistryInternalELB.DNSName]], "" ] }
  CAInternalELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: EnableTLSCond
    Properties:
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet1
      SecurityGroups:
        - Ref: CASecurityGroup
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '8888'
        Protocol: HTTP
        InstanceProtocol: HTTP
      HealthCheck:
        Target: HTTP:8888/
        HealthyThreshold: 2
        UnhealthyThreshold: 3
        Interval: 30
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
  CAExternalELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: EnableTLSCond
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
      SecurityGroups:
        - Ref: CAExtSecurityGroup
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '22'
        InstancePort: '22'
        Protocol: TCP
        InstanceProtocol: TCP
      - LoadBalancerPort: '80'
        InstancePort: '8888'
        Protocol: HTTP
        InstanceProtocol: HTTP
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'

  CoreWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  CoreWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: CoreWorkerAutoScalingGroup
    Properties:
      Handle: !Ref CoreWaitHandle
      Timeout: 600
      Count: !Ref CoreWorkerSize

  CoreWorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - ManagerWaitCondition
      - ManagerInternalELBListenerSwarmAPI
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT30S
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: !Ref CoreWorkerSize
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref CoreWorkerAsgLaunchConfig
      MaxSize: 12
      MinSize: 0
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - worker
            - core
      - Key: amp.clusterid
        PropagateAtLaunch: true
        Value: !Ref AWS::StackName
      - Key: SwarmRole
        PropagateAtLaunch: true
        Value: worker
      VPCZoneIdentifier:
      - Fn::Join:
        - ','
        -  - !Ref PublicSubnet1
           - !Ref PublicSubnet2
           - !Ref PublicSubnet3

  CoreWorkerAsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - CoreWaitHandle
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ClusterInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ref: LinuxDistribution
      InstanceType: !Ref CoreWorkerInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: CoreSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdl
          Ebs:
            VolumeSize: !Ref AufsVolumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config
              repo_update: false
              repo_upgrade: none
              runcmd:
                - curl -sf ${ConfigurationURL}/userdata-aws-worker -o /usr/local/bin/userdata-aws-worker && chmod +x /usr/local/bin/userdata-aws-worker || true
                - SYNC=true CA_URL="${CADnsName}" SYSTEM_PRUNE="${EnableSystemPrune}" SIGNAL_URL="${CoreWaitHandle}" LABELS="amp.type.metrics=true amp.type.api=true amp.type.core=true amp.type.mq=true amp.type.kv=true amp.type.search=true" CHANNEL="stable" PLUGINS="${DockerPlugins}" REGION=${AWS::Region} STACK_NAME=${AWS::StackName} VPC_ID=${Vpc} DOCKER_DEVICE=/dev/sdl LEADER=${ManagerInternalNLB.DNSName} MIRROR_REGISTRIES="${RegistryDnsName}" /usr/local/bin/userdata-aws-worker || shutdown -h
            - { RegistryDnsName: !If [ MirrorRegistryCond, !Join ["", ["http://", !GetAtt RegistryInternalELB.DNSName]], "" ], CADnsName: !If [ EnableTLSCond, !Join ["", ["http://", !GetAtt CAInternalELB.DNSName]], "" ] }

  UserWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  UserWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: UserWorkerAutoScalingGroup
    Properties:
      Handle: !Ref UserWaitHandle
      Timeout: 600
      Count: !Ref UserWorkerSize

  UserWorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - ManagerWaitCondition
      - ManagerInternalELBListenerSwarmAPI
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT30S
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: !Ref UserWorkerSize
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref UserWorkerAsgLaunchConfig
      MaxSize: 50
      MinSize: 0
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - worker
            - user
      - Key: amp.clusterid
        PropagateAtLaunch: true
        Value: !Ref AWS::StackName
      - Key: SwarmRole
        PropagateAtLaunch: true
        Value: worker
      VPCZoneIdentifier:
      - Fn::Join:
        - ','
        -  - !Ref PublicSubnet1
           - !Ref PublicSubnet2
           - !Ref PublicSubnet3

  UserWorkerAsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - UserWaitHandle
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ClusterInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ref: LinuxDistribution
      InstanceType: !Ref UserWorkerInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: UserSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdl
          Ebs:
            VolumeSize: !Ref AufsVolumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config
              repo_update: false
              repo_upgrade: none
              runcmd:
                - curl -sf ${ConfigurationURL}/userdata-aws-worker -o /usr/local/bin/userdata-aws-worker && chmod +x /usr/local/bin/userdata-aws-worker || true
                - SYNC=true CA_URL="${CADnsName}" SYSTEM_PRUNE="${EnableSystemPrune}" SIGNAL_URL="${UserWaitHandle}" LABELS="amp.type.user=true" CHANNEL="stable" PLUGINS="${DockerPlugins}" REGION=${AWS::Region} STACK_NAME=${AWS::StackName} VPC_ID=${Vpc} DOCKER_DEVICE=/dev/sdl LEADER=${ManagerInternalNLB.DNSName} MIRROR_REGISTRIES="${RegistryDnsName}" /usr/local/bin/userdata-aws-worker || shutdown -h
            - { RegistryDnsName: !If [ MirrorRegistryCond, !Join ["", ["http://", !GetAtt RegistryInternalELB.DNSName]], "" ], CADnsName: !If [ EnableTLSCond, !Join ["", ["http://", !GetAtt CAInternalELB.DNSName]], "" ] }

  ApplicationWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  ApplicationWaitCondition:
    Condition: InstallApplicationCond
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn:
      - ManagerWaitCondition
      - CoreWaitCondition
      - UserWaitCondition
    Properties:
      Handle: !Ref ApplicationWaitHandle
      Timeout: 1800
      Count: 1

  ManagerWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  ManagerWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: ManagerAutoScalingGroup
    Properties:
      Handle: !Ref ManagerWaitHandle
      Timeout: 600
      Count: !Ref ManagerSize

  ManagerExtTargetGroupSSH:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 22
      Protocol: TCP
      HealthCheckIntervalSeconds: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerExtTargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      HealthCheckPort: 22
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerExtTargetGroupHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      HealthCheckPort: 22
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerExtTargetGroupDockerAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EnableTLSCond
    Properties:
      Port: "2376"
      Protocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerIntTargetGroupDockerAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EnableTLSCond
    Properties:
      Port: "2376"
      Protocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerIntTargetGroupSwarmAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 2377
      Protocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerExtTargetGroupDashboard:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: TCP
      HealthCheckPort: 22
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerExtTargetGroupAmplifier:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 50101
      Protocol: TCP
      HealthCheckPort: 22
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      VpcId:
        Ref: Vpc
  ManagerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - CAWaitCondition
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT3M
        WaitOnResourceSignals: false
    Properties:
      DesiredCapacity: !Ref ManagerSize
      HealthCheckGracePeriod: 480
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref ManagerAsgLaunchConfig
      MaxSize: 11
      MinSize: 1
      TargetGroupARNs:
      - !Ref ManagerExtTargetGroupSSH
      - !Ref ManagerExtTargetGroupHTTP
      - !Ref ManagerExtTargetGroupHTTPS
      - !If [ EnableTLSCond, !Ref ManagerExtTargetGroupDockerAPI, !Ref "AWS::NoValue" ]
      - !If [ EnableTLSCond, !Ref ManagerIntTargetGroupDockerAPI, !Ref "AWS::NoValue" ]
      - !Ref ManagerIntTargetGroupSwarmAPI
      - !Ref ManagerExtTargetGroupDashboard
      - !Ref ManagerExtTargetGroupAmplifier
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - manager
      - Key: amp.clusterid
        PropagateAtLaunch: true
        Value: !Ref AWS::StackName
      - Key: SwarmRole
        PropagateAtLaunch: true
        Value: manager
      VPCZoneIdentifier:
      - Fn::Join:
        - ','
        -  - !Ref PublicSubnet1
           - !Ref PublicSubnet2
           - !Ref PublicSubnet3
  ManagerAsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ManagerWaitHandle
      - ApplicationWaitHandle
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ClusterInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AMI
        - Ref: AWS::Region
        - Ref: LinuxDistribution
      InstanceType: !Ref ManagerInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: ManagerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdl
          Ebs:
            VolumeSize: !Ref AufsVolumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config
              repo_update: false
              repo_upgrade: none
              runcmd:
                - curl -sf ${ConfigurationURL}/userdata-aws-manager -o /usr/local/bin/userdata-aws-manager && chmod +x /usr/local/bin/userdata-aws-manager || true
                - SYNC=true CA_URL="${CADnsName}" INTERNAL_LB="${ManagerInternalNLB.DNSName}" EXTERNAL_LB="${ManagerExternalNLB.DNSName}" SYSTEM_PRUNE="${EnableSystemPrune}" SIGNAL_URL="${ManagerWaitHandle}" APP_SIGNAL_URL="${ApplicationSignalURL}" APP_VERSION="${ApplicationVersion}" APP_OPTIONS="${ApplicationOptions}" CHANNEL="stable" PLUGINS="${DockerPlugins}" OVERLAY_NETWORKS="${OverlayNetworks}" REGION=${AWS::Region} STACK_NAME=${AWS::StackName} VPC_ID=${Vpc} CLUSTER_SIZE="${ManagerSize}+${CoreWorkerSize}+${UserWorkerSize}" MANAGER_SIZE=${ManagerSize} DRAIN_MANAGER=${DrainManager} DOCKER_DEVICE=/dev/sdl MIRROR_REGISTRIES="${RegistryDnsName}" LABELS="amp.type.route=true" /usr/local/bin/userdata-aws-manager || shutdown -h
            - { RegistryDnsName: !If [ MirrorRegistryCond, !Join ["", ["http://", !GetAtt RegistryInternalELB.DNSName]], "" ], ApplicationSignalURL: !If [ InstallApplicationCond, !Ref ApplicationWaitHandle, "" ], CADnsName: !If [ EnableTLSCond, !Join ["", ["http://", !GetAtt CAInternalELB.DNSName]], "" ] }

  ManagerInternalNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
  ManagerInternalELBListenerDockerAPI:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ManagerWaitCondition
    Condition: EnableTLSCond
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerIntTargetGroupDockerAPI
      LoadBalancerArn:
        Ref: ManagerInternalNLB
      Port: "2376"
      Protocol: TCP
  ManagerInternalELBListenerSwarmAPI:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ManagerWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerIntTargetGroupSwarmAPI
      LoadBalancerArn:
        Ref: ManagerInternalNLB
      Port: '2377'
      Protocol: TCP

  ManagerNLBEIP1:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ManagerNLBEIP2:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ManagerNLBEIP3:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ManagerExternalNLB:
    DependsOn: [ManagerNLBEIP1, ManagerNLBEIP2, ManagerNLBEIP3]
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      SubnetMappings:
        - AllocationId: !GetAtt
            - ManagerNLBEIP1
            - AllocationId
          SubnetId: !Ref PublicSubnet1
        - AllocationId: !GetAtt
            - ManagerNLBEIP2
            - AllocationId
          SubnetId: !Ref PublicSubnet2
        - AllocationId: !GetAtt
            - ManagerNLBEIP3
            - AllocationId
          SubnetId: !Ref PublicSubnet3
  ManagerExternalELBListenerSSH:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ManagerWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerExtTargetGroupSSH
      LoadBalancerArn:
        Ref: ManagerExternalNLB
      Port: '22'
      Protocol: TCP
  ManagerExternalELBListenerHTTP:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ApplicationWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerExtTargetGroupHTTP
      LoadBalancerArn:
        Ref: ManagerExternalNLB
      Port: '80'
      Protocol: TCP
  ManagerExternalELBListenerHTTPS:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ApplicationWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerExtTargetGroupHTTPS
      LoadBalancerArn:
        Ref: ManagerExternalNLB
      Port: '443'
      Protocol: TCP
  ManagerExternalELBListenerDockerAPI:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: EnableTLSCond
    DependsOn: ManagerWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerExtTargetGroupDockerAPI
      LoadBalancerArn:
        Ref: ManagerExternalNLB
      Port: '2376'
      Protocol: TCP
  ManagerExternalELBListenerDashboard:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ApplicationWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerExtTargetGroupDashboard
      LoadBalancerArn:
        Ref: ManagerExternalNLB
      Port: !Ref MonitoringPort
      Protocol: TCP
  ManagerExternalELBListenerAmplifier:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ApplicationWaitCondition
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ManagerExtTargetGroupAmplifier
      LoadBalancerArn:
        Ref: ManagerExternalNLB
      Port: '50101'
      Protocol: TCP

  SharedFileSystem:
    Type: AWS::EFS::FileSystem
    Condition: NFSEndpointCond
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: "Name"
        Value:
          Fn::Join:
          - '-'
          - - Ref: AWS::AccountId
            - Ref: AWS::StackName
            - FS
  FSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: NFSEndpointCond
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Security group for EFS mount target"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp:
            Fn::FindInMap:
            - VpcCidrs
            - vpc
            - cidr
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Condition: NFSEndpointCond
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - Ref: FSSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Condition: NFSEndpointCond
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - Ref: FSSecurityGroup
  MountTarget3:
    Type: AWS::EFS::MountTarget
    Condition: NFSEndpointCond
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SubnetId: !Ref PublicSubnet3
      SecurityGroups:
        - Ref: FSSecurityGroup

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Cluster Properties
      Parameters:
      - KeyName
      - LinuxDistribution
      - ConfigurationURL
      - MonitoringPort
      - NFSEndpoint
    - Label:
        default: Registry Properties
      Parameters:
      - MirrorRegistry
      - RegistryInstanceType
    - Label:
        default: Swarm Properties
      Parameters:
      - ManagerSize
      - ManagerInstanceType
      - CoreWorkerSize
      - CoreWorkerInstanceType
      - UserWorkerSize
      - UserWorkerInstanceType
      - DrainManager
    - Label:
        default: Docker Configuration
      Parameters:
      - DockerPlugins
      - AufsVolumeSize
      - OverlayNetworks
      - EnableSystemPrune
      - EnableTLS
      - TLSRotation
      - CAInstanceType
    - Label:
        default: AMP deployment
      Parameters:
      - InstallApplication
      - ApplicationVersion
      - ApplicationOptions
    ParameterLabels:
      KeyName:
        default: Which SSH key to use?
      ManagerSize:
        default: Number of Swarm managers?
      CoreWorkerSize:
        default: Number of Swarm workers for AMP core services?
      UserWorkerSize:
        default: Number of Swarm workers for AMP user services?
      ManagerInstanceType:
        default: Swarm manager instance type?
      CoreWorkerInstanceType:
        default: Swarm worker instance type for core services?
      UserWorkerInstanceType:
        default: Swarm worker instance type for user services?
      DrainManager:
        default: Drain manager nodes?
      OverlayNetworks:
        default: Docker overlay networks
      DockerPlugins:
        default: Docker plugins
      ConfigurationURL:
        default: Base URL for userdata scripts
      AufsVolumeSize:
        default: EBS Volume Size for Docker local storage
      LinuxDistribution:
        default: Linux Distribution
      InstallApplication:
        default: Install Application
      ApplicationVersion:
        default: AMP Version
      ApplicationOptions:
        default: AMP Deployment Options
      EnableSystemPrune:
        default: Enable System Prune
      MirrorRegistry:
        default: Dedicated Registry
      NFSEndpoint:
        default: Shared File System
      RegistryInstanceType:
        default: Registry instance type?
      CAInstanceType:
        default: PKI instance type?
      MonitoringPort:
        default: Monitoring Port
      EnableTLS:
        default: Enable TLS
      TLSRotation:
        default: TLS Rotation

Outputs:
  DNSTarget:
    Description: public facing endpoint for the cluster
    Value: !GetAtt ManagerExternalNLB.DNSName
  InternalDockerHost:
    Description: Docker host for services requiring access to the secured API
    Value:
      Fn::Join:
        - ""
        - - "tcp://"
          - !GetAtt ManagerInternalNLB.DNSName
          - ":2376"
  #PKITarget:
    #Description: public facing endpoint for the PKI service
    #Value: !If [ EnableTLSCond, !GetAtt CAExternalELB.DNSName, "disabled" ]
  InternalPKITarget:
    Description: internal endpoint for the PKI service
    Value: !If [ EnableTLSCond, !GetAtt CAInternalELB.DNSName, "disabled" ]
  InternalRegistryTarget:
    Description: internal endpoint for the registry service
    Value: !If [ MirrorRegistryCond, !GetAtt RegistryInternalELB.DNSName, "disabled" ]
  MetricsURL:
    Description: URL for cluster health dashboard
    Value:
      Fn::Join:
        - ':'
        - - !GetAtt ManagerExternalNLB.DNSName
          - !Ref MonitoringPort
  VpcId:
    Description: VPC ID
    Value: !Ref Vpc
  NFSEndpoint:
    Description: NFSv4 Endpoint
    Value:
      Fn::If:
      - NFSEndpointCond
      - !Join [ '.', [ !Ref SharedFileSystem, efs, !Ref 'AWS::Region', 'amazonaws.com' ]]
      - 'disabled'
