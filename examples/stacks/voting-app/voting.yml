version: "3.1"

services:

  redis:
    image: redis:alpine
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.labels.amp.type.user == true]
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.labels.amp.type.user == true]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    environment:
      SERVICE_PORTS: 80
      VIRTUAL_HOST: "https://vote.examples.*,vote.examples.*"
    networks:
      - frontend
      - public
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.labels.amp.type.user == true]

  result:
    image: dockersamples/examplevotingapp_result:before
    environment:
      SERVICE_PORTS: 80
      VIRTUAL_HOST: "https://result.examples.*,result.examples.*"
    networks:
      - backend
      - public
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.labels.amp.type.user == true]

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.labels.amp.type.user == true]

networks:
  frontend:
  backend:
  public:
    external: true

volumes:
  db-data:
