#!/bin/bash

# NOTES
# This script is for starting a single node AMP swarm on localhost
#
# Adding new services
# 1. Add image to pull to pullimages()
# 2. Create function for starting the service and add it to startservices()

set -euo pipefail
AMP_VERSION=latest
UI_VERSION=0.2.0
INFLUXDATA_VERSION=1.1.0
KAPACITOR_VERSION=1.1.0
TELEGRAF_VERSION=1.1.0-rc1
GRAFANA_VERSION=1.0.1
ELASTICSEARCH_VERSION=2.3.3
ETCD_VERSION=3.1.0-rc.0
NATS_VERSION=0.3.0
HAPROXY_VERSION=1.0.1
TICK_CONFIG_VERSION=0.4.0

# please keep sorted
IMAGES=(
  appcelerator/amp:${AMP_VERSION}
  appcelerator/amp-ui:${UI_VERSION}
  appcelerator/elasticsearch-amp:${ELASTICSEARCH_VERSION}
  appcelerator/grafana-amp:${GRAFANA_VERSION}
  appcelerator/haproxy:${HAPROXY_VERSION}
  appcelerator/influxdb-amp:${INFLUXDATA_VERSION}
  appcelerator/kapacitor-amp:${KAPACITOR_VERSION}
  appcelerator/telegraf:telegraf-${TELEGRAF_VERSION}
  registry:2.5.1
  appcelerator/etcd:${ETCD_VERSION}
  appcelerator/pinger:latest
  appcelerator/amp-nats-streaming:${NATS_VERSION}
)

MINIMAGES=(
  appcelerator/amp:${AMP_VERSION}
  appcelerator/elasticsearch-amp:${ELASTICSEARCH_VERSION}
  appcelerator/influxdb-amp:${INFLUXDATA_VERSION}
  appcelerator/telegraf:telegraf-${TELEGRAF_VERSION}
  registry:2.5.1
  appcelerator/etcd:${ETCD_VERSION}
  appcelerator/pinger:latest
  appcelerator/amp-nats-streaming:${NATS_VERSION}
)

# please keep sorted
SERVICES=(
  amplifier
  ampagent
  amplogworker
  ampui
  elasticsearch
  etcd
  grafana
  haproxy
  influxdb
  kapacitor
  nats
  telegrafagent
  telegrafhaproxy
  registry
)

MINSERVICES=(
  amplifier
  ampagent
  amplogworker
  etcd
  elasticsearch
  influxdb
  nats
  telegrafagent
  registry
)

ROLE=infrastructure

usage() {
  cat << USAGE >&2
Usage:
  $(basename $0) [pull|start|stop|restart|ls|monitor]
  $(basename $0) [ -h | --help ]

Basic AMP swarm operations.

Options:

  -h, --help   Print help information and quit

Commands:

  pull         Pull the latest AMP images (options: --min)
  start        Start all services (options: --min | specific services)
  restart      Restart services (options: --min); same as stop, pull, start
  stop         Remove services
  ls           List running services
  monitor      Continually update running services list with current status

USAGE
  exit 1
}

error() {
  cat << USAGE >&2
$(basename $0): $1
See 'swarm --help'.
USAGE
  exit 1
}

main() {
  if [ $# -eq 0 ]; then
    usage
  else
    case $1 in
      start)
        initswarm
        createnetwork
        startservices "${@:2}"
      ;;
      stop)
        removeservices
      ;;
      pull)
        pullimages "${@:2}"
      ;;
      restart)
        $0 stop
        $0 pull "${@:2}"
        $0 start "${@:2}"
      ;;
      ls)
        ls
      ;;
      monitor)
        monitor "${@:2}"
      ;;
      -h)
        usage
      ;;
      --help)
        usage
      ;;
      *)
        error "'""$1""'"" is not a valid command."
      ;;
    esac
  fi
}

# initialize / join swarm as manager
initswarm() {
  docker node inspect self > /dev/null 2>&1 || docker swarm inspect > /dev/null 2>&1 || (echo "> Initializing swarm" && docker swarm init --advertise-addr 127.0.0.1)
}

# set up the amp-infra overlay network
createnetwork() {
  docker network ls | grep amp-infra || (echo "> Creating overlay network 'amp-infra'" && docker network create -d overlay amp-infra)
  docker network ls | grep amp-public || (echo "> Creating overlay network 'amp-public'" && docker network create -d overlay amp-public)
}

# pull the latest AMP images to local docker cache
pullimages() {
  echo "> Pulling AMP images"
  images=${IMAGES[@]}
  [[ $@ =~ "--min" ]] && images=${MINIMAGES[@]}
  for i in ${images[@]}; do docker pull $i; done
}

removevolume() {
  # remove Docker volumes for explicitly mounted containers
  local service=$1
  local loop=0
  local retrytime=0.5
  local maxretries=10
  if [[ -z $service ]]; then
    return 1
  fi
  local volumename=amp-$service
  echo -n "deleting volume $volumename "
  while docker volume ls --filter name=$volumename | grep -wq $volumename; do
    echo -n "."
    docker volume rm "$volumename" >/dev/null 2>&1 && echo "volume $volumename has been successfully deleted" || true
    sleep $retrytime
    (( loop++ ))
    if [[ $loop -gt $maxretries ]]; then
      echo "failed, ignore"
      break
    fi
  done
  if [[ $loop -eq 0 ]]; then
    echo -e "\b, volume does not exist"
  fi
}

removeservices() {
  stop=$(docker service ls -q --filter "label=io.amp.role=$ROLE")
  [[ ! -z ${stop[0]} ]] && echo "> Removing current infrastructure services..." && docker service rm $stop || true
  stop=$(docker service ls -q --filter "label=io.amp.role=user")
  [[ ! -z ${stop[0]} ]] && echo "> Removing current user services..." && docker service rm $stop || true
  #remove user network
  stop=$(docker network ls -q --filter "label=io.amp.role=user")
  [[ ! -z ${stop[0]} ]] && echo "> Removing current user networks..." && docker network rm $stop || true
  #remove volume (only for local usage)
  for s in etcd; do
    removevolume $s || echo "unable to remove volumes from $s service"
  done
}

# start the services on the swarm
# you can specify list of specific services on the command line as args to `start` command
# (the service names must match the service functions defined below, such as `etcd`),
# otherwise the default is to start all the services in the SERVICES array.
startservices() {
  removeservices
  #remove etcd volume
  sleep 1 && docker volume ls -qf "name=amp-etcd" | xargs -I {} docker volume rm {}
  echo "> Starting services..."
  # default is to run all the services
  # check if --min was specified
  # otherwise only run the services specified on the command line
  services=${SERVICES[@]}
  if [[ $@ =~ "--min" ]]; then
    services=${MINSERVICES[@]}
  elif [[ $# -ne 0 ]]; then
    services=$@
  fi

  for i in $services; do $i; done
}

ls() {
  docker service ls --filter "label=io.amp.role=$ROLE"
}

monitor() {
  interval=${1:-5}
  # will cause a screen flash, but `tput ed` doesn't work on the mac
  while true; do clear; docker service ls; tput cup 0 0; sleep $interval; done
}

registry() { # Owner: freignat91
  docker service create --network amp-infra --name registry \
  --label io.amp.role="infrastructure" \
  --mount type=volume,source=amp-registry,target=/var/lib/registry \
  -p 5000:5000 \
  registry:2.5.1
}

amplifier() {
  docker service create --with-registry-auth --network amp-infra,amp-public --name amplifier \
    --label io.amp.role="infrastructure" \
    --constraint "node.role == manager" \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/amp:${AMP_VERSION}
}

# DEPENDENCIES nats
ampagent() { # Owner: freignat91
  docker service create --with-registry-auth --network amp-infra --name amp-agent \
    --mode global \
    --label io.amp.role="infrastructure" \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/amp:${AMP_VERSION} \
    amp-agent
}

# DEPENDENCIES nats, elasticsearch
amplogworker() { # Owner: bertrand-quenin
  docker service create --with-registry-auth --network amp-infra --name amp-log-worker \
    --label io.amp.role="infrastructure" \
    appcelerator/amp:${AMP_VERSION} \
    amp-log-worker
}

ampui() { # Owner: freignat91
  docker service create --with-registry-auth --network amp-infra --name amp-ui \
    --label io.amp.role="infrastructure" \
    --constraint "node.role == manager" \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/amp-ui:${UI_VERSION}
}

elasticsearch() { # Owner: bertrand-quenin
  docker service create --with-registry-auth --network amp-infra --name elasticsearch \
    --label io.amp.role="infrastructure" \
    -p 9200:9200 \
    -p 9300:9300 \
    appcelerator/elasticsearch-amp:${ELASTICSEARCH_VERSION}
}

etcd() { # Owner: ndegory
  docker service create --with-registry-auth --network amp-infra --name etcd \
    --label io.amp.role="infrastructure" \
    -p 2379:2379 \
    -p 2380:2380 \
    --mount type=volume,source=amp-etcd,target=/data \
    appcelerator/etcd:${ETCD_VERSION} \
      --name etcd \
      --listen-client-urls http://0.0.0.0:2379 \
      --advertise-client-urls http://etcd:2379
  }

grafana() { # Owner: ndegory
  docker service create --with-registry-auth --network amp-infra --name grafana \
    --label io.amp.role="infrastructure" \
    -p 6001:3000 \
    appcelerator/grafana-amp:${GRAFANA_VERSION}
}

influxdb() { # Owner: ndegory
  docker service create --with-registry-auth --network amp-infra --name influxdb \
    --label io.amp.role="infrastructure" \
    -p 8086:8086 \
    -p 8083:8083 \
    appcelerator/influxdb-amp:${INFLUXDATA_VERSION}
}

kapacitor() { # Owner: ndegory
  if [[ -n "${AMP_SLACK_ALERTS_WEBHOOK_URL-}" ]]; then
    SLACK_OPTIONS="-e OUTPUT_SLACK_ENABLED=true \
    -e OUTPUT_SLACK_WEBHOOK_URL=${AMP_SLACK_ALERTS_WEBHOOK_URL} \
    -e OUTPUT_SLACK_GLOBAL=true \
    -e OUTPUT_SLACK_STATE_CHANGE_ONLY=true"
    if [[ -n "${AMP_SLACK_ALERTS_CHANNEL-}" ]]; then
      SLACK_OPTIONS="$SLACK_OPTIONS -e OUTPUT_SLACK_CHANNEL=${AMP_SLACK_ALERTS_CHANNEL}"
    fi
  else
    SLACK_OPTIONS='-e OUTPUT_SLACK_ENABLED=false'
  fi
  docker service create --with-registry-auth --network amp-infra --name kapacitor \
    --label io.amp.role="infrastructure" \
    $SLACK_OPTIONS \
    appcelerator/kapacitor-amp:${KAPACITOR_VERSION}
}

haproxy() { # Owner: freignat91
  docker service create --with-registry-auth --network amp-infra,amp-public --name haproxy \
    --label io.amp.role="infrastructure" \
    -p 8080:8080 \
    -p 80:80 \
    appcelerator/haproxy:${HAPROXY_VERSION}
}

nats() { # Owner: bertrand-quenin
  docker service create --with-registry-auth --network amp-infra --name nats \
    --label io.amp.role="infrastructure" \
    -p 4222:4222 \
    -p 8222:8222 \
    appcelerator/amp-nats-streaming:${NATS_VERSION}
}

telegrafagent() { # Owner: ndegory
  docker service create --with-registry-auth --network amp-infra --name telegraf-agent \
    --mode global \
    --label io.amp.role="infrastructure" \
    -e OUTPUT_INFLUXDB_ENABLED=true \
    -e INFLUXDB_URL=http://influxdb:8086 \
    -e TAG_datacenter=dc1 \
    -e TAG_type=core \
    -e INPUT_DOCKER_ENABLED=true \
    -e INPUT_CPU_ENABLED=true \
    -e INPUT_DISK_ENABLED=true \
    -e INPUT_DISKIO_ENABLED=true \
    -e INPUT_KERNEL_ENABLED=true \
    -e INPUT_MEM_ENABLED=true \
    -e INPUT_PROCESS_ENABLED=true \
    -e INPUT_SWAP_ENABLED=true \
    -e INPUT_SYSTEM_ENABLED=true \
    -e INPUT_NET_ENABLED=true \
    -e INPUT_HAPROXY_ENABLED=false \
    -e INFLUXDB_TIMEOUT=20 \
    --mount type=bind,source=/var/run/utmp,target=/var/run/utmp \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/telegraf:telegraf-${TELEGRAF_VERSION}
}

telegrafhaproxy() { # Owner: ndegory
  docker service create --with-registry-auth --network amp-infra --name telegraf-haproxy \
    --label io.amp.role="infrastructure" \
    -e OUTPUT_INFLUXDB_ENABLED=true \
    -e INFLUXDB_URL=http://influxdb:8086 \
    -e INPUT_DOCKER_ENABLED=false \
    -e INPUT_CPU_ENABLED=false \
    -e INPUT_NET_ENABLED=false \
    -e INPUT_DISK_ENABLED=false \
    -e INPUT_DISKIO_ENABLED=false \
    -e INPUT_KERNEL_ENABLED=false \
    -e INPUT_MEM_ENABLED=false \
    -e INPUT_PROCESS_ENABLED=false \
    -e INPUT_SWAP_ENABLED=false \
    -e INPUT_SYSTEM_ENABLED=false \
    -e INPUT_HAPROXY_ENABLED=true \
    -e INPUT_HAPROXY_SERVER=http://haproxy:8082/admin?stats \
    -e INFLUXDB_TIMEOUT=20 \
    appcelerator/telegraf:telegraf-${TELEGRAF_VERSION}
}
main $@
