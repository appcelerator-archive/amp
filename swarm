#!/bin/bash

# NOTES
# This script is for starting a single node AMP swarm on localhost
#
# Adding new services
# 1. Add image to pull to pullimages()
# 2. Create function for starting the service and add it to startservices()

set -euo pipefail
# INFLUXDATA_VERSION should be 0.13 or 1.0
INFLUXDATA_VERSION=0.13

# please keep sorted
IMAGES=(
  appcelerator/amp-agent:latest
  appcelerator/amp-log:latest
  appcelerator/amp-log-worker:latest
  appcelerator/amp-monitor:latest
  appcelerator/amp-ui:latest
  appcelerator/elasticsearch-amp:latest
  appcelerator/grafana:latest
  appcelerator/influxdb:influxdb-${INFLUXDATA_VERSION}
  appcelerator/kafka:latest
  appcelerator/kapacitor:kapacitor-${INFLUXDATA_VERSION}
  appcelerator/kibana:latest
  appcelerator/nginx:latest
  appcelerator/telegraf:telegraf-${INFLUXDATA_VERSION}
  appcelerator/zookeeper:latest
  quay.io/coreos/etcd:v3.0.4
  sheepkiller/kafka-manager:latest
)

MINIMAGES=(
  appcelerator/amp-agent:latest
  appcelerator/amp-log-worker:latest
  appcelerator/elasticsearch-amp:latest
  appcelerator/influxdb:influxdb-${INFLUXDATA_VERSION}
  appcelerator/kafka:latest
  appcelerator/kibana:latest
  appcelerator/telegraf:telegraf-${INFLUXDATA_VERSION}
  appcelerator/zookeeper:latest
  quay.io/coreos/etcd:v3.0.4
  sheepkiller/kafka-manager:latest
)

# please keep sorted
SERVICES=(
  ampagent
  amplog
  amplogworker
  ampmonitor
  ampui
  elasticsearch
  etcd
  grafana
  kafka
  kafkamanager
  kibana
  influxdb
  kapacitor
  nginx
  telegrafagent
  telemetryworker
  zookeeper
)

MINSERVICES=(
  ampagent
  amplogworker
  etcd
  elasticsearch
  kafka
  kafkamanager
  influxdb
  kibana
  telegrafagent
  telemetryworker
  zookeeper
)

ROLE=infrastructure

usage() {
  cat << USAGE >&2
Usage:
  $(basename $0) [pull|start|stop|restart|ls|monitor]
  $(basename $0) [ -h | --help ]

Basic AMP swarm operations.

Options:

  -h, --help   Print help information and quit

Commands:

  pull         Pull the latest AMP images (options: --min)
  start        Start all services (options: --min | specific services)
  restart      Restart services (options: --min); same as stop, pull, start
  stop         Remove services
  ls           List running services
  monitor      Continually update running services list with current status

USAGE
  exit 1
}

error() {
  cat << USAGE >&2
$(basename $0): $1
See 'swarm --help'.
USAGE
  exit 1
}

main() {
  if [ $# -eq 0 ]; then
    usage
  else
    case $1 in
      start)
        initswarm
        createnetwork
        startservices "${@:2}"
      ;;
      stop)
        $(dirname $0)/advertise_service remove kafka &
        removeservices
      ;;
      pull)
        pullimages "${@:2}"
      ;;
      restart)
        $0 stop
        $0 pull "${@:2}"
        $0 start "${@:2}"
      ;;
      ls)
        ls
      ;;
      monitor)
        monitor "${@:2}"
      ;;
      -h)
        usage
      ;;
      --help)
        usage
      ;;
      *)
        error "'""$1""'"" is not a valid command."
      ;;
    esac
  fi
}


# initialize / join swarm as manager
initswarm() {
  docker node inspect self > /dev/null 2>&1 || docker swarm inspect > /dev/null 2>&1 || (echo "> Initializing swarm" && docker swarm init)
}

# set up the amp-swarm overlay network
createnetwork() {
  docker network ls | grep amp-swarm || (echo "> Creating overlay network 'amp-swarm'" && docker network create -d overlay amp-swarm)
}

# pull the latest AMP images to local docker cache
pullimages() {
  echo "> Pulling AMP images"
  images=${IMAGES[@]}
  [[ $@ =~ "--min" ]] && images=${MINIMAGES[@]}
  for i in ${images[@]}; do docker pull $i; done
}

removeservices() {
  stop=$(docker service ls -q --filter "label=amp.swarm=$ROLE")
  [[ ! -z ${stop[0]} ]] && echo "> Removing current services..." && docker service rm $stop || true
}

# start the services on the swarm
# you can specify list of specific services on the command line as args to `start` command
# (the service names must match the service functions defined below, such as `etcd`),
# otherwise the default is to start all the services in the SERVICES array.
startservices() {
  removeservices

  echo "> Starting services..."
  # default is to run all the services
  # check if --min was specified
  # otherwise only run the services specified on the command line
  services=${SERVICES[@]}
  if [[ $@ =~ "--min" ]]; then
    services=${MINSERVICES[@]}
  elif [[ $# -ne 0 ]]; then
    services=$@
  fi

  for i in $services; do $i; done
  $(dirname $0)/advertise_service kafka &
}

ls() {
  docker service ls --filter "label=amp.swarm=$ROLE"
}

monitor() {
  interval=${1:-5}
  clear; while true; do tput cup 0 0; docker service ls; sleep $interval; done
}

ampagent() {
  docker service create --network amp-swarm --name amp-agent \
    --mode global \
    --label amp.swarm="infrastructure" \
    -p 5001:3000 \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/amp-agent:latest
}

amplog() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name amp-log \
    --label amp.swarm="infrastructure" \
    -p 5000:3000 \
    appcelerator/amp-log:latest
}

# DEPENDENCIES kafka
amplogworker() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name amp-log-worker \
    --label amp.swarm="infrastructure" \
    -p 4018:3000 \
    -e ZOOKEEPER=zookeeper:2181 \
    appcelerator/amp-log-worker:latest
}

ampui() { # Owner: freignat91
  docker service create --network amp-swarm --name amp-ui \
    --label amp.swarm="infrastructure" \
    -p 8080:8080 \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/amp-ui:latest
}

ampmonitor() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name amp-monitor \
    --label amp.swarm="infrastructure" \
    -p 6000:3000 \
    -e ZOOKEEPER=zookeeper:2181 \
    appcelerator/amp-monitor:latest
}


elasticsearch() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name elasticsearch \
    --label amp.swarm="infrastructure" \
    -p 9200:9200 \
    -p 9300:9300 \
    appcelerator/elasticsearch-amp:latest
}

etcd() { # Owner: subfuzion
  docker service create --network amp-swarm --name etcd \
    --label amp.swarm="infrastructure" \
    -p 2379:2379 \
    -p 2380:2380 \
    quay.io/coreos/etcd:v3.0.4 etcd \
      --name etcd \
      --listen-client-urls http://0.0.0.0:2379 \
      --advertise-client-urls http://0.0.0.0:2380
  }

grafana() { # Owner: ndegory
  docker service create --network amp-swarm --name grafana \
    --label amp.swarm="infrastructure" \
    -p 6001:3000 \
    -e INFLUXDB_HOST=influxdb \
    -e INFLUXDB_PASS=changeme \
    -e FORCE_HOSTNAME=auto \
    -e CONFIG_ARCHIVE_URL="https://github.com/appcelerator/amp-config/archive/0.1.0.tar.gz" \
    appcelerator/grafana:latest
}

influxdb() { # Owner: ndegory
  docker service create --network amp-swarm --name influxdb \
    --label amp.swarm="infrastructure" \
    -p 8086:8086 \
    -p 8083:8083 \
    -e FORCE_HOSTNAME=auto \
    -e PRE_CREATE_DB=telegraf \
    -e CONFIG_ARCHIVE_URL="https://github.com/appcelerator/amp-config/archive/0.1.0.tar.gz" \
    appcelerator/influxdb:influxdb-${INFLUXDATA_VERSION}
}

# DEPENDENCIES zookeepeer
kafka() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name kafka \
    --label amp.swarm="infrastructure" \
    -p 9092:9092 \
    -e ZOOKEEPER_CONNECT=zookeeper:2181 \
    -e TOPIC_LIST="amp-logs amp-docker-events telegraf" \
    appcelerator/kafka:latest
}

kafkamanager() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name kafka-manager \
    --replicas 1 \
    --label amp.swarm="infrastructure" \
    -p 8081:9000 \
    -e ZK_HOSTS=zookeeper:2181 \
    sheepkiller/kafka-manager:latest
}

kapacitor() { # Owner: ndegory
  docker service create --network amp-swarm --name kapacitor \
    --label amp.swarm="infrastructure" \
    -e INFLUXDB_URL=http://influxdb:8086 \
    -e KAPACITOR_HOSTNAME=auto \
    -e OUTPUT_SLACK_ENABLED="true" \
    -e OUTPUT_SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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 \
    -e OUTPUT_SLACK_CHANNEL=kapacitor-test \
    -e OUTPUT_SLACK_GLOBAL="true" \
    -e OUTPUT_SLACK_STATE_CHANGE_ONLY="true" \
    -e CONFIG_ARCHIVE_URL="https://github.com/appcelerator/amp-config/archive/0.1.0.tar.gz" \
    appcelerator/kapacitor:kapacitor-${INFLUXDATA_VERSION}
}

kibana() { # Owner: ndegory
  docker service create --network amp-swarm --name kibana \
    --replicas 1 \
    --label amp.swarm="infrastructure" \
    -p 5601:5601 \
    -e ELASTICSEARCH_URL=http://elasticsearch:9200 \
    appcelerator/kibana:latest

}

nginx() { # Owner: freignat91
  docker service create --network amp-swarm --name nginx \
    --label amp.swarm="infrastructure" \
    -p 80:80 \
    appcelerator/nginx:latest
}

# DEPENDENCIES kafka
telegrafagent() { # Owner: ndegory
  docker service create --network amp-swarm --name telegraf-agent \
    --mode global \
    --label amp.swarm="infrastructure" \
    -e OUTPUT_INFLUXDB_ENABLED=false \
    -e TAG_datacenter=dc1 \
    -e TAG_type=core \
    -e OUTPUT_KAFKA_ENABLED=true \
    -e OUTPUT_KAFKA_BROKER_URL=kafka:9092 \
    -e OUTPUT_KAFKA_TOPIC=telegraf \
    -e INPUT_DOCKER_ENABLED=true \
    -e INPUT_CPU_ENABLED=true \
    -e INPUT_DISK_ENABLED=true \
    -e INPUT_DISKIO_ENABLED=true \
    -e INPUT_KERNEL_ENABLED=true \
    -e INPUT_MEM_ENABLED=true \
    -e INPUT_PROCESS_ENABLED=true \
    -e INPUT_SWAP_ENABLED=true \
    -e INPUT_SYSTEM_ENABLED=true \
    --mount type=bind,source=/var/run/utmp,target=/var/run/utmp \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    appcelerator/telegraf:telegraf-${INFLUXDATA_VERSION}
}

# DEPENDENCIES kafka, influxdb
telemetryworker() { # Owner: ndegory
  docker service create --network amp-swarm --name telemetry-worker \
    --label amp.swarm="infrastructure" \
    -e OUTPUT_INFLUXDB_ENABLED="true" \
    -e INFLUXDB_URL=http://influxdb:8086 \
    -e OUTPUT_KAFKA_ENABLED=false \
    -e INPUT_KAFKA_ENABLED=true \
    -e INPUT_DOCKER_ENABLED=false \
    -e INPUT_CPU_ENABLED=false \
    -e INPUT_DISK_ENABLED=false \
    -e INPUT_DISKIO_ENABLED=false \
    -e INPUT_KERNEL_ENABLED=false \
    -e INPUT_MEM_ENABLED=false \
    -e INPUT_PROCESS_ENABLED=false \
    -e INPUT_SWAP_ENABLED=false \
    -e INPUT_SYSTEM_ENABLED=false \
    -e INPUT_NETSTAT_ENABLED=false \
    -e INPUT_KAFKA_BROKER_URL=kafka:9092 \
    -e INPUT_KAFKA_TOPIC=telegraf \
    -e INFLUXDB_TIMEOUT=20 \
    appcelerator/telegraf:telegraf-${INFLUXDATA_VERSION}
}

zookeeper() { # Owner: bertrand-quenin
  docker service create --network amp-swarm --name zookeeper \
    --label amp.swarm="infrastructure" \
    -p 2181:2181 \
    -p 2888:2888 \
    -p 3888:3888 \
    appcelerator/zookeeper:latest
}

main $@
