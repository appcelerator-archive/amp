// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/stack/stack.proto
// DO NOT EDIT!

/*
Package stack is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/stack/stack.proto

It has these top-level messages:
	DeployRequest
	DeployReply
	ListRequest
	ListReply
	StackListEntry
	RemoveRequest
	RemoveReply
	ServicesRequest
	StackService
	ServicesReply
*/
package stack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import stacks "github.com/appcelerator/amp/data/stacks"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Compose []byte `protobuf:"bytes,2,opt,name=compose,proto3" json:"compose,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeployRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployRequest) GetCompose() []byte {
	if m != nil {
		return m.Compose
	}
	return nil
}

type DeployReply struct {
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Answer   string `protobuf:"bytes,2,opt,name=answer" json:"answer,omitempty"`
}

func (m *DeployReply) Reset()                    { *m = DeployReply{} }
func (m *DeployReply) String() string            { return proto.CompactTextString(m) }
func (*DeployReply) ProtoMessage()               {}
func (*DeployReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeployReply) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *DeployReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListReply struct {
	Entries []*StackListEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListReply) GetEntries() []*StackListEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type StackListEntry struct {
	Stack           *stacks.Stack `protobuf:"bytes,1,opt,name=stack" json:"stack,omitempty"`
	FailedServices  int32         `protobuf:"varint,2,opt,name=failed_services,json=failedServices" json:"failed_services,omitempty"`
	RunningServices int32         `protobuf:"varint,3,opt,name=running_services,json=runningServices" json:"running_services,omitempty"`
	TotalServices   int32         `protobuf:"varint,4,opt,name=total_services,json=totalServices" json:"total_services,omitempty"`
	Status          string        `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
}

func (m *StackListEntry) Reset()                    { *m = StackListEntry{} }
func (m *StackListEntry) String() string            { return proto.CompactTextString(m) }
func (*StackListEntry) ProtoMessage()               {}
func (*StackListEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StackListEntry) GetStack() *stacks.Stack {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *StackListEntry) GetFailedServices() int32 {
	if m != nil {
		return m.FailedServices
	}
	return 0
}

func (m *StackListEntry) GetRunningServices() int32 {
	if m != nil {
		return m.RunningServices
	}
	return 0
}

func (m *StackListEntry) GetTotalServices() int32 {
	if m != nil {
		return m.TotalServices
	}
	return 0
}

func (m *StackListEntry) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type RemoveRequest struct {
	Stack string `protobuf:"bytes,1,opt,name=stack" json:"stack,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RemoveRequest) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

type RemoveReply struct {
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
}

func (m *RemoveReply) Reset()                    { *m = RemoveReply{} }
func (m *RemoveReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveReply) ProtoMessage()               {}
func (*RemoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemoveReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type ServicesRequest struct {
	StackName string `protobuf:"bytes,1,opt,name=stack_name,json=stackName" json:"stack_name,omitempty"`
}

func (m *ServicesRequest) Reset()                    { *m = ServicesRequest{} }
func (m *ServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ServicesRequest) ProtoMessage()               {}
func (*ServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ServicesRequest) GetStackName() string {
	if m != nil {
		return m.StackName
	}
	return ""
}

type StackService struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Mode     string `protobuf:"bytes,3,opt,name=mode" json:"mode,omitempty"`
	Replicas string `protobuf:"bytes,4,opt,name=replicas" json:"replicas,omitempty"`
	Image    string `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
}

func (m *StackService) Reset()                    { *m = StackService{} }
func (m *StackService) String() string            { return proto.CompactTextString(m) }
func (*StackService) ProtoMessage()               {}
func (*StackService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StackService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StackService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StackService) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *StackService) GetReplicas() string {
	if m != nil {
		return m.Replicas
	}
	return ""
}

func (m *StackService) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ServicesReply struct {
	Services []*StackService `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServicesReply) Reset()                    { *m = ServicesReply{} }
func (m *ServicesReply) String() string            { return proto.CompactTextString(m) }
func (*ServicesReply) ProtoMessage()               {}
func (*ServicesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ServicesReply) GetServices() []*StackService {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployRequest)(nil), "stack.DeployRequest")
	proto.RegisterType((*DeployReply)(nil), "stack.DeployReply")
	proto.RegisterType((*ListRequest)(nil), "stack.ListRequest")
	proto.RegisterType((*ListReply)(nil), "stack.ListReply")
	proto.RegisterType((*StackListEntry)(nil), "stack.StackListEntry")
	proto.RegisterType((*RemoveRequest)(nil), "stack.RemoveRequest")
	proto.RegisterType((*RemoveReply)(nil), "stack.RemoveReply")
	proto.RegisterType((*ServicesRequest)(nil), "stack.ServicesRequest")
	proto.RegisterType((*StackService)(nil), "stack.StackService")
	proto.RegisterType((*ServicesReply)(nil), "stack.ServicesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stack service

type StackClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
	Services(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ServicesReply, error)
}

type stackClient struct {
	cc *grpc.ClientConn
}

func NewStackClient(cc *grpc.ClientConn) StackClient {
	return &stackClient{cc}
}

func (c *stackClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := grpc.Invoke(ctx, "/stack.Stack/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/stack.Stack/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := grpc.Invoke(ctx, "/stack.Stack/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Services(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ServicesReply, error) {
	out := new(ServicesReply)
	err := grpc.Invoke(ctx, "/stack.Stack/Services", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stack service

type StackServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	Services(context.Context, *ServicesRequest) (*ServicesReply, error)
}

func RegisterStackServer(s *grpc.Server, srv StackServer) {
	s.RegisterService(&_Stack_serviceDesc, srv)
}

func _Stack_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Services_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Services(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/Services",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Services(ctx, req.(*ServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stack.Stack",
	HandlerType: (*StackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _Stack_Deploy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Stack_List_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Stack_Remove_Handler,
		},
		{
			MethodName: "Services",
			Handler:    _Stack_Services_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/stack/stack.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/stack/stack.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xdd, 0x24, 0x8d, 0x6f, 0xe2, 0xa4, 0x9a, 0x2f, 0xad, 0x22, 0x7f, 0x20, 0x45, 0x83,
	0x22, 0x42, 0x17, 0x31, 0x04, 0xd8, 0x20, 0x90, 0x2a, 0x04, 0x0b, 0x24, 0xd4, 0x85, 0xfb, 0x00,
	0xd5, 0xc4, 0x99, 0x86, 0x11, 0xb6, 0xc7, 0xd8, 0x93, 0x40, 0x84, 0xba, 0xe1, 0x15, 0x78, 0xa9,
	0xee, 0x79, 0x05, 0x1e, 0x04, 0xf9, 0xce, 0xf8, 0x8f, 0x4a, 0x6c, 0x6c, 0xdf, 0x33, 0xe7, 0x9e,
	0xde, 0x39, 0xf7, 0x34, 0xf0, 0x72, 0x2b, 0xd4, 0xa7, 0xdd, 0x7a, 0x19, 0xca, 0xd8, 0x67, 0x69,
	0x1a, 0xf2, 0x88, 0x67, 0x4c, 0xc9, 0xcc, 0x67, 0x71, 0xea, 0xb3, 0x54, 0xf8, 0x59, 0x1a, 0xfa,
	0xb9, 0x62, 0xe1, 0x67, 0xfd, 0x5c, 0xa6, 0x99, 0x54, 0x92, 0x74, 0xb1, 0xf0, 0x5e, 0xfc, 0xab,
	0x7b, 0xc3, 0x14, 0xd3, 0x4d, 0xb9, 0x79, 0xe9, 0x66, 0xef, 0xc1, 0x56, 0xca, 0x6d, 0xc4, 0x51,
	0x9e, 0x25, 0x89, 0x54, 0x4c, 0x09, 0x99, 0x98, 0x53, 0xfa, 0x06, 0xdc, 0x77, 0x3c, 0x8d, 0xe4,
	0x21, 0xe0, 0x5f, 0x76, 0x3c, 0x57, 0x84, 0x40, 0x27, 0x61, 0x31, 0x9f, 0x5a, 0x33, 0x6b, 0xe1,
	0x04, 0xf8, 0x4d, 0xa6, 0x70, 0x1c, 0xca, 0x38, 0x95, 0x39, 0x9f, 0xda, 0x33, 0x6b, 0x31, 0x0c,
	0xca, 0x92, 0xbe, 0x85, 0x41, 0xd9, 0x9e, 0x46, 0x07, 0xf2, 0x3f, 0x38, 0x37, 0xbb, 0x28, 0xba,
	0x6e, 0x28, 0xf4, 0x0b, 0xe0, 0xb2, 0x50, 0x39, 0x83, 0x1e, 0x4b, 0xf2, 0xaf, 0x3c, 0x43, 0x11,
	0x27, 0x30, 0x15, 0x75, 0x61, 0xf0, 0x51, 0xe4, 0xca, 0x0c, 0x40, 0x5f, 0x83, 0xa3, 0xcb, 0x42,
	0xd0, 0x87, 0x63, 0x9e, 0xa8, 0x4c, 0xf0, 0x7c, 0x6a, 0xcd, 0x8e, 0x16, 0x83, 0xd5, 0xe9, 0x52,
	0x1b, 0x73, 0x55, 0x3c, 0x0b, 0xde, 0xfb, 0x44, 0x65, 0x87, 0xa0, 0x64, 0xd1, 0x3b, 0x0b, 0x46,
	0xed, 0x33, 0xf2, 0x08, 0xb4, 0x7f, 0x38, 0xd0, 0x60, 0xe5, 0x2e, 0x8d, 0x3d, 0x48, 0x0b, 0xf4,
	0x19, 0x79, 0x0c, 0xe3, 0x1b, 0x26, 0x22, 0xbe, 0xb9, 0xce, 0x79, 0xb6, 0x17, 0x21, 0xcf, 0x71,
	0xca, 0x6e, 0x30, 0xd2, 0xf0, 0x95, 0x41, 0xc9, 0x13, 0x38, 0xc9, 0x76, 0x49, 0x22, 0x92, 0x6d,
	0xcd, 0x3c, 0x42, 0xe6, 0xd8, 0xe0, 0x15, 0x75, 0x0e, 0x23, 0x25, 0x15, 0x8b, 0x6a, 0x62, 0x07,
	0x89, 0x2e, 0xa2, 0x15, 0xed, 0x0c, 0x7a, 0xb9, 0x62, 0x6a, 0x97, 0x4f, 0xbb, 0xda, 0x17, 0x5d,
	0xd1, 0x39, 0xb8, 0x01, 0x8f, 0xe5, 0x9e, 0x97, 0xab, 0x99, 0x34, 0x2f, 0xe2, 0x98, 0xc9, 0xe9,
	0x1c, 0x06, 0x25, 0xad, 0x70, 0xac, 0x76, 0xd9, 0x6a, 0xb9, 0xfc, 0x14, 0xc6, 0xe5, 0x5f, 0x2c,
	0xf5, 0x1e, 0x02, 0xa0, 0x44, 0x73, 0x5d, 0x0e, 0x22, 0xc5, 0xbe, 0xe8, 0x37, 0x18, 0xa2, 0x45,
	0xa6, 0x8d, 0x8c, 0xc0, 0x16, 0x1b, 0x43, 0xb3, 0xc5, 0xa6, 0x4a, 0x8a, 0xdd, 0x48, 0x0a, 0x81,
	0x4e, 0x2c, 0x37, 0x1c, 0x1d, 0x71, 0x02, 0xfc, 0x26, 0x1e, 0xf4, 0x33, 0x9e, 0x46, 0x22, 0x64,
	0xda, 0x00, 0x27, 0xa8, 0xea, 0xe2, 0x4a, 0x22, 0x66, 0x5b, 0x6e, 0xae, 0xae, 0x0b, 0x7a, 0x01,
	0x6e, 0x3d, 0xab, 0x8e, 0x41, 0xbf, 0xf2, 0x50, 0xe7, 0xe0, 0xbf, 0x66, 0x0e, 0x0c, 0x39, 0xa8,
	0x48, 0xab, 0x3b, 0x1b, 0xba, 0x78, 0x44, 0x3e, 0x40, 0x4f, 0x27, 0x94, 0x4c, 0x4c, 0x4b, 0x2b,
	0xef, 0x1e, 0xf9, 0x0b, 0x4d, 0xa3, 0x03, 0x3d, 0xfd, 0xf1, 0xeb, 0xf7, 0x4f, 0x7b, 0x4c, 0xc1,
	0xdf, 0x3f, 0x33, 0xff, 0x4c, 0xaf, 0xac, 0x73, 0x72, 0x01, 0x9d, 0x22, 0x55, 0xa4, 0x6c, 0x69,
	0xa4, 0xd6, 0x3b, 0x69, 0x61, 0x85, 0x08, 0x41, 0x91, 0x21, 0x69, 0x88, 0x90, 0x4b, 0xe8, 0xe9,
	0x5d, 0x55, 0xc3, 0xb4, 0x36, 0x5c, 0x0d, 0xd3, 0x58, 0x28, 0xf5, 0x50, 0x67, 0x72, 0x4e, 0x6a,
	0x1d, 0xff, 0x3b, 0xbe, 0x6f, 0xc9, 0x1a, 0xfa, 0x75, 0x8c, 0x4a, 0x47, 0xda, 0x5b, 0xf6, 0x26,
	0xf7, 0xf0, 0x42, 0x75, 0x81, 0xaa, 0x94, 0xcc, 0xee, 0xa9, 0x62, 0x1a, 0x6e, 0xfd, 0xd2, 0xca,
	0x75, 0x0f, 0x7f, 0x28, 0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x06, 0x9c, 0x79, 0x17, 0xbc,
	0x04, 0x00, 0x00,
}
