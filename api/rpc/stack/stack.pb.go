// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/stack/stack.proto
// DO NOT EDIT!

/*
Package stack is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/stack/stack.proto

It has these top-level messages:
	StackFileRequest
	StackRequest
	RemoveRequest
	StackReply
	ListRequest
	ListReply
	StackInfo
	StackID
	CustomNetwork
	IdList
	NetworkSpec
	NetworkIPAM
	NetworkIPAMConfig
	Stack
*/
package stack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import service "github.com/appcelerator/amp/api/rpc/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StackState int32

const (
	StackState_Stopped     StackState = 0
	StackState_Starting    StackState = 1
	StackState_Running     StackState = 2
	StackState_Redeploying StackState = 3
)

var StackState_name = map[int32]string{
	0: "Stopped",
	1: "Starting",
	2: "Running",
	3: "Redeploying",
}
var StackState_value = map[string]int32{
	"Stopped":     0,
	"Starting":    1,
	"Running":     2,
	"Redeploying": 3,
}

func (x StackState) String() string {
	return proto.EnumName(StackState_name, int32(x))
}
func (StackState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// struct for stackfile request
type StackFileRequest struct {
	StackName string `protobuf:"bytes,1,opt,name=stack_name,json=stackName" json:"stack_name,omitempty"`
	Stackfile string `protobuf:"bytes,2,opt,name=stackfile" json:"stackfile,omitempty"`
}

func (m *StackFileRequest) Reset()                    { *m = StackFileRequest{} }
func (m *StackFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StackFileRequest) ProtoMessage()               {}
func (*StackFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StackFileRequest) GetStackName() string {
	if m != nil {
		return m.StackName
	}
	return ""
}

func (m *StackFileRequest) GetStackfile() string {
	if m != nil {
		return m.Stackfile
	}
	return ""
}

// struct stack name/id based requests
type StackRequest struct {
	StackIdent string `protobuf:"bytes,1,opt,name=stack_ident,json=stackIdent" json:"stack_ident,omitempty"`
}

func (m *StackRequest) Reset()                    { *m = StackRequest{} }
func (m *StackRequest) String() string            { return proto.CompactTextString(m) }
func (*StackRequest) ProtoMessage()               {}
func (*StackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StackRequest) GetStackIdent() string {
	if m != nil {
		return m.StackIdent
	}
	return ""
}

// struct for remove request function
type RemoveRequest struct {
	StackIdent string `protobuf:"bytes,1,opt,name=stack_ident,json=stackIdent" json:"stack_ident,omitempty"`
	Force      bool   `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RemoveRequest) GetStackIdent() string {
	if m != nil {
		return m.StackIdent
	}
	return ""
}

func (m *RemoveRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// struct for stack id responses
type StackReply struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId" json:"stack_id,omitempty"`
}

func (m *StackReply) Reset()                    { *m = StackReply{} }
func (m *StackReply) String() string            { return proto.CompactTextString(m) }
func (*StackReply) ProtoMessage()               {}
func (*StackReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StackReply) GetStackId() string {
	if m != nil {
		return m.StackId
	}
	return ""
}

// struct for list request function
type ListRequest struct {
	All   bool  `protobuf:"varint,1,opt,name=all" json:"all,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// struct for list reply function
type ListReply struct {
	List []*StackInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListReply) GetList() []*StackInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// struct part of ListReply Struct
type StackInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	State string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *StackInfo) Reset()                    { *m = StackInfo{} }
func (m *StackInfo) String() string            { return proto.CompactTextString(m) }
func (*StackInfo) ProtoMessage()               {}
func (*StackInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StackInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StackInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StackInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// struct to store Stack id in ETCD
type StackID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StackID) Reset()                    { *m = StackID{} }
func (m *StackID) String() string            { return proto.CompactTextString(m) }
func (*StackID) ProtoMessage()               {}
func (*StackID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StackID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// struct to store network info in ETCD
type CustomNetwork struct {
	Id          string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OwnerNumber int32        `protobuf:"varint,2,opt,name=owner_number,json=ownerNumber" json:"owner_number,omitempty"`
	Data        *NetworkSpec `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *CustomNetwork) Reset()                    { *m = CustomNetwork{} }
func (m *CustomNetwork) String() string            { return proto.CompactTextString(m) }
func (*CustomNetwork) ProtoMessage()               {}
func (*CustomNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CustomNetwork) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CustomNetwork) GetOwnerNumber() int32 {
	if m != nil {
		return m.OwnerNumber
	}
	return 0
}

func (m *CustomNetwork) GetData() *NetworkSpec {
	if m != nil {
		return m.Data
	}
	return nil
}

// struct to store service id list in ETCD
type IdList struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *IdList) Reset()                    { *m = IdList{} }
func (m *IdList) String() string            { return proto.CompactTextString(m) }
func (*IdList) ProtoMessage()               {}
func (*IdList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IdList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type NetworkSpec struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver     string            `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	EnableIpv6 bool              `protobuf:"varint,3,opt,name=enable_ipv6,json=enableIpv6" json:"enable_ipv6,omitempty"`
	Ipam       *NetworkIPAM      `protobuf:"bytes,4,opt,name=ipam" json:"ipam,omitempty"`
	Internal   bool              `protobuf:"varint,5,opt,name=internal" json:"internal,omitempty"`
	Options    map[string]string `protobuf:"bytes,6,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels     map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	External   string            `protobuf:"bytes,8,opt,name=external" json:"external,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NetworkSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkSpec) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *NetworkSpec) GetEnableIpv6() bool {
	if m != nil {
		return m.EnableIpv6
	}
	return false
}

func (m *NetworkSpec) GetIpam() *NetworkIPAM {
	if m != nil {
		return m.Ipam
	}
	return nil
}

func (m *NetworkSpec) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *NetworkSpec) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkSpec) GetExternal() string {
	if m != nil {
		return m.External
	}
	return ""
}

type NetworkIPAM struct {
	Driver  string               `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	Options map[string]string    `protobuf:"bytes,2,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Config  []*NetworkIPAMConfig `protobuf:"bytes,3,rep,name=config" json:"config,omitempty"`
}

func (m *NetworkIPAM) Reset()                    { *m = NetworkIPAM{} }
func (m *NetworkIPAM) String() string            { return proto.CompactTextString(m) }
func (*NetworkIPAM) ProtoMessage()               {}
func (*NetworkIPAM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NetworkIPAM) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *NetworkIPAM) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkIPAM) GetConfig() []*NetworkIPAMConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type NetworkIPAMConfig struct {
	Subnet     string            `protobuf:"bytes,1,opt,name=subnet" json:"subnet,omitempty"`
	IpRange    string            `protobuf:"bytes,2,opt,name=ip_range,json=ipRange" json:"ip_range,omitempty"`
	Gateway    string            `protobuf:"bytes,3,opt,name=gateway" json:"gateway,omitempty"`
	AuxAddress map[string]string `protobuf:"bytes,4,rep,name=aux_address,json=auxAddress" json:"aux_address,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkIPAMConfig) Reset()                    { *m = NetworkIPAMConfig{} }
func (m *NetworkIPAMConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkIPAMConfig) ProtoMessage()               {}
func (*NetworkIPAMConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NetworkIPAMConfig) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *NetworkIPAMConfig) GetIpRange() string {
	if m != nil {
		return m.IpRange
	}
	return ""
}

func (m *NetworkIPAMConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *NetworkIPAMConfig) GetAuxAddress() map[string]string {
	if m != nil {
		return m.AuxAddress
	}
	return nil
}

// Stack struct
type Stack struct {
	Name     string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id       string                 `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Services []*service.ServiceSpec `protobuf:"bytes,3,rep,name=services" json:"services,omitempty"`
	Networks []*NetworkSpec         `protobuf:"bytes,4,rep,name=networks" json:"networks,omitempty"`
	IsPublic bool                   `protobuf:"varint,5,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Stack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stack) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stack) GetServices() []*service.ServiceSpec {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Stack) GetNetworks() []*NetworkSpec {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *Stack) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func init() {
	proto.RegisterType((*StackFileRequest)(nil), "stack.StackFileRequest")
	proto.RegisterType((*StackRequest)(nil), "stack.StackRequest")
	proto.RegisterType((*RemoveRequest)(nil), "stack.RemoveRequest")
	proto.RegisterType((*StackReply)(nil), "stack.StackReply")
	proto.RegisterType((*ListRequest)(nil), "stack.ListRequest")
	proto.RegisterType((*ListReply)(nil), "stack.ListReply")
	proto.RegisterType((*StackInfo)(nil), "stack.StackInfo")
	proto.RegisterType((*StackID)(nil), "stack.StackID")
	proto.RegisterType((*CustomNetwork)(nil), "stack.CustomNetwork")
	proto.RegisterType((*IdList)(nil), "stack.IdList")
	proto.RegisterType((*NetworkSpec)(nil), "stack.NetworkSpec")
	proto.RegisterType((*NetworkIPAM)(nil), "stack.NetworkIPAM")
	proto.RegisterType((*NetworkIPAMConfig)(nil), "stack.NetworkIPAMConfig")
	proto.RegisterType((*Stack)(nil), "stack.Stack")
	proto.RegisterEnum("stack.StackState", StackState_name, StackState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StackService service

type StackServiceClient interface {
	Up(ctx context.Context, in *StackFileRequest, opts ...grpc.CallOption) (*StackReply, error)
	Create(ctx context.Context, in *StackFileRequest, opts ...grpc.CallOption) (*StackReply, error)
	Start(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	Stop(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*StackReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
}

type stackServiceClient struct {
	cc *grpc.ClientConn
}

func NewStackServiceClient(cc *grpc.ClientConn) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) Up(ctx context.Context, in *StackFileRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Up", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Create(ctx context.Context, in *StackFileRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Start(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Stop(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/stack.StackService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StackService service

type StackServiceServer interface {
	Up(context.Context, *StackFileRequest) (*StackReply, error)
	Create(context.Context, *StackFileRequest) (*StackReply, error)
	Start(context.Context, *StackRequest) (*StackReply, error)
	Stop(context.Context, *StackRequest) (*StackReply, error)
	Remove(context.Context, *RemoveRequest) (*StackReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
}

func RegisterStackServiceServer(s *grpc.Server, srv StackServiceServer) {
	s.RegisterService(&_StackService_serviceDesc, srv)
}

func _StackService_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Up(ctx, req.(*StackFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Create(ctx, req.(*StackFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Start(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Stop(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stack.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Up",
			Handler:    _StackService_Up_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StackService_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _StackService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StackService_Stop_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _StackService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StackService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/stack/stack.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/stack/stack.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x96, 0xdd, 0x6e, 0xe3, 0xc4,
	0x17, 0xc0, 0xff, 0xce, 0x77, 0x8e, 0xb3, 0xbb, 0xe9, 0xfc, 0x2b, 0xea, 0x86, 0xee, 0x16, 0xac,
	0x05, 0xaa, 0x5e, 0x24, 0xbb, 0x45, 0x5b, 0xd1, 0x4a, 0x08, 0x55, 0xa5, 0x2b, 0x05, 0x2d, 0xdd,
	0x95, 0x03, 0xdc, 0x46, 0x93, 0x78, 0x1a, 0x86, 0x3a, 0x9e, 0xc1, 0x1e, 0xa7, 0x8d, 0x10, 0x37,
	0xbc, 0x02, 0xaf, 0xc0, 0x15, 0x0f, 0xc3, 0x0d, 0xaf, 0xc0, 0x05, 0xe2, 0x29, 0xd0, 0x9c, 0x19,
	0x7b, 0xdd, 0x6d, 0x22, 0xb5, 0xe2, 0x26, 0xf6, 0x39, 0x73, 0xce, 0xef, 0x7c, 0x8c, 0xe7, 0x4c,
	0xe0, 0xc5, 0x8c, 0xab, 0xef, 0xb3, 0x49, 0x7f, 0x2a, 0xe6, 0x03, 0x2a, 0xe5, 0x94, 0x45, 0x2c,
	0xa1, 0x4a, 0x24, 0x03, 0x3a, 0x97, 0x03, 0x2a, 0xf9, 0x20, 0x91, 0xd3, 0x41, 0xaa, 0xe8, 0xf4,
	0xd2, 0xfc, 0xf6, 0x65, 0x22, 0x94, 0x20, 0x75, 0x14, 0x7a, 0x3b, 0x33, 0x21, 0x66, 0x11, 0x43,
	0x43, 0x1a, 0xc7, 0x42, 0x51, 0xc5, 0x45, 0x9c, 0x1a, 0xa3, 0xde, 0xd1, 0x9d, 0xd8, 0x2c, 0x59,
	0xf0, 0x29, 0xcb, 0x9f, 0xc6, 0xd5, 0x7f, 0x0d, 0xdd, 0x91, 0x8e, 0xf0, 0x92, 0x47, 0x2c, 0x60,
	0x3f, 0x66, 0x2c, 0x55, 0xe4, 0x31, 0x00, 0x46, 0x1d, 0xc7, 0x74, 0xce, 0x3c, 0xe7, 0x03, 0x67,
	0xaf, 0x1d, 0xb4, 0x51, 0x73, 0x4e, 0xe7, 0x8c, 0xec, 0x80, 0x11, 0x2e, 0x78, 0xc4, 0xbc, 0x4a,
	0x69, 0x55, 0x2b, 0xfc, 0x01, 0x74, 0x10, 0x98, 0xc3, 0x76, 0xc1, 0x35, 0x30, 0x1e, 0xb2, 0x58,
	0x59, 0x9a, 0xe1, 0x0f, 0xb5, 0xc6, 0x7f, 0x09, 0x0f, 0x02, 0x36, 0x17, 0x0b, 0x76, 0x57, 0x0f,
	0xb2, 0x09, 0xf5, 0x0b, 0x91, 0x4c, 0x4d, 0xf0, 0x56, 0x60, 0x04, 0xff, 0x13, 0x00, 0x1b, 0x58,
	0x46, 0x4b, 0xb2, 0x0d, 0xad, 0x1c, 0x62, 0x09, 0x4d, 0x4b, 0xf0, 0x5f, 0x80, 0xfb, 0x8a, 0xa7,
	0x2a, 0x0f, 0xd7, 0x85, 0x2a, 0x8d, 0x22, 0x34, 0x6a, 0x05, 0xfa, 0x55, 0xf3, 0x23, 0x3e, 0xe7,
	0x0a, 0xf9, 0xd5, 0xc0, 0x08, 0xfe, 0x73, 0x68, 0x1b, 0x37, 0x8d, 0x7f, 0x0a, 0xb5, 0x88, 0xa7,
	0x3a, 0xb9, 0xea, 0x9e, 0x7b, 0xd0, 0xed, 0x9b, 0x2d, 0xc3, 0xf8, 0xc3, 0xf8, 0x42, 0x04, 0xb8,
	0xea, 0x9f, 0x41, 0xbb, 0x50, 0x11, 0x02, 0xb5, 0x52, 0x3f, 0xf1, 0x9d, 0x3c, 0x84, 0x0a, 0x0f,
	0x6d, 0x0f, 0x2b, 0x3c, 0xd4, 0x91, 0x53, 0x45, 0x15, 0xf3, 0xaa, 0xa8, 0x32, 0x82, 0xbf, 0x0d,
	0x4d, 0x83, 0xf9, 0xd2, 0x3a, 0x38, 0xb9, 0x83, 0xff, 0x03, 0x3c, 0x38, 0xcd, 0x52, 0x25, 0xe6,
	0xe7, 0x4c, 0x5d, 0x89, 0xe4, 0xf2, 0x5d, 0x03, 0xf2, 0x21, 0x74, 0xc4, 0x55, 0xcc, 0x92, 0x71,
	0x9c, 0xcd, 0x27, 0x2c, 0xc1, 0x58, 0xf5, 0xc0, 0x45, 0xdd, 0x39, 0xaa, 0xc8, 0xc7, 0x50, 0x0b,
	0xa9, 0xa2, 0x18, 0xd3, 0x3d, 0x20, 0xb6, 0x16, 0x0b, 0x1c, 0x49, 0x36, 0x0d, 0x70, 0xdd, 0xdf,
	0x81, 0xc6, 0x30, 0xd4, 0x2d, 0xd0, 0xa5, 0x14, 0xd5, 0xb7, 0x6d, 0xad, 0xbf, 0x55, 0xc1, 0x2d,
	0xf9, 0xac, 0x2c, 0xf7, 0x3d, 0x68, 0x84, 0x09, 0x5f, 0xd8, 0x34, 0xda, 0x81, 0x95, 0xf4, 0x8e,
	0xb3, 0x98, 0x4e, 0x22, 0x36, 0xe6, 0x72, 0x71, 0x88, 0x89, 0xb4, 0x02, 0x30, 0xaa, 0xa1, 0x5c,
	0x1c, 0xea, 0x14, 0xb9, 0xa4, 0x73, 0xaf, 0xb6, 0x2a, 0xc5, 0xe1, 0x9b, 0x93, 0xaf, 0x03, 0x5c,
	0x27, 0x3d, 0x68, 0xf1, 0x58, 0xb1, 0x24, 0xa6, 0x91, 0x57, 0x47, 0x4a, 0x21, 0x93, 0x23, 0x68,
	0x0a, 0x89, 0xa7, 0xc6, 0x6b, 0xe0, 0xae, 0xed, 0xde, 0xae, 0xb4, 0xff, 0xda, 0x58, 0x9c, 0xc5,
	0x2a, 0x59, 0x06, 0xb9, 0x3d, 0x39, 0x84, 0x46, 0x44, 0x27, 0x2c, 0x4a, 0xbd, 0x26, 0x7a, 0x3e,
	0x59, 0xe1, 0xf9, 0x0a, 0x0d, 0x8c, 0xa3, 0xb5, 0xd6, 0xe9, 0xb0, 0x6b, 0x9b, 0x4e, 0x0b, 0x2b,
	0x2e, 0xe4, 0xde, 0x31, 0x74, 0xca, 0xc1, 0xf4, 0x67, 0x78, 0xc9, 0x96, 0xb6, 0x5d, 0xfa, 0x55,
	0x7f, 0x0c, 0x0b, 0x1a, 0x65, 0xf9, 0x19, 0x33, 0xc2, 0x71, 0xe5, 0x33, 0xa7, 0x77, 0x04, 0x6e,
	0x29, 0xdc, 0x7d, 0x5c, 0xfd, 0x3f, 0x9c, 0x62, 0x9b, 0x74, 0xdf, 0x4a, 0x5b, 0xe2, 0xdc, 0xd8,
	0x92, 0x52, 0xb7, 0x2a, 0xab, 0xba, 0xa5, 0x9d, 0xd7, 0x74, 0xeb, 0x19, 0x34, 0xa6, 0x22, 0xbe,
	0xe0, 0x33, 0xaf, 0x8a, 0x9e, 0xde, 0x6d, 0xcf, 0x53, 0x5c, 0x0f, 0xac, 0xdd, 0x7f, 0xe9, 0x85,
	0xff, 0x8f, 0x03, 0x1b, 0xb7, 0xc8, 0xba, 0xac, 0x34, 0x9b, 0xc4, 0x2c, 0x1f, 0x1f, 0x56, 0xd2,
	0x63, 0x81, 0xcb, 0x71, 0x42, 0xe3, 0x59, 0x8e, 0x6a, 0x72, 0x19, 0x68, 0x91, 0x78, 0xd0, 0x9c,
	0x51, 0xc5, 0xae, 0xe8, 0xd2, 0x9e, 0xbe, 0x5c, 0x24, 0x43, 0x70, 0x69, 0x76, 0x3d, 0xa6, 0x61,
	0x98, 0xb0, 0x34, 0xf5, 0x6a, 0x58, 0xd5, 0xde, 0xba, 0xaa, 0xfa, 0x27, 0xd9, 0xf5, 0x89, 0x31,
	0x35, 0x8d, 0x01, 0x5a, 0x28, 0x7a, 0x9f, 0xc3, 0xa3, 0x77, 0x96, 0xef, 0x55, 0xec, 0xef, 0x0e,
	0xd4, 0x71, 0x14, 0xdc, 0x69, 0x9a, 0x3c, 0x83, 0x96, 0x1d, 0xf6, 0xa9, 0xdd, 0x8a, 0xcd, 0x7e,
	0x3e, 0xfd, 0x47, 0xe6, 0x89, 0xc7, 0xbb, 0xb0, 0x22, 0x7d, 0x68, 0xc5, 0xa6, 0x9e, 0xbc, 0xcc,
	0x55, 0xe3, 0xa0, 0xb0, 0x21, 0xef, 0x43, 0x9b, 0xa7, 0x63, 0x99, 0x4d, 0x22, 0x3e, 0x2d, 0x0e,
	0x5c, 0xfa, 0x06, 0xe5, 0xfd, 0x33, 0x3b, 0x90, 0x47, 0x7a, 0x88, 0x11, 0x57, 0x0f, 0x31, 0x21,
	0x25, 0x0b, 0xbb, 0xff, 0x23, 0x1d, 0x68, 0x8d, 0x14, 0x4d, 0x14, 0x8f, 0x67, 0x5d, 0x47, 0x2f,
	0x05, 0x59, 0x1c, 0x6b, 0xa1, 0x42, 0x1e, 0x81, 0x1b, 0xb0, 0x90, 0xc9, 0x48, 0x2c, 0xb5, 0xa2,
	0x7a, 0xf0, 0x77, 0xd5, 0xde, 0x28, 0x36, 0x65, 0x32, 0x84, 0xca, 0xb7, 0x92, 0x6c, 0x95, 0x67,
	0x6e, 0xe9, 0xf6, 0xea, 0x6d, 0x94, 0x17, 0x70, 0x5a, 0xfb, 0x5b, 0xbf, 0xfc, 0xf9, 0xd7, 0xaf,
	0x95, 0x0d, 0xbf, 0x33, 0x58, 0x3c, 0xb7, 0x77, 0x6c, 0x26, 0x8f, 0x9d, 0x7d, 0xf2, 0x15, 0x34,
	0x4e, 0x13, 0xa6, 0xd3, 0xbb, 0x0f, 0x6e, 0x13, 0x71, 0x0f, 0xfd, 0x76, 0x81, 0xd3, 0xac, 0xef,
	0x70, 0x6b, 0x12, 0x45, 0xfe, 0x7f, 0xd3, 0x63, 0x2d, 0xe6, 0x23, 0xc4, 0xec, 0xfa, 0x8f, 0xdf,
	0x66, 0xf5, 0x53, 0xe9, 0xe2, 0xfb, 0x59, 0xeb, 0x12, 0x45, 0xbe, 0x81, 0x9a, 0x6e, 0xdc, 0x9d,
	0xb1, 0x4f, 0x11, 0xfb, 0xc4, 0xdf, 0x59, 0x8f, 0x15, 0x92, 0x04, 0xd0, 0x30, 0xb7, 0x2e, 0xd9,
	0xb4, 0x88, 0x1b, 0x97, 0xf0, 0x2a, 0xf0, 0x2e, 0x82, 0xb7, 0xf7, 0xb7, 0xd6, 0x80, 0xc9, 0x17,
	0x50, 0x33, 0xd7, 0x83, 0xf5, 0x2d, 0xdd, 0xb2, 0xbd, 0xee, 0x0d, 0x9d, 0xc6, 0x6d, 0x20, 0xce,
	0x25, 0x6f, 0xbb, 0x38, 0x69, 0xe0, 0x7f, 0x92, 0x4f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0x81, 0x6e, 0x8f, 0x2c, 0x09, 0x00, 0x00,
}
