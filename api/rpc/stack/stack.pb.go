// Code generated by protoc-gen-go.
// source: stack.proto
// DO NOT EDIT!

/*
Package stack is a generated protocol buffer package.

It is generated from these files:
	stack.proto

It has these top-level messages:
	CreateRequest
	CreateReply
	UpRequest
	UpReply
	Stack
	Service
	Port
	ServiceIdList
*/
package stack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	StackName       string `protobuf:"bytes,1,opt,name=stack_name,json=stackName" json:"stack_name,omitempty"`
	StackDefinition string `protobuf:"bytes,2,opt,name=stack_definition,json=stackDefinition" json:"stack_definition,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateReply struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId" json:"stack_id,omitempty"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UpRequest struct {
	StackName string `protobuf:"bytes,1,opt,name=stack_name,json=stackName" json:"stack_name,omitempty"`
	Stackfile string `protobuf:"bytes,2,opt,name=stackfile" json:"stackfile,omitempty"`
}

func (m *UpRequest) Reset()                    { *m = UpRequest{} }
func (m *UpRequest) String() string            { return proto.CompactTextString(m) }
func (*UpRequest) ProtoMessage()               {}
func (*UpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UpReply struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId" json:"stack_id,omitempty"`
}

func (m *UpReply) Reset()                    { *m = UpReply{} }
func (m *UpReply) String() string            { return proto.CompactTextString(m) }
func (*UpReply) ProtoMessage()               {}
func (*UpReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Stack struct {
	Name     string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id       string     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Services []*Service `protobuf:"bytes,3,rep,name=services" json:"services,omitempty"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Stack) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Service struct {
	Image    string            `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Name     string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Replicas uint64            `protobuf:"varint,3,opt,name=replicas" json:"replicas,omitempty"`
	Env      map[string]string `protobuf:"bytes,4,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels   map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ports    []*Port           `protobuf:"bytes,6,rep,name=ports" json:"ports,omitempty"`
	Expose   []string          `protobuf:"bytes,7,rep,name=expose" json:"expose,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Service) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Service) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Service) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

type Port struct {
	PublishedPort uint64 `protobuf:"varint,1,opt,name=published_port,json=publishedPort" json:"published_port,omitempty"`
	TargetPort    uint64 `protobuf:"varint,2,opt,name=target_port,json=targetPort" json:"target_port,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ServiceIdList struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ServiceIdList) Reset()                    { *m = ServiceIdList{} }
func (m *ServiceIdList) String() string            { return proto.CompactTextString(m) }
func (*ServiceIdList) ProtoMessage()               {}
func (*ServiceIdList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*CreateRequest)(nil), "stack.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "stack.CreateReply")
	proto.RegisterType((*UpRequest)(nil), "stack.UpRequest")
	proto.RegisterType((*UpReply)(nil), "stack.UpReply")
	proto.RegisterType((*Stack)(nil), "stack.Stack")
	proto.RegisterType((*Service)(nil), "stack.Service")
	proto.RegisterType((*Port)(nil), "stack.Port")
	proto.RegisterType((*ServiceIdList)(nil), "stack.ServiceIdList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StackService service

type StackServiceClient interface {
	Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpReply, error)
}

type stackServiceClient struct {
	cc *grpc.ClientConn
}

func NewStackServiceClient(cc *grpc.ClientConn) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpReply, error) {
	out := new(UpReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Up", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StackService service

type StackServiceServer interface {
	Up(context.Context, *UpRequest) (*UpReply, error)
}

func RegisterStackServiceServer(s *grpc.Server, srv StackServiceServer) {
	s.RegisterService(&_StackService_serviceDesc, srv)
}

func _StackService_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Up(ctx, req.(*UpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stack.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Up",
			Handler:    _StackService_Up_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("stack.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0x1c, 0x3b, 0xb1, 0xc7, 0x24, 0x44, 0x2b, 0x04, 0xc6, 0x02, 0x11, 0xcc, 0x87, 0x5c,
	0x0e, 0x39, 0x04, 0xa9, 0x02, 0xae, 0x50, 0x89, 0x4a, 0x15, 0x42, 0xae, 0x2a, 0xc4, 0xa9, 0x72,
	0xe2, 0x69, 0x59, 0xba, 0xb1, 0x17, 0xef, 0x26, 0x22, 0xff, 0x95, 0x1f, 0x83, 0x76, 0x76, 0x6d,
	0x02, 0x17, 0xe0, 0x36, 0xef, 0xcd, 0x9b, 0x79, 0x33, 0xe3, 0x35, 0xc4, 0x4a, 0x97, 0xeb, 0x9b,
	0x85, 0x6c, 0x1b, 0xdd, 0xb0, 0x80, 0x40, 0xf6, 0x19, 0x26, 0x6f, 0x5b, 0x2c, 0x35, 0x16, 0xf8,
	0x6d, 0x8b, 0x4a, 0xb3, 0x87, 0x00, 0x94, 0xb9, 0xac, 0xcb, 0x0d, 0x26, 0x83, 0xf9, 0x20, 0x8f,
	0x8a, 0x88, 0x98, 0x0f, 0xe5, 0x06, 0xd9, 0x11, 0xcc, 0x6c, 0xba, 0xc2, 0x2b, 0x5e, 0x73, 0xcd,
	0x9b, 0x3a, 0xf1, 0x48, 0x74, 0x9b, 0xf8, 0x77, 0x3d, 0x9d, 0xe5, 0x10, 0x77, 0xad, 0xa5, 0xd8,
	0xb3, 0xfb, 0x10, 0xda, 0x4a, 0x5e, 0xb9, 0xb6, 0x63, 0xc2, 0xa7, 0x55, 0xf6, 0x1e, 0xa2, 0x0b,
	0xf9, 0x8f, 0x03, 0x3c, 0x00, 0x0b, 0xae, 0xb8, 0x40, 0xe7, 0xfc, 0x8b, 0xc8, 0x9e, 0xc2, 0xd8,
	0x74, 0xfa, 0x8b, 0xdf, 0x27, 0x08, 0xce, 0x4d, 0xc8, 0x18, 0xf8, 0x07, 0x2e, 0x14, 0xb3, 0x29,
	0x78, 0xbc, 0x72, 0x9d, 0x3d, 0x5e, 0xb1, 0x17, 0x10, 0x2a, 0x6c, 0x77, 0x7c, 0x8d, 0x2a, 0x19,
	0xce, 0x87, 0x79, 0xbc, 0x9c, 0x2e, 0xec, 0x21, 0xcf, 0x2d, 0x5d, 0xf4, 0xf9, 0xec, 0x87, 0x07,
	0x63, 0xc7, 0xb2, 0x3b, 0x10, 0xf0, 0x4d, 0x79, 0xdd, 0x35, 0xb7, 0xa0, 0x77, 0xf4, 0x0e, 0x1c,
	0x53, 0x08, 0x5b, 0x94, 0x82, 0xaf, 0x4b, 0xe3, 0x30, 0xc8, 0xfd, 0xa2, 0xc7, 0xec, 0x08, 0x86,
	0x58, 0xef, 0x12, 0x9f, 0x8c, 0xef, 0xfd, 0x6e, 0xbc, 0x38, 0xa9, 0x77, 0x27, 0xb5, 0x6e, 0xf7,
	0x85, 0xd1, 0xb0, 0x25, 0x8c, 0x44, 0xb9, 0x42, 0xa1, 0x92, 0x80, 0xd4, 0xe9, 0x1f, 0xea, 0x33,
	0x4a, 0xda, 0x02, 0xa7, 0x64, 0x8f, 0x21, 0x90, 0x4d, 0xab, 0x55, 0x32, 0xa2, 0x92, 0xd8, 0x95,
	0x7c, 0x6c, 0x5a, 0x5d, 0xd8, 0x0c, 0xbb, 0x0b, 0x23, 0xfc, 0x2e, 0x1b, 0x85, 0xc9, 0x78, 0x3e,
	0xcc, 0xa3, 0xc2, 0xa1, 0xf4, 0x18, 0xc2, 0xce, 0x9f, 0xcd, 0x60, 0x78, 0x83, 0x7b, 0xb7, 0xa9,
	0x09, 0xcd, 0xf6, 0xbb, 0x52, 0x6c, 0xbb, 0x45, 0x2d, 0x78, 0xe3, 0xbd, 0x1a, 0xa4, 0xaf, 0x21,
	0x3e, 0x98, 0xe4, 0x7f, 0x4a, 0xb3, 0xaf, 0xe0, 0x9b, 0xc9, 0xd8, 0x33, 0x98, 0xca, 0xed, 0x4a,
	0x70, 0xf5, 0x05, 0xab, 0x4b, 0x33, 0x25, 0x95, 0xfb, 0xc5, 0xa4, 0x67, 0x49, 0xf6, 0x08, 0x62,
	0x5d, 0xb6, 0xd7, 0xa8, 0xad, 0xc6, 0x23, 0x0d, 0x58, 0x8a, 0x04, 0x29, 0x84, 0xf4, 0x33, 0xac,
	0x1b, 0x41, 0x87, 0x8f, 0x8a, 0x1e, 0x67, 0x4f, 0x60, 0xe2, 0x0e, 0x77, 0x5a, 0x9d, 0x71, 0xa5,
	0xcd, 0x97, 0x13, 0x5c, 0x19, 0x2b, 0x73, 0x05, 0x8a, 0x97, 0xc7, 0x70, 0x8b, 0x1e, 0x52, 0xf7,
	0xcd, 0x9f, 0x83, 0x77, 0x21, 0xd9, 0xcc, 0x5d, 0xb1, 0x7f, 0xd3, 0xe9, 0xf4, 0x80, 0x91, 0x62,
	0xbf, 0x1a, 0x91, 0xcd, 0xcb, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xc7, 0x4f, 0xc0, 0x92,
	0x03, 0x00, 0x00,
}
