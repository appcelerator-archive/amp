// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/stack/stack.proto
// DO NOT EDIT!

/*
Package stack is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/stack/stack.proto

It has these top-level messages:
	Stack
	ServiceSpec
	StackDeployRequest
	StackUpdateRequest
	StackRestoreRequest
	StackPsRequest
	StackServicesRequest
	StackRequest
	StackReply
	MonitorService
	StackMonitorReply
	StackImagesReply
	StackMapping
*/
package stack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Stack struct
type Stack struct {
	Name     string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FileData string         `protobuf:"bytes,3,opt,name=file_data,json=fileData" json:"file_data,omitempty"`
	Services []*ServiceSpec `protobuf:"bytes,4,rep,name=services" json:"services,omitempty"`
	AmpTag   string         `protobuf:"bytes,5,opt,name=amp_tag,json=ampTag" json:"amp_tag,omitempty"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Stack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stack) GetFileData() string {
	if m != nil {
		return m.FileData
	}
	return ""
}

func (m *Stack) GetServices() []*ServiceSpec {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Stack) GetAmpTag() string {
	if m != nil {
		return m.AmpTag
	}
	return ""
}

// Service spec restrict to amp need
type ServiceSpec struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image  string            `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServiceSpec) Reset()                    { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string            { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()               {}
func (*ServiceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ServiceSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// request struct for Deploy command
type StackDeployRequest struct {
	Stack        *Stack `protobuf:"bytes,1,opt,name=stack" json:"stack,omitempty"`
	RegistryAuth bool   `protobuf:"varint,2,opt,name=registry_auth,json=registryAuth" json:"registry_auth,omitempty"`
}

func (m *StackDeployRequest) Reset()                    { *m = StackDeployRequest{} }
func (m *StackDeployRequest) String() string            { return proto.CompactTextString(m) }
func (*StackDeployRequest) ProtoMessage()               {}
func (*StackDeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StackDeployRequest) GetStack() *Stack {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *StackDeployRequest) GetRegistryAuth() bool {
	if m != nil {
		return m.RegistryAuth
	}
	return false
}

// request struct for UpdateFile command
type StackUpdateRequest struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileData string `protobuf:"bytes,2,opt,name=file_data,json=fileData" json:"file_data,omitempty"`
}

func (m *StackUpdateRequest) Reset()                    { *m = StackUpdateRequest{} }
func (m *StackUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*StackUpdateRequest) ProtoMessage()               {}
func (*StackUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StackUpdateRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StackUpdateRequest) GetFileData() string {
	if m != nil {
		return m.FileData
	}
	return ""
}

// request struct for RestoreFile command
type StackRestoreRequest struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

func (m *StackRestoreRequest) Reset()                    { *m = StackRestoreRequest{} }
func (m *StackRestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*StackRestoreRequest) ProtoMessage()               {}
func (*StackRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StackRestoreRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// request struct for Ps command
type StackPsRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NoTrunc   bool   `protobuf:"varint,2,opt,name=no_trunc,json=noTrunc" json:"no_trunc,omitempty"`
	NoResolve bool   `protobuf:"varint,3,opt,name=no_resolve,json=noResolve" json:"no_resolve,omitempty"`
	Filter    string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
}

func (m *StackPsRequest) Reset()                    { *m = StackPsRequest{} }
func (m *StackPsRequest) String() string            { return proto.CompactTextString(m) }
func (*StackPsRequest) ProtoMessage()               {}
func (*StackPsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StackPsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StackPsRequest) GetNoTrunc() bool {
	if m != nil {
		return m.NoTrunc
	}
	return false
}

func (m *StackPsRequest) GetNoResolve() bool {
	if m != nil {
		return m.NoResolve
	}
	return false
}

func (m *StackPsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// request struct for Services command
type StackServicesRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Quiet  bool   `protobuf:"varint,3,opt,name=quiet" json:"quiet,omitempty"`
	Filter string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
}

func (m *StackServicesRequest) Reset()                    { *m = StackServicesRequest{} }
func (m *StackServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*StackServicesRequest) ProtoMessage()               {}
func (*StackServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StackServicesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StackServicesRequest) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *StackServicesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// request struct for Rm, GetStack and List commands
type StackRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StackRequest) Reset()                    { *m = StackRequest{} }
func (m *StackRequest) String() string            { return proto.CompactTextString(m) }
func (*StackRequest) ProtoMessage()               {}
func (*StackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StackRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// struct for stack commands reply
type StackReply struct {
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
}

func (m *StackReply) Reset()                    { *m = StackReply{} }
func (m *StackReply) String() string            { return proto.CompactTextString(m) }
func (*StackReply) ProtoMessage()               {}
func (*StackReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StackReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

// struct for service in monitor
type MonitorService struct {
	Stack      string `protobuf:"bytes,1,opt,name=stack" json:"stack,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Service    string `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	Status     string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Mode       string `protobuf:"bytes,5,opt,name=mode" json:"mode,omitempty"`
	Replicas   string `protobuf:"bytes,6,opt,name=replicas" json:"replicas,omitempty"`
	FailedTask string `protobuf:"bytes,7,opt,name=failedTask" json:"failedTask,omitempty"`
}

func (m *MonitorService) Reset()                    { *m = MonitorService{} }
func (m *MonitorService) String() string            { return proto.CompactTextString(m) }
func (*MonitorService) ProtoMessage()               {}
func (*MonitorService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MonitorService) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func (m *MonitorService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MonitorService) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MonitorService) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MonitorService) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *MonitorService) GetReplicas() string {
	if m != nil {
		return m.Replicas
	}
	return ""
}

func (m *MonitorService) GetFailedTask() string {
	if m != nil {
		return m.FailedTask
	}
	return ""
}

// struct for reply Monitor
type StackMonitorReply struct {
	Lines []*MonitorService `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
}

func (m *StackMonitorReply) Reset()                    { *m = StackMonitorReply{} }
func (m *StackMonitorReply) String() string            { return proto.CompactTextString(m) }
func (*StackMonitorReply) ProtoMessage()               {}
func (*StackMonitorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StackMonitorReply) GetLines() []*MonitorService {
	if m != nil {
		return m.Lines
	}
	return nil
}

// struct for reply getImages
type StackImagesReply struct {
	Images []string `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *StackImagesReply) Reset()                    { *m = StackImagesReply{} }
func (m *StackImagesReply) String() string            { return proto.CompactTextString(m) }
func (*StackImagesReply) ProtoMessage()               {}
func (*StackImagesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StackImagesReply) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

// stack to store mapping in etcd
type StackMapping struct {
	StackName   string `protobuf:"bytes,1,opt,name=stackName" json:"stackName,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	Mapping     string `protobuf:"bytes,3,opt,name=mapping" json:"mapping,omitempty"`
}

func (m *StackMapping) Reset()                    { *m = StackMapping{} }
func (m *StackMapping) String() string            { return proto.CompactTextString(m) }
func (*StackMapping) ProtoMessage()               {}
func (*StackMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StackMapping) GetStackName() string {
	if m != nil {
		return m.StackName
	}
	return ""
}

func (m *StackMapping) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *StackMapping) GetMapping() string {
	if m != nil {
		return m.Mapping
	}
	return ""
}

func init() {
	proto.RegisterType((*Stack)(nil), "stack.Stack")
	proto.RegisterType((*ServiceSpec)(nil), "stack.ServiceSpec")
	proto.RegisterType((*StackDeployRequest)(nil), "stack.StackDeployRequest")
	proto.RegisterType((*StackUpdateRequest)(nil), "stack.StackUpdateRequest")
	proto.RegisterType((*StackRestoreRequest)(nil), "stack.StackRestoreRequest")
	proto.RegisterType((*StackPsRequest)(nil), "stack.StackPsRequest")
	proto.RegisterType((*StackServicesRequest)(nil), "stack.StackServicesRequest")
	proto.RegisterType((*StackRequest)(nil), "stack.StackRequest")
	proto.RegisterType((*StackReply)(nil), "stack.StackReply")
	proto.RegisterType((*MonitorService)(nil), "stack.MonitorService")
	proto.RegisterType((*StackMonitorReply)(nil), "stack.StackMonitorReply")
	proto.RegisterType((*StackImagesReply)(nil), "stack.StackImagesReply")
	proto.RegisterType((*StackMapping)(nil), "stack.StackMapping")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StackService service

type StackServiceClient interface {
	Deploy(ctx context.Context, in *StackDeployRequest, opts ...grpc.CallOption) (*StackReply, error)
	UpdateFile(ctx context.Context, in *StackUpdateRequest, opts ...grpc.CallOption) (*StackReply, error)
	RestoreFile(ctx context.Context, in *StackRestoreRequest, opts ...grpc.CallOption) (*StackReply, error)
	Monitor(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackMonitorReply, error)
	ListStacks(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	ListTasks(ctx context.Context, in *StackPsRequest, opts ...grpc.CallOption) (*StackReply, error)
	Remove(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	Services(ctx context.Context, in *StackServicesRequest, opts ...grpc.CallOption) (*StackReply, error)
	GetStackStatus(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	GetImages(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackImagesReply, error)
	PullImage(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
}

type stackServiceClient struct {
	cc *grpc.ClientConn
}

func NewStackServiceClient(cc *grpc.ClientConn) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) Deploy(ctx context.Context, in *StackDeployRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateFile(ctx context.Context, in *StackUpdateRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/UpdateFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) RestoreFile(ctx context.Context, in *StackRestoreRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/RestoreFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Monitor(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackMonitorReply, error) {
	out := new(StackMonitorReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Monitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListStacks(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/ListStacks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListTasks(ctx context.Context, in *StackPsRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/ListTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Remove(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Services(ctx context.Context, in *StackServicesRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Services", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) GetStackStatus(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/GetStackStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) GetImages(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackImagesReply, error) {
	out := new(StackImagesReply)
	err := grpc.Invoke(ctx, "/stack.StackService/GetImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) PullImage(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/PullImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StackService service

type StackServiceServer interface {
	Deploy(context.Context, *StackDeployRequest) (*StackReply, error)
	UpdateFile(context.Context, *StackUpdateRequest) (*StackReply, error)
	RestoreFile(context.Context, *StackRestoreRequest) (*StackReply, error)
	Monitor(context.Context, *StackRequest) (*StackMonitorReply, error)
	ListStacks(context.Context, *StackRequest) (*StackReply, error)
	ListTasks(context.Context, *StackPsRequest) (*StackReply, error)
	Remove(context.Context, *StackRequest) (*StackReply, error)
	Services(context.Context, *StackServicesRequest) (*StackReply, error)
	GetStackStatus(context.Context, *StackRequest) (*StackReply, error)
	GetImages(context.Context, *StackRequest) (*StackImagesReply, error)
	PullImage(context.Context, *StackRequest) (*StackReply, error)
}

func RegisterStackServiceServer(s *grpc.Server, srv StackServiceServer) {
	s.RegisterService(&_StackService_serviceDesc, srv)
}

func _StackService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Deploy(ctx, req.(*StackDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateFile(ctx, req.(*StackUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_RestoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).RestoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/RestoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).RestoreFile(ctx, req.(*StackRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Monitor(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/ListStacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListStacks(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListTasks(ctx, req.(*StackPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Remove(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Services_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Services(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Services",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Services(ctx, req.(*StackServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_GetStackStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).GetStackStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/GetStackStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).GetStackStatus(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_GetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).GetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/GetImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).GetImages(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/PullImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).PullImage(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stack.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _StackService_Deploy_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _StackService_UpdateFile_Handler,
		},
		{
			MethodName: "RestoreFile",
			Handler:    _StackService_RestoreFile_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _StackService_Monitor_Handler,
		},
		{
			MethodName: "ListStacks",
			Handler:    _StackService_ListStacks_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _StackService_ListTasks_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _StackService_Remove_Handler,
		},
		{
			MethodName: "Services",
			Handler:    _StackService_Services_Handler,
		},
		{
			MethodName: "GetStackStatus",
			Handler:    _StackService_GetStackStatus_Handler,
		},
		{
			MethodName: "GetImages",
			Handler:    _StackService_GetImages_Handler,
		},
		{
			MethodName: "PullImage",
			Handler:    _StackService_PullImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/stack/stack.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/stack/stack.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x96, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0xc7, 0x95, 0xb4, 0xf9, 0x98, 0x93, 0x12, 0xb5, 0xee, 0xd7, 0x24, 0xfd, 0xa0, 0x6b, 0x90,
	0xa8, 0x8a, 0x94, 0x88, 0x22, 0x10, 0xec, 0x15, 0x48, 0x0b, 0x2b, 0x50, 0xb7, 0x5a, 0x4d, 0xba,
	0x12, 0x5c, 0xac, 0x22, 0x77, 0xe2, 0xa6, 0x56, 0x3d, 0xe3, 0xd9, 0xb1, 0x27, 0x28, 0x42, 0x5c,
	0xc0, 0x2b, 0xf0, 0x16, 0x3c, 0x01, 0xcf, 0x01, 0xaf, 0xc0, 0x83, 0xa0, 0x39, 0xf6, 0x24, 0x93,
	0xed, 0xec, 0x2a, 0x37, 0xd1, 0x9c, 0xe3, 0xe3, 0xdf, 0x39, 0x3e, 0xc7, 0x7f, 0xb7, 0xf0, 0xc5,
	0x54, 0x98, 0xfb, 0xec, 0x76, 0x10, 0xaa, 0x68, 0xc8, 0x92, 0x24, 0xe4, 0x92, 0xa7, 0xcc, 0xa8,
	0x74, 0xc8, 0xa2, 0x64, 0xc8, 0x12, 0x31, 0x4c, 0x93, 0x70, 0xa8, 0x0d, 0x0b, 0x1f, 0xec, 0xef,
	0x20, 0x49, 0x95, 0x51, 0xa4, 0x81, 0x46, 0xff, 0x78, 0xaa, 0xd4, 0x54, 0x72, 0x0c, 0x64, 0x71,
	0xac, 0x0c, 0x33, 0x42, 0xc5, 0xda, 0x06, 0xd1, 0xdf, 0x6b, 0xd0, 0x18, 0xe5, 0x71, 0x84, 0xc0,
	0x66, 0xcc, 0x22, 0xee, 0xd7, 0xce, 0x6a, 0xe7, 0x5e, 0x80, 0xdf, 0xe4, 0x08, 0xbc, 0x3b, 0x21,
	0xf9, 0x78, 0xc2, 0x0c, 0xf3, 0x37, 0x70, 0xa1, 0x9d, 0x3b, 0x9e, 0x31, 0xc3, 0xc8, 0x00, 0xda,
	0x9a, 0xa7, 0x33, 0x11, 0x72, 0xed, 0x6f, 0x9e, 0x6d, 0x9c, 0x77, 0x2e, 0xc9, 0xc0, 0xe6, 0x1f,
	0x59, 0xf7, 0x28, 0xe1, 0x61, 0xb0, 0x88, 0x21, 0x87, 0xd0, 0x62, 0x51, 0x32, 0x36, 0x6c, 0xea,
	0x37, 0x10, 0xd5, 0x64, 0x51, 0x72, 0xc3, 0xa6, 0xf4, 0xaf, 0x1a, 0x74, 0x4a, 0x5b, 0x2a, 0x2b,
	0xd9, 0x83, 0x86, 0x88, 0xd8, 0x94, 0xfb, 0x75, 0x74, 0x5a, 0x83, 0x7c, 0x09, 0x4d, 0xc9, 0x6e,
	0xb9, 0xd4, 0xfe, 0x06, 0x16, 0x70, 0xfa, 0xb8, 0x80, 0xc1, 0x15, 0x06, 0x7c, 0x17, 0x9b, 0x74,
	0x1e, 0xb8, 0xe8, 0xfe, 0xd7, 0xd0, 0x29, 0xb9, 0xc9, 0x36, 0x6c, 0x3c, 0xf0, 0xb9, 0xcb, 0x97,
	0x7f, 0xe6, 0xe9, 0x66, 0x4c, 0x66, 0x8b, 0x74, 0x68, 0x3c, 0xad, 0x7f, 0x55, 0xa3, 0xaf, 0x81,
	0x60, 0xbf, 0x9e, 0xf1, 0x44, 0xaa, 0x79, 0xc0, 0xdf, 0x64, 0x5c, 0x1b, 0x42, 0xc1, 0x76, 0x1b,
	0x19, 0x9d, 0xcb, 0xad, 0xa2, 0x8e, 0xfc, 0x37, 0xb0, 0x4b, 0xe4, 0x23, 0xf8, 0x20, 0xe5, 0x53,
	0xa1, 0x4d, 0x3a, 0x1f, 0xb3, 0xcc, 0xdc, 0x23, 0xbb, 0x1d, 0x6c, 0x15, 0xce, 0x6f, 0x33, 0x73,
	0x4f, 0xaf, 0x1d, 0xfe, 0x55, 0x32, 0x61, 0x86, 0x17, 0xf8, 0x62, 0x0e, 0xa5, 0xb6, 0xe0, 0x1c,
	0xae, 0x1f, 0x0d, 0xa9, 0xbe, 0x3a, 0x24, 0x7a, 0x09, 0xbb, 0xb6, 0x08, 0xae, 0x8d, 0x4a, 0xd7,
	0x02, 0xd2, 0x19, 0x74, 0x71, 0xcf, 0x4b, 0x5d, 0x84, 0x57, 0x4d, 0xa4, 0x07, 0xed, 0x58, 0x8d,
	0x4d, 0x9a, 0xc5, 0xa1, 0x3b, 0x49, 0x2b, 0x56, 0x37, 0xb9, 0x49, 0x4e, 0x00, 0x62, 0x35, 0x4e,
	0xb9, 0x56, 0x72, 0xc6, 0xf1, 0xde, 0xb4, 0x03, 0x2f, 0x56, 0x81, 0x75, 0x90, 0x03, 0x68, 0xde,
	0x09, 0x69, 0x78, 0xea, 0x6f, 0xda, 0x7b, 0x60, 0x2d, 0xfa, 0x13, 0xec, 0x61, 0x5e, 0x37, 0xbd,
	0xf7, 0x66, 0xdf, 0x83, 0xc6, 0x9b, 0x4c, 0x70, 0xe3, 0xe8, 0xd6, 0x78, 0x27, 0x99, 0xc2, 0x96,
	0xeb, 0xc2, 0x3b, 0x89, 0xf4, 0x63, 0x00, 0x17, 0x93, 0xc8, 0x79, 0x4e, 0x62, 0xb1, 0xfe, 0x85,
	0xa7, 0x2e, 0xc6, 0x59, 0xf4, 0xef, 0x1a, 0x74, 0x5f, 0xa8, 0x58, 0x18, 0x95, 0xba, 0x32, 0xf3,
	0x52, 0x96, 0xb3, 0xf7, 0x8a, 0x69, 0x77, 0xa1, 0x2e, 0x26, 0x6e, 0x1c, 0x75, 0x31, 0x21, 0x3e,
	0xb4, 0x9c, 0x12, 0x9c, 0x90, 0x0a, 0x33, 0x4f, 0xa5, 0x0d, 0x33, 0x99, 0x2e, 0x8a, 0xb6, 0x56,
	0x5e, 0x64, 0xa4, 0x26, 0xdc, 0x89, 0x05, 0xbf, 0x49, 0x1f, 0xda, 0x29, 0x4f, 0xa4, 0x08, 0x99,
	0xf6, 0x9b, 0x76, 0x6c, 0x85, 0x4d, 0x4e, 0x01, 0xee, 0x98, 0x90, 0x7c, 0x72, 0xc3, 0xf4, 0x83,
	0xdf, 0xc2, 0xd5, 0x92, 0x87, 0x7e, 0x03, 0x3b, 0x78, 0x40, 0x57, 0xbe, 0x3d, 0xe7, 0xa7, 0xd0,
	0x90, 0x22, 0xe6, 0xda, 0xaf, 0xa1, 0x80, 0xf6, 0xdd, 0xc5, 0x5d, 0x3d, 0x62, 0x60, 0x63, 0xe8,
	0x05, 0x6c, 0x23, 0xe1, 0x87, 0x5c, 0x7c, 0x7a, 0xd1, 0x28, 0xd4, 0xa2, 0x25, 0x78, 0x81, 0xb3,
	0xe8, 0xbd, 0x6b, 0xf9, 0x0b, 0x96, 0x24, 0x22, 0x9e, 0x92, 0x63, 0xf0, 0x10, 0x7d, 0xbd, 0xec,
	0xfb, 0xd2, 0x41, 0xce, 0xa0, 0xe3, 0xda, 0x81, 0xeb, 0xb6, 0x6d, 0x65, 0x57, 0xde, 0xbf, 0xc8,
	0xa2, 0x8a, 0xfe, 0x39, 0xf3, 0xf2, 0x9f, 0x96, 0x4b, 0x55, 0x0c, 0xe4, 0x0a, 0x9a, 0x56, 0x9d,
	0xa4, 0x57, 0xd6, 0xe1, 0x8a, 0x62, 0xfb, 0x3b, 0x2b, 0x12, 0xcd, 0x8f, 0x42, 0xf7, 0xfe, 0xf8,
	0xf7, 0xbf, 0x3f, 0xeb, 0x5d, 0xea, 0x0d, 0x67, 0x9f, 0xd9, 0x97, 0xf4, 0x69, 0xed, 0x82, 0x84,
	0x00, 0x56, 0x8c, 0xdf, 0x0b, 0xc9, 0x57, 0x89, 0x2b, 0x22, 0xad, 0x22, 0x7e, 0x82, 0xc4, 0x27,
	0xf4, 0x78, 0x41, 0x1c, 0xfe, 0xba, 0xd0, 0xdd, 0x6f, 0xc3, 0x0c, 0xf7, 0xe7, 0x49, 0xee, 0xa0,
	0xe3, 0x14, 0x8a, 0x59, 0xfa, 0xab, 0xa8, 0xb2, 0x74, 0xab, 0xd2, 0x9c, 0x63, 0x1a, 0x4a, 0x4f,
	0xaa, 0xd3, 0xa4, 0x16, 0x90, 0xe7, 0x19, 0x41, 0xcb, 0x8d, 0x96, 0xec, 0xae, 0x72, 0x2c, 0xdc,
	0x2f, 0x3b, 0xcb, 0x17, 0x85, 0xf6, 0x30, 0xc7, 0x2e, 0xd9, 0x59, 0xe6, 0x88, 0x1c, 0xe9, 0x0a,
	0xe0, 0x4a, 0x68, 0x83, 0x7b, 0x74, 0x35, 0xb7, 0xa2, 0xe8, 0x03, 0x04, 0x6e, 0x93, 0xee, 0x12,
	0x28, 0x85, 0x36, 0xe4, 0x15, 0x78, 0x39, 0x2d, 0xbf, 0xb2, 0x9a, 0xec, 0x97, 0xf7, 0x2d, 0xde,
	0xa3, 0x2a, 0xdc, 0x29, 0xe2, 0x7c, 0x72, 0x50, 0xea, 0x81, 0x3d, 0xbe, 0x41, 0xd2, 0x8f, 0xd0,
	0x0c, 0x78, 0xa4, 0x66, 0x7c, 0xed, 0x02, 0x7d, 0x24, 0x92, 0x8b, 0xed, 0xb7, 0x89, 0xe4, 0x35,
	0xb4, 0x8b, 0x37, 0x8a, 0x1c, 0x95, 0x37, 0xbe, 0xf5, 0x72, 0x55, 0x51, 0x9f, 0x20, 0xf5, 0x88,
	0xf4, 0x1e, 0xd5, 0xb9, 0xf8, 0x43, 0xf9, 0x33, 0x74, 0x9f, 0x73, 0xdb, 0xce, 0x91, 0x7d, 0x0a,
	0xd6, 0x2d, 0xf9, 0x43, 0x84, 0xf7, 0xc8, 0xe1, 0x12, 0x6e, 0x1f, 0x93, 0xa2, 0xf2, 0x11, 0x78,
	0xcf, 0xb9, 0xb1, 0xfa, 0xad, 0xa6, 0x1e, 0x96, 0x9d, 0x25, 0xa1, 0x17, 0xed, 0x20, 0xa5, 0x76,
	0x58, 0xa9, 0x93, 0x00, 0xbc, 0x97, 0x99, 0x94, 0x18, 0xbc, 0x76, 0xa9, 0x27, 0x88, 0x3b, 0x24,
	0xfb, 0x4b, 0x5c, 0x92, 0x49, 0xe9, 0x0a, 0xbd, 0x6d, 0xe2, 0xbf, 0x27, 0x9f, 0xff, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0x31, 0x68, 0x2e, 0xfc, 0x08, 0x00, 0x00,
}
