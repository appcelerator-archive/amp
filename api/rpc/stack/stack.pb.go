// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/stack/stack.proto
// DO NOT EDIT!

/*
Package stack is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/stack/stack.proto

It has these top-level messages:
	DeployRequest
	DeployReply
	ListRequest
	ListReply
	RemoveRequest
	RemoveReply
*/
package stack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Compose []byte `protobuf:"bytes,2,opt,name=compose,proto3" json:"compose,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeployRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployRequest) GetCompose() []byte {
	if m != nil {
		return m.Compose
	}
	return nil
}

type DeployReply struct {
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
}

func (m *DeployReply) Reset()                    { *m = DeployReply{} }
func (m *DeployReply) String() string            { return proto.CompactTextString(m) }
func (*DeployReply) ProtoMessage()               {}
func (*DeployReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeployReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListReply struct {
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type RemoveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RemoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemoveReply struct {
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
}

func (m *RemoveReply) Reset()                    { *m = RemoveReply{} }
func (m *RemoveReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveReply) ProtoMessage()               {}
func (*RemoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RemoveReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto.RegisterType((*DeployRequest)(nil), "stack.DeployRequest")
	proto.RegisterType((*DeployReply)(nil), "stack.DeployReply")
	proto.RegisterType((*ListRequest)(nil), "stack.ListRequest")
	proto.RegisterType((*ListReply)(nil), "stack.ListReply")
	proto.RegisterType((*RemoveRequest)(nil), "stack.RemoveRequest")
	proto.RegisterType((*RemoveReply)(nil), "stack.RemoveReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stack service

type StackClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
}

type stackClient struct {
	cc *grpc.ClientConn
}

func NewStackClient(cc *grpc.ClientConn) StackClient {
	return &stackClient{cc}
}

func (c *stackClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := grpc.Invoke(ctx, "/stack.Stack/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/stack.Stack/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := grpc.Invoke(ctx, "/stack.Stack/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stack service

type StackServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
}

func RegisterStackServer(s *grpc.Server, srv StackServer) {
	s.RegisterService(&_Stack_serviceDesc, srv)
}

func _Stack_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.Stack/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stack.Stack",
	HandlerType: (*StackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _Stack_Deploy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Stack_List_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Stack_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/stack/stack.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/stack/stack.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x0d, 0xa4, 0xc5, 0x74, 0x2a, 0xc6, 0x6c, 0x8c, 0x21, 0x5c, 0x6c, 0x30, 0x26, 0x3d, 0x18,
	0x36, 0xa1, 0xf1, 0xe8, 0xcd, 0xa3, 0x27, 0xfc, 0x82, 0x85, 0x8e, 0x48, 0x64, 0xd9, 0x91, 0x5d,
	0x34, 0x7c, 0x8c, 0xff, 0x6a, 0x60, 0xa1, 0x01, 0x0f, 0xbd, 0x4c, 0xf6, 0xcd, 0xcc, 0x9b, 0xf7,
	0x66, 0x16, 0x9e, 0x8a, 0xd2, 0x7c, 0xb4, 0x59, 0x9c, 0x2b, 0xc9, 0x05, 0x51, 0x8e, 0x15, 0x36,
	0xc2, 0xa8, 0x86, 0x0b, 0x49, 0x5c, 0x50, 0xc9, 0x1b, 0xca, 0xb9, 0x36, 0x22, 0xff, 0xb4, 0x31,
	0xa6, 0x46, 0x19, 0xc5, 0xd6, 0x03, 0x08, 0x0f, 0x33, 0x76, 0xa1, 0x2a, 0x51, 0x17, 0x7c, 0xa8,
	0x67, 0xed, 0x3b, 0x27, 0xd3, 0x11, 0x6a, 0x8e, 0x92, 0x4c, 0x67, 0xa3, 0xe5, 0x46, 0xcf, 0xe0,
	0xbf, 0x20, 0x55, 0xaa, 0x4b, 0xf1, 0xab, 0x45, 0x6d, 0x18, 0x83, 0x55, 0x2d, 0x24, 0x06, 0xce,
	0xce, 0xd9, 0x6f, 0xd2, 0xe1, 0xcd, 0x02, 0xb8, 0xc8, 0x95, 0x24, 0xa5, 0x31, 0x70, 0x77, 0xce,
	0xfe, 0x32, 0x9d, 0x60, 0xf4, 0x00, 0xdb, 0x89, 0x4e, 0x55, 0xc7, 0x6e, 0xc1, 0x13, 0xb5, 0xfe,
	0xc1, 0x66, 0xa4, 0x8f, 0x28, 0xf2, 0x61, 0xfb, 0x5a, 0x6a, 0x33, 0x6a, 0x44, 0xf7, 0xb0, 0xb1,
	0xf0, 0x1c, 0xe7, 0x0e, 0xfc, 0x14, 0xa5, 0xfa, 0xc6, 0xc9, 0xd9, 0x15, 0xb8, 0xe5, 0x71, 0x6c,
	0x72, 0xcb, 0x63, 0xaf, 0x3d, 0x35, 0x9c, 0x99, 0x93, 0xfc, 0x3a, 0xb0, 0x7e, 0xeb, 0x0f, 0xc4,
	0x12, 0xf0, 0xac, 0x59, 0x76, 0x13, 0xdb, 0xfb, 0x2d, 0x56, 0x0f, 0xd9, 0xbf, 0x6c, 0x3f, 0xf5,
	0x11, 0x56, 0xbd, 0x55, 0x36, 0xd5, 0x66, 0x6b, 0x84, 0xd7, 0x8b, 0x5c, 0xdf, 0x9d, 0x80, 0x67,
	0x2d, 0x9d, 0x14, 0x16, 0x2b, 0x9c, 0x14, 0x66, 0xbe, 0x33, 0x6f, 0xf8, 0x88, 0xc3, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x30, 0xcd, 0xde, 0xe9, 0xfd, 0x01, 0x00, 0x00,
}
