syntax = "proto3";

package stack;

import "google/api/annotations.proto";
import "github.com/appcelerator/amp/api/rpc/service/service.proto";

service StackService {
  rpc Up (StackFileRequest) returns (StackReply) {
    option (google.api.http) = {
      post: "/v1/stack/up",
      body: "*"
    };
  };
  rpc Create (StackFileRequest) returns (StackReply) {
    option (google.api.http) = {
      post: "/v1/stack",
      body: "*"
    };
  };
  rpc Start (StackRequest) returns (StackReply) {
    option (google.api.http) = {
      post: "/v1/stack/{stack_ident}/start"
    };
  };
  rpc Stop (StackRequest) returns (StackReply) {
    option (google.api.http) = {
      post: "/v1/stack/{stack_ident}/stop"
    };
  };
  rpc Remove (RemoveRequest) returns (StackReply) {
    option (google.api.http) = {
      delete: "/v1/stack/{stack_ident}"
    };
  };
  rpc List(ListRequest) returns (ListReply) {
    option (google.api.http) = {
      get: "/v1/stack"
    };
  };
  rpc Tasks(TasksRequest) returns (TasksReply) {
    option (google.api.http) = {
      get: "/v1/stack/{stack_ident}/tasks"
    };
  };
}

// struct for stackfile request
message StackFileRequest {
  Stack stack = 1;
}

// struct stack name/id based requests
message StackRequest {
  string stack_ident = 1;  
}

// struct for remove request function
message RemoveRequest {
  string stack_ident = 1;  
  bool force = 2;
}

// struct for stack id responses
message StackReply {
  string stack_id = 1;
}

// struct for list request function
message ListRequest {
  bool all = 1;
  int64 limit = 2;
}

// struct for list reply function
message ListReply {
  repeated StackInfo list = 1;
}

// struct for tasks request function
message TasksRequest {
  string stack_ident = 1;
}

// struct for tasks reply function
message TasksReply {
  string message = 1;
}

// struct part of ListReply Struct
message StackInfo {
  string name = 1;
  string id = 2;
  string state = 3;
}


// struct to store Stack id in ETCD
message StackID {
  string id = 1;
}


// struct to store network info in ETCD
message CustomNetwork {
  string id = 1;
  int32 owner_number = 2;
  NetworkSpec data = 3;
}

// struct to store service id list in ETCD
message IdList {
  repeated string list = 1;
}

enum StackState {
  Stopped = 0;
  Starting = 1;
  Running = 2;
  Redeploying = 3;
}

message NetworkSpec {
  string name = 1;
  string driver = 2;
  bool enable_ipv6 = 3;
  NetworkIPAM ipam = 4;
  bool internal = 5;
  map<string, string> options = 6;
  map<string, string> labels = 7;
  string external = 8;
}

message NetworkIPAM {
  string driver = 1;
  map<string, string> options = 2;
  repeated NetworkIPAMConfig config = 3;
}

message NetworkIPAMConfig {
  string subnet = 1;
  string ip_range = 2;
  string gateway = 3;
  map<string, string> aux_address =4;
}

// Stack struct 
message Stack {
  string name = 1;
  string id = 2;
  repeated service.ServiceSpec services = 3;
  repeated NetworkSpec networks = 4;
  bool is_public = 5;
}
