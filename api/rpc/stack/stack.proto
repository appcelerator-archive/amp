syntax = "proto3";

package stack;

import "google/api/annotations.proto";


service StackService {
    rpc Deploy (StackDeployRequest) returns (StackReply) {
        option (google.api.http) = {
            post: "/v1/stack",
            body: "*"
        };
    };
    rpc UpdateFile (StackUpdateRequest) returns (StackReply) {
        option (google.api.http) = {
            post: "/v1/stack/{file_name}/update",
            body: "*"
        };
    };
    rpc RestoreFile (StackRestoreRequest) returns (StackReply) {
        option (google.api.http) = {
            post: "/v1/stack/{file_name}/restore",
            body: "*"
        };
    }; 
    rpc Monitor (StackRequest) returns (StackMonitorReply) {
        option (google.api.http) = {
            get: "/v1/stack/monitor"
        };
    };    
    rpc ListStacks (StackRequest) returns (StackReply) {
        option (google.api.http) = {
            get: "/v1/stack/list"
        };
    };
    rpc ListTasks (StackPsRequest) returns (StackReply) {
        option (google.api.http) = {
            get: "/v1/stack/{name}/tasks"
        };
    };
    rpc Remove (StackRequest) returns (StackReply) {
        option (google.api.http) = {
            delete: "/v1/stack/{name}"
        };
    };
    rpc Services (StackServicesRequest) returns (StackReply) {
        option (google.api.http) = {
            get: "/v1/stack/{name}/services"
        };
    };
    rpc GetStackStatus (StackRequest) returns (StackReply) {
        option (google.api.http) = {
            get: "/v1/stack/status/{name}"
        };
    };
    rpc GetImages (StackRequest) returns (StackImagesReply) {
        option (google.api.http) = {
            get: "/v1/stack/images"
        };
    };
    rpc PullImage (StackRequest) returns (StackReply) {
        option (google.api.http) = {
            get: "/v1/stack/pull/{name}"
        };
    };
}


// Stack struct
message Stack {
    string name = 1;
    string file_data = 3;
    repeated ServiceSpec services = 4;
    string amp_tag = 5;
}

// Service spec restrict to amp need
message ServiceSpec {
    string name = 1;
    string image = 2;
    map<string, string> labels = 3;
}

// request struct for Deploy command
message StackDeployRequest {
    Stack stack = 1;
    bool registry_auth = 2;
}

// request struct for UpdateFile command
message StackUpdateRequest {
    string file_name = 1;
    string file_data = 2;
}

// request struct for RestoreFile command
message StackRestoreRequest {
    string file_name = 1;
}

// request struct for Ps command
message StackPsRequest {
    string name = 1;
    bool no_trunc = 2;
    bool no_resolve = 3;
    string filter = 4;
}

// request struct for Services command
message StackServicesRequest {
    string name = 1;
    bool quiet = 3;
    string filter = 4;
}


// request struct for Rm, GetStack and List commands
message StackRequest {
    string name = 1;
}

// struct for stack commands reply
message StackReply {
    string answer = 1;
}

// struct for service in monitor
message MonitorService {
    string stack = 1;
    string id = 2;
    string service = 3;
    string status = 4;
    string mode = 5;
    string replicas = 6;
    string failedTask = 7;
}

// struct for reply Monitor
message StackMonitorReply {
    repeated MonitorService lines = 1;
}

// struct for reply getImages
message StackImagesReply {
    repeated string images = 1;
}

// stack to store mapping in etcd
message StackMapping {
    string stackName = 1;
    string serviceName = 2;
    string mapping = 3;
}