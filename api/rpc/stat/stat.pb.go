// Code generated by protoc-gen-go.
// source: stat.proto
// DO NOT EDIT!

/*
Package stat is a generated protocol buffer package.

It is generated from these files:
	stat.proto

It has these top-level messages:
	QueryRequest
	QueryReply
	GetCPURequest
	QueryContext
	GetCPUReply
	CPUByContainer
*/
package stat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryRequest struct {
	Database string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Query    string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QueryReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (m *QueryReply) String() string            { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetCPURequest struct {
	Containername string        `protobuf:"bytes,1,opt,name=containername" json:"containername,omitempty"`
	Datacenter    string        `protobuf:"bytes,2,opt,name=datacenter" json:"datacenter,omitempty"`
	Ctx           *QueryContext `protobuf:"bytes,3,opt,name=ctx" json:"ctx,omitempty"`
}

func (m *GetCPURequest) Reset()                    { *m = GetCPURequest{} }
func (m *GetCPURequest) String() string            { return proto.CompactTextString(m) }
func (*GetCPURequest) ProtoMessage()               {}
func (*GetCPURequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetCPURequest) GetCtx() *QueryContext {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type QueryContext struct {
	Interval string `protobuf:"bytes,3,opt,name=interval" json:"interval,omitempty"`
	Limit    int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Epoch    int32  `protobuf:"varint,6,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *QueryContext) Reset()                    { *m = QueryContext{} }
func (m *QueryContext) String() string            { return proto.CompactTextString(m) }
func (*QueryContext) ProtoMessage()               {}
func (*QueryContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetCPUReply struct {
	Cpus []*CPUByContainer `protobuf:"bytes,1,rep,name=cpus" json:"cpus,omitempty"`
}

func (m *GetCPUReply) Reset()                    { *m = GetCPUReply{} }
func (m *GetCPUReply) String() string            { return proto.CompactTextString(m) }
func (*GetCPUReply) ProtoMessage()               {}
func (*GetCPUReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetCPUReply) GetCpus() []*CPUByContainer {
	if m != nil {
		return m.Cpus
	}
	return nil
}

type CPUByContainer struct {
	Containerimage string `protobuf:"bytes,1,opt,name=containerimage" json:"containerimage,omitempty"`
	Containername  string `protobuf:"bytes,2,opt,name=containername" json:"containername,omitempty"`
	Datacenter     string `protobuf:"bytes,3,opt,name=datacenter" json:"datacenter,omitempty"`
	Time           string `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
	Cpupct         string `protobuf:"bytes,5,opt,name=cpupct" json:"cpupct,omitempty"`
}

func (m *CPUByContainer) Reset()                    { *m = CPUByContainer{} }
func (m *CPUByContainer) String() string            { return proto.CompactTextString(m) }
func (*CPUByContainer) ProtoMessage()               {}
func (*CPUByContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*QueryRequest)(nil), "stat.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "stat.QueryReply")
	proto.RegisterType((*GetCPURequest)(nil), "stat.GetCPURequest")
	proto.RegisterType((*QueryContext)(nil), "stat.QueryContext")
	proto.RegisterType((*GetCPUReply)(nil), "stat.GetCPUReply")
	proto.RegisterType((*CPUByContainer)(nil), "stat.CPUByContainer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Stat service

type StatClient interface {
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	GetCpuByContainer(ctx context.Context, in *GetCPURequest, opts ...grpc.CallOption) (*GetCPUReply, error)
}

type statClient struct {
	cc *grpc.ClientConn
}

func NewStatClient(cc *grpc.ClientConn) StatClient {
	return &statClient{cc}
}

func (c *statClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := grpc.Invoke(ctx, "/stat.Stat/ExecuteQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statClient) GetCpuByContainer(ctx context.Context, in *GetCPURequest, opts ...grpc.CallOption) (*GetCPUReply, error) {
	out := new(GetCPUReply)
	err := grpc.Invoke(ctx, "/stat.Stat/GetCpuByContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stat service

type StatServer interface {
	ExecuteQuery(context.Context, *QueryRequest) (*QueryReply, error)
	GetCpuByContainer(context.Context, *GetCPURequest) (*GetCPUReply, error)
}

func RegisterStatServer(s *grpc.Server, srv StatServer) {
	s.RegisterService(&_Stat_serviceDesc, srv)
}

func _Stat_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stat_GetCpuByContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).GetCpuByContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/GetCpuByContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).GetCpuByContainer(ctx, req.(*GetCPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stat.Stat",
	HandlerType: (*StatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _Stat_ExecuteQuery_Handler,
		},
		{
			MethodName: "GetCpuByContainer",
			Handler:    _Stat_GetCpuByContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("stat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6b, 0xe3, 0x30,
	0x14, 0x5c, 0xc7, 0x4e, 0x58, 0xbf, 0x7c, 0xb0, 0xd1, 0x86, 0xc5, 0xe4, 0xb0, 0x18, 0x13, 0x16,
	0x9f, 0x72, 0xc8, 0x42, 0x7b, 0x2a, 0x94, 0x86, 0xd2, 0x6b, 0xaa, 0x92, 0x1f, 0xa0, 0xa8, 0x2f,
	0xad, 0xc1, 0x1f, 0x8a, 0xfd, 0x5c, 0x12, 0x4a, 0xff, 0x50, 0x7f, 0x65, 0x91, 0x6c, 0xa7, 0x71,
	0x73, 0xe8, 0xcd, 0x33, 0xef, 0x8d, 0x35, 0x33, 0x12, 0x40, 0x41, 0x82, 0xe6, 0x2a, 0xcf, 0x28,
	0x63, 0x8e, 0xfe, 0x0e, 0xae, 0x61, 0x70, 0x5f, 0x62, 0x7e, 0xe0, 0xb8, 0x2b, 0xb1, 0x20, 0x36,
	0x85, 0x9f, 0x8f, 0x82, 0xc4, 0x46, 0x14, 0xe8, 0x59, 0xbe, 0x15, 0xba, 0xfc, 0x88, 0xd9, 0x04,
	0xba, 0x3b, 0xbd, 0xeb, 0x75, 0xcc, 0xa0, 0x02, 0x41, 0x08, 0x50, 0xff, 0x41, 0xc5, 0x07, 0xad,
	0xcf, 0xb1, 0x50, 0x59, 0xfa, 0xa9, 0x6f, 0x70, 0xf0, 0x0a, 0xc3, 0x3b, 0xa4, 0xe5, 0x6a, 0xdd,
	0x1c, 0x36, 0x83, 0xa1, 0xcc, 0x52, 0x12, 0x51, 0x8a, 0x79, 0x2a, 0x92, 0x46, 0xd1, 0x26, 0xd9,
	0x5f, 0x00, 0x6d, 0x41, 0x62, 0x4a, 0x98, 0xd7, 0x67, 0x9f, 0x30, 0x6c, 0x06, 0xb6, 0xa4, 0xbd,
	0x67, 0xfb, 0x56, 0xd8, 0x5f, 0xb0, 0xb9, 0x89, 0x68, 0x1c, 0x2d, 0xb3, 0x94, 0x70, 0x4f, 0x5c,
	0x8f, 0x83, 0xb4, 0x0e, 0x5a, 0x93, 0xda, 0x68, 0xa4, 0xe5, 0x2f, 0x22, 0x36, 0x52, 0x97, 0x1f,
	0xb1, 0x0e, 0x1a, 0x47, 0x49, 0x44, 0x9e, 0xe3, 0x5b, 0x61, 0x97, 0x57, 0x80, 0xfd, 0x81, 0x5e,
	0xb6, 0xdd, 0x16, 0x48, 0x5e, 0xd7, 0xd0, 0x35, 0xd2, 0xdb, 0xa8, 0x32, 0xf9, 0xec, 0xf5, 0xaa,
	0x6d, 0x03, 0x82, 0x4b, 0xe8, 0x37, 0x61, 0x75, 0x2f, 0x21, 0x38, 0x52, 0x95, 0x85, 0x67, 0xf9,
	0x76, 0xd8, 0x5f, 0x4c, 0x2a, 0x97, 0xcb, 0xd5, 0xfa, 0xc6, 0x18, 0x32, 0x61, 0xb9, 0xd9, 0x08,
	0xde, 0x2d, 0x18, 0xb5, 0x07, 0xec, 0x1f, 0x8c, 0x8e, 0x95, 0x44, 0x89, 0x78, 0x6a, 0x8a, 0xfa,
	0xc2, 0x9e, 0xf7, 0xd9, 0xf9, 0xbe, 0x4f, 0xfb, 0xac, 0x4f, 0x06, 0x0e, 0x45, 0x09, 0x9a, 0xf0,
	0x2e, 0x37, 0xdf, 0x3a, 0xbb, 0x54, 0xa5, 0x92, 0x55, 0x76, 0x97, 0xd7, 0x68, 0xf1, 0x06, 0xce,
	0x03, 0x09, 0x62, 0x17, 0x30, 0xb8, 0xdd, 0xa3, 0x2c, 0x09, 0x4d, 0xc9, 0xec, 0xf4, 0x1a, 0xea,
	0xdb, 0x9e, 0xfe, 0x6a, 0x71, 0x2a, 0x3e, 0x04, 0x3f, 0xd8, 0x15, 0x8c, 0x75, 0x4b, 0xaa, 0x3c,
	0x8d, 0xfb, 0xbb, 0x5a, 0x6c, 0xbd, 0x95, 0xe9, 0xb8, 0x4d, 0x1a, 0xf9, 0xa6, 0x67, 0x9e, 0xf2,
	0xff, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x50, 0x3a, 0x27, 0xd8, 0x02, 0x00, 0x00,
}
