// Code generated by protoc-gen-go.
// source: stat.proto
// DO NOT EDIT!

/*
Package stat is a generated protocol buffer package.

It is generated from these files:
	stat.proto

It has these top-level messages:
	StatRequest
	StatEntry
	StatReply
*/
package stat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatRequest struct {
	StatCpu              bool   `protobuf:"varint,1,opt,name=stat_cpu,json=statCpu" json:"stat_cpu,omitempty"`
	StatMem              bool   `protobuf:"varint,2,opt,name=stat_mem,json=statMem" json:"stat_mem,omitempty"`
	StatIo               bool   `protobuf:"varint,3,opt,name=stat_io,json=statIo" json:"stat_io,omitempty"`
	StatNet              bool   `protobuf:"varint,4,opt,name=stat_net,json=statNet" json:"stat_net,omitempty"`
	Discriminator        string `protobuf:"bytes,5,opt,name=discriminator" json:"discriminator,omitempty"`
	FilterDatacenter     string `protobuf:"bytes,6,opt,name=filter_datacenter,json=filterDatacenter" json:"filter_datacenter,omitempty"`
	FilterHost           string `protobuf:"bytes,7,opt,name=filter_host,json=filterHost" json:"filter_host,omitempty"`
	FilterContainerId    string `protobuf:"bytes,8,opt,name=filter_container_id,json=filterContainerId" json:"filter_container_id,omitempty"`
	FilterContainerName  string `protobuf:"bytes,9,opt,name=filter_container_name,json=filterContainerName" json:"filter_container_name,omitempty"`
	FilterContainerImage string `protobuf:"bytes,10,opt,name=filter_container_image,json=filterContainerImage" json:"filter_container_image,omitempty"`
	FilterServiceId      string `protobuf:"bytes,11,opt,name=filter_service_id,json=filterServiceId" json:"filter_service_id,omitempty"`
	FilterServiceName    string `protobuf:"bytes,12,opt,name=filter_service_name,json=filterServiceName" json:"filter_service_name,omitempty"`
	FilterTaskId         string `protobuf:"bytes,13,opt,name=filter_task_id,json=filterTaskId" json:"filter_task_id,omitempty"`
	FilterTaskName       string `protobuf:"bytes,14,opt,name=filter_task_name,json=filterTaskName" json:"filter_task_name,omitempty"`
	FilterNodeId         string `protobuf:"bytes,15,opt,name=filter_node_id,json=filterNodeId" json:"filter_node_id,omitempty"`
	Since                string `protobuf:"bytes,16,opt,name=since" json:"since,omitempty"`
	Until                string `protobuf:"bytes,17,opt,name=until" json:"until,omitempty"`
	Period               string `protobuf:"bytes,18,opt,name=period" json:"period,omitempty"`
	TimeGroup            string `protobuf:"bytes,19,opt,name=time_group,json=timeGroup" json:"time_group,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatEntry struct {
	// Common data
	Time           int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Datacenter     string `protobuf:"bytes,2,opt,name=datacenter" json:"datacenter,omitempty"`
	Host           string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	ContainerId    string `protobuf:"bytes,4,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ContainerName  string `protobuf:"bytes,5,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	ContainerImage string `protobuf:"bytes,6,opt,name=container_image,json=containerImage" json:"container_image,omitempty"`
	ServiceId      string `protobuf:"bytes,7,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	ServiceName    string `protobuf:"bytes,8,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	TaskId         string `protobuf:"bytes,9,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	TaskName       string `protobuf:"bytes,10,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	NodeId         string `protobuf:"bytes,11,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Type           string `protobuf:"bytes,12,opt,name=type" json:"type,omitempty"`
	// CPU Metrics fields
	Number     float64 `protobuf:"fixed64,13,opt,name=number" json:"number,omitempty"`
	Cpu        float64 `protobuf:"fixed64,14,opt,name=cpu" json:"cpu,omitempty"`
	Mem        float64 `protobuf:"fixed64,15,opt,name=mem" json:"mem,omitempty"`
	MemUsage   float64 `protobuf:"fixed64,16,opt,name=mem_usage,json=memUsage" json:"mem_usage,omitempty"`
	MemLimit   float64 `protobuf:"fixed64,17,opt,name=mem_limit,json=memLimit" json:"mem_limit,omitempty"`
	IoRead     float64 `protobuf:"fixed64,18,opt,name=io_read,json=ioRead" json:"io_read,omitempty"`
	IoWrite    float64 `protobuf:"fixed64,19,opt,name=io_write,json=ioWrite" json:"io_write,omitempty"`
	NetTxBytes float64 `protobuf:"fixed64,20,opt,name=net_tx_bytes,json=netTxBytes" json:"net_tx_bytes,omitempty"`
	NetRxBytes float64 `protobuf:"fixed64,21,opt,name=net_rx_bytes,json=netRxBytes" json:"net_rx_bytes,omitempty"`
}

func (m *StatEntry) Reset()                    { *m = StatEntry{} }
func (m *StatEntry) String() string            { return proto.CompactTextString(m) }
func (*StatEntry) ProtoMessage()               {}
func (*StatEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatReply struct {
	Entries []*StatEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *StatReply) Reset()                    { *m = StatReply{} }
func (m *StatReply) String() string            { return proto.CompactTextString(m) }
func (*StatReply) ProtoMessage()               {}
func (*StatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatReply) GetEntries() []*StatEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*StatRequest)(nil), "stat.StatRequest")
	proto.RegisterType((*StatEntry)(nil), "stat.StatEntry")
	proto.RegisterType((*StatReply)(nil), "stat.StatReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Stat service

type StatClient interface {
	StatQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
}

type statClient struct {
	cc *grpc.ClientConn
}

func NewStatClient(cc *grpc.ClientConn) StatClient {
	return &statClient{cc}
}

func (c *statClient) StatQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := grpc.Invoke(ctx, "/stat.Stat/StatQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stat service

type StatServer interface {
	StatQuery(context.Context, *StatRequest) (*StatReply, error)
}

func RegisterStatServer(s *grpc.Server, srv StatServer) {
	s.RegisterService(&_Stat_serviceDesc, srv)
}

func _Stat_StatQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).StatQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/StatQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).StatQuery(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stat.Stat",
	HandlerType: (*StatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatQuery",
			Handler:    _Stat_StatQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("stat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x54, 0x6d, 0x6f, 0xd3, 0x3c,
	0x14, 0x55, 0xd7, 0xae, 0x2f, 0xb7, 0x5d, 0xdb, 0x79, 0x6f, 0x7e, 0x1e, 0x34, 0xe8, 0xa6, 0x21,
	0x0a, 0x48, 0x43, 0x1a, 0x08, 0xbe, 0x33, 0x10, 0x54, 0x82, 0x49, 0x64, 0x43, 0x7c, 0x8c, 0xb2,
	0xe4, 0x32, 0xac, 0xd5, 0x76, 0x70, 0x1c, 0x58, 0xff, 0x1a, 0xff, 0x84, 0x7f, 0x83, 0x7c, 0x9d,
	0x34, 0x69, 0xf7, 0xcd, 0xf7, 0x9c, 0x73, 0x9d, 0xeb, 0x9c, 0xa3, 0x0b, 0x90, 0xd9, 0xc8, 0x9e,
	0xa6, 0x46, 0x5b, 0xcd, 0x5a, 0xee, 0x7c, 0xfc, 0x67, 0x13, 0xfa, 0x97, 0x36, 0xb2, 0x01, 0xfe,
	0xcc, 0x31, 0xb3, 0xec, 0x3f, 0xe8, 0x3a, 0x3c, 0x8c, 0xd3, 0x9c, 0x37, 0x26, 0x8d, 0x69, 0x37,
	0xe8, 0xb8, 0xfa, 0x3c, 0xcd, 0x97, 0x94, 0x44, 0xc9, 0x37, 0x2a, 0xea, 0x33, 0x4a, 0x76, 0x00,
	0x74, 0x0c, 0x85, 0xe6, 0x4d, 0x62, 0xda, 0xae, 0x9c, 0xe9, 0x65, 0x8f, 0x42, 0xcb, 0x5b, 0x55,
	0xcf, 0x05, 0x5a, 0x76, 0x02, 0x5b, 0x89, 0xc8, 0x62, 0x23, 0xa4, 0x50, 0x91, 0xd5, 0x86, 0x6f,
	0x4e, 0x1a, 0xd3, 0x5e, 0xb0, 0x0a, 0xb2, 0xe7, 0xb0, 0xfd, 0x5d, 0xcc, 0x2d, 0x9a, 0x30, 0x89,
	0x6c, 0x14, 0xa3, 0xb2, 0x68, 0x78, 0x9b, 0x94, 0x63, 0x4f, 0xbc, 0x5b, 0xe2, 0xec, 0x11, 0xf4,
	0x0b, 0xf1, 0x0f, 0x9d, 0x59, 0xde, 0x21, 0x19, 0x78, 0xe8, 0xa3, 0xce, 0x2c, 0x3b, 0x85, 0x9d,
	0x42, 0x10, 0x6b, 0x65, 0x23, 0xa1, 0xd0, 0x84, 0x22, 0xe1, 0x5d, 0x12, 0x16, 0x1f, 0x3a, 0x2f,
	0x99, 0x59, 0xc2, 0xce, 0x60, 0xef, 0x9e, 0x5e, 0x45, 0x12, 0x79, 0x8f, 0x3a, 0x76, 0xd6, 0x3a,
	0x2e, 0x22, 0x89, 0xec, 0x15, 0xec, 0xdf, 0xff, 0x86, 0x8c, 0x6e, 0x90, 0x03, 0x35, 0xed, 0xae,
	0x7f, 0xc6, 0x71, 0xec, 0xd9, 0xf2, 0x9d, 0x19, 0x9a, 0x5f, 0x22, 0x46, 0x37, 0x57, 0x9f, 0x1a,
	0x46, 0x9e, 0xb8, 0xf4, 0xf8, 0x2c, 0xa9, 0xbd, 0xa2, 0xd4, 0xd2, 0x4c, 0x83, 0xfa, 0x2b, 0x0a,
	0x35, 0x4d, 0x74, 0x02, 0xc3, 0x42, 0x6f, 0xa3, 0xec, 0xd6, 0x5d, 0xbc, 0x45, 0xd2, 0x81, 0x47,
	0xaf, 0xa2, 0xec, 0x76, 0x96, 0xb0, 0x29, 0x8c, 0xeb, 0x2a, 0xba, 0x72, 0x48, 0xba, 0x61, 0xa5,
	0x5b, 0xbb, 0x4f, 0xe9, 0x84, 0x06, 0x1d, 0xd5, 0xef, 0xbb, 0xd0, 0x89, 0x9b, 0x72, 0x17, 0x36,
	0x33, 0xa1, 0x62, 0xe4, 0x63, 0x22, 0x7d, 0xe1, 0xd0, 0x5c, 0x59, 0x31, 0xe7, 0xdb, 0x1e, 0xa5,
	0x82, 0xed, 0x43, 0x3b, 0x45, 0x23, 0x74, 0xc2, 0x19, 0xc1, 0x45, 0xc5, 0x0e, 0x01, 0xac, 0x90,
	0x18, 0xde, 0x18, 0x9d, 0xa7, 0x7c, 0x87, 0xb8, 0x9e, 0x43, 0x3e, 0x38, 0xe0, 0xf8, 0x6f, 0x0b,
	0x7a, 0x2e, 0xbc, 0xef, 0x95, 0x35, 0x0b, 0xc6, 0xa0, 0xe5, 0x28, 0x8a, 0x6d, 0x33, 0xa0, 0x33,
	0x7b, 0x08, 0x50, 0xcb, 0xcd, 0x86, 0x0f, 0x44, 0x85, 0xb8, 0x1e, 0x8a, 0x4a, 0x93, 0x18, 0x3a,
	0xb3, 0x23, 0x18, 0xac, 0xa4, 0xa3, 0x45, 0x5c, 0x3f, 0xae, 0xe5, 0xe2, 0x31, 0x0c, 0xd7, 0x02,
	0x51, 0x84, 0x37, 0x5e, 0x89, 0xc2, 0x13, 0x18, 0xad, 0x67, 0xc0, 0x47, 0xb7, 0xea, 0xf6, 0xee,
	0x1f, 0x02, 0xd4, 0x6c, 0xf7, 0xb9, 0xed, 0x65, 0x4b, 0xc3, 0x8f, 0x60, 0xb0, 0xe2, 0xb4, 0xcf,
	0x6b, 0x3f, 0xab, 0x79, 0x7c, 0x00, 0x9d, 0xd2, 0x5c, 0x9f, 0xcd, 0xb6, 0xf5, 0xb6, 0x3e, 0x80,
	0x5e, 0xe5, 0xa7, 0x4f, 0x60, 0xd7, 0x96, 0x4e, 0x1e, 0x40, 0xa7, 0xb4, 0xd0, 0x67, 0xad, 0xad,
	0xbc, 0x79, 0xee, 0x5f, 0x2e, 0xd2, 0x32, 0x53, 0x74, 0x76, 0x26, 0xa9, 0x5c, 0x5e, 0xa3, 0xa1,
	0xf8, 0x34, 0x82, 0xa2, 0x62, 0x63, 0x68, 0xba, 0x6d, 0x31, 0x24, 0xd0, 0x1d, 0x1d, 0xe2, 0x96,
	0xc4, 0xc8, 0x23, 0x12, 0xa5, 0x9b, 0x42, 0xa2, 0x0c, 0xf3, 0xcc, 0xfd, 0x83, 0x31, 0xe1, 0x5d,
	0x89, 0xf2, 0xab, 0xab, 0x4b, 0x72, 0x2e, 0xa4, 0xb0, 0x94, 0x0b, 0x4f, 0x7e, 0x72, 0xb5, 0x1b,
	0x51, 0xe8, 0xd0, 0x60, 0xe4, 0xb3, 0xd1, 0x08, 0xda, 0x42, 0x07, 0x18, 0x25, 0x6e, 0xb5, 0x08,
	0x1d, 0xfe, 0x36, 0xc2, 0x22, 0x25, 0xa3, 0x11, 0x74, 0x84, 0xfe, 0xe6, 0x4a, 0x36, 0x81, 0x81,
	0x42, 0x1b, 0xda, 0xbb, 0xf0, 0x7a, 0x61, 0x31, 0xe3, 0xbb, 0x44, 0x83, 0x42, 0x7b, 0x75, 0xf7,
	0xd6, 0x21, 0xa5, 0xc2, 0x94, 0x8a, 0xbd, 0xa5, 0x22, 0xf0, 0x8a, 0xe3, 0xd7, 0x3e, 0x5a, 0x01,
	0xa6, 0xf3, 0x05, 0x7b, 0x0a, 0x1d, 0x54, 0xd6, 0x08, 0xcc, 0x78, 0x63, 0xd2, 0x9c, 0xf6, 0xcf,
	0x46, 0xa7, 0xb4, 0x49, 0x97, 0xe1, 0x0b, 0x4a, 0xfe, 0xec, 0x0d, 0xb4, 0x1c, 0xca, 0x5e, 0xf8,
	0xfe, 0x2f, 0x39, 0x9a, 0x05, 0xdb, 0xae, 0xe4, 0xc5, 0xa2, 0xfd, 0x7f, 0x54, 0x87, 0xd2, 0xf9,
	0xe2, 0xba, 0x4d, 0x6b, 0xf9, 0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x59, 0xd7, 0xdf,
	0xa4, 0x05, 0x00, 0x00,
}
