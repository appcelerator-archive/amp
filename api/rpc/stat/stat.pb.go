// Code generated by protoc-gen-go.
// source: stat.proto
// DO NOT EDIT!

/*
Package stat is a generated protocol buffer package.

It is generated from these files:
	stat.proto

It has these top-level messages:
	StatRequest
	CPUEntry
	CPUReply
	MemEntry
	MemReply
	IOEntry
	IOReply
	NetEntry
	NetReply
*/
package stat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatRequest struct {
	Metric               string `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	Discriminator        string `protobuf:"bytes,2,opt,name=discriminator" json:"discriminator,omitempty"`
	FilterDatacenter     string `protobuf:"bytes,3,opt,name=filter_datacenter,json=filterDatacenter" json:"filter_datacenter,omitempty"`
	FilterHost           string `protobuf:"bytes,4,opt,name=filter_host,json=filterHost" json:"filter_host,omitempty"`
	FilterContainerId    string `protobuf:"bytes,5,opt,name=filter_container_id,json=filterContainerId" json:"filter_container_id,omitempty"`
	FilterContainerName  string `protobuf:"bytes,6,opt,name=filter_container_name,json=filterContainerName" json:"filter_container_name,omitempty"`
	FilterContainerImage string `protobuf:"bytes,7,opt,name=filter_container_image,json=filterContainerImage" json:"filter_container_image,omitempty"`
	FilterServiceId      string `protobuf:"bytes,8,opt,name=filter_service_id,json=filterServiceId" json:"filter_service_id,omitempty"`
	FilterServiceName    string `protobuf:"bytes,9,opt,name=filter_service_name,json=filterServiceName" json:"filter_service_name,omitempty"`
	FilterTaskId         string `protobuf:"bytes,10,opt,name=filter_task_id,json=filterTaskId" json:"filter_task_id,omitempty"`
	FilterTaskName       string `protobuf:"bytes,11,opt,name=filter_task_name,json=filterTaskName" json:"filter_task_name,omitempty"`
	FilterNodeId         string `protobuf:"bytes,12,opt,name=filter_node_id,json=filterNodeId" json:"filter_node_id,omitempty"`
	Since                string `protobuf:"bytes,13,opt,name=since" json:"since,omitempty"`
	Until                string `protobuf:"bytes,14,opt,name=until" json:"until,omitempty"`
	Period               string `protobuf:"bytes,15,opt,name=period" json:"period,omitempty"`
	TimeUnit             string `protobuf:"bytes,16,opt,name=time_unit,json=timeUnit" json:"time_unit,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CPUEntry struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UsageSystem int64  `protobuf:"varint,3,opt,name=usage_system,json=usageSystem" json:"usage_system,omitempty"`
	UsageKernel int64  `protobuf:"varint,4,opt,name=usage_kernel,json=usageKernel" json:"usage_kernel,omitempty"`
	UsageUser   int64  `protobuf:"varint,5,opt,name=usage_user,json=usageUser" json:"usage_user,omitempty"`
	UsageTotal  int64  `protobuf:"varint,6,opt,name=usage_total,json=usageTotal" json:"usage_total,omitempty"`
}

func (m *CPUEntry) Reset()                    { *m = CPUEntry{} }
func (m *CPUEntry) String() string            { return proto.CompactTextString(m) }
func (*CPUEntry) ProtoMessage()               {}
func (*CPUEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CPUReply struct {
	Entries []*CPUEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *CPUReply) Reset()                    { *m = CPUReply{} }
func (m *CPUReply) String() string            { return proto.CompactTextString(m) }
func (*CPUReply) ProtoMessage()               {}
func (*CPUReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CPUReply) GetEntries() []*CPUEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type MemEntry struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Cache int64  `protobuf:"varint,3,opt,name=cache" json:"cache,omitempty"`
	Rss   int64  `protobuf:"varint,4,opt,name=rss" json:"rss,omitempty"`
	Usage int64  `protobuf:"varint,5,opt,name=usage" json:"usage,omitempty"`
}

func (m *MemEntry) Reset()                    { *m = MemEntry{} }
func (m *MemEntry) String() string            { return proto.CompactTextString(m) }
func (*MemEntry) ProtoMessage()               {}
func (*MemEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MemReply struct {
	Entries []*MemEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *MemReply) Reset()                    { *m = MemReply{} }
func (m *MemReply) String() string            { return proto.CompactTextString(m) }
func (*MemReply) ProtoMessage()               {}
func (*MemReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MemReply) GetEntries() []*MemEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type IOEntry struct {
	Id          string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NumberRead  int64  `protobuf:"varint,3,opt,name=number_read,json=numberRead" json:"number_read,omitempty"`
	NumberWrite int64  `protobuf:"varint,4,opt,name=number_write,json=numberWrite" json:"number_write,omitempty"`
	NumberTotal int64  `protobuf:"varint,5,opt,name=number_total,json=numberTotal" json:"number_total,omitempty"`
	SizeRead    int64  `protobuf:"varint,6,opt,name=size_read,json=sizeRead" json:"size_read,omitempty"`
	SizeWrite   int64  `protobuf:"varint,7,opt,name=size_write,json=sizeWrite" json:"size_write,omitempty"`
	SizeTotal   int64  `protobuf:"varint,8,opt,name=size_total,json=sizeTotal" json:"size_total,omitempty"`
}

func (m *IOEntry) Reset()                    { *m = IOEntry{} }
func (m *IOEntry) String() string            { return proto.CompactTextString(m) }
func (*IOEntry) ProtoMessage()               {}
func (*IOEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type IOReply struct {
	Entries []*IOEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *IOReply) Reset()                    { *m = IOReply{} }
func (m *IOReply) String() string            { return proto.CompactTextString(m) }
func (*IOReply) ProtoMessage()               {}
func (*IOReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IOReply) GetEntries() []*IOEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type NetEntry struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	RxBytes  int64  `protobuf:"varint,3,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	RxErrors int64  `protobuf:"varint,4,opt,name=rx_errors,json=rxErrors" json:"rx_errors,omitempty"`
	TxBytes  int64  `protobuf:"varint,5,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	TxErrors int64  `protobuf:"varint,6,opt,name=tx_errors,json=txErrors" json:"tx_errors,omitempty"`
}

func (m *NetEntry) Reset()                    { *m = NetEntry{} }
func (m *NetEntry) String() string            { return proto.CompactTextString(m) }
func (*NetEntry) ProtoMessage()               {}
func (*NetEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type NetReply struct {
	Entries []*NetEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *NetReply) Reset()                    { *m = NetReply{} }
func (m *NetReply) String() string            { return proto.CompactTextString(m) }
func (*NetReply) ProtoMessage()               {}
func (*NetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NetReply) GetEntries() []*NetEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*StatRequest)(nil), "stat.StatRequest")
	proto.RegisterType((*CPUEntry)(nil), "stat.CPUEntry")
	proto.RegisterType((*CPUReply)(nil), "stat.CPUReply")
	proto.RegisterType((*MemEntry)(nil), "stat.MemEntry")
	proto.RegisterType((*MemReply)(nil), "stat.MemReply")
	proto.RegisterType((*IOEntry)(nil), "stat.IOEntry")
	proto.RegisterType((*IOReply)(nil), "stat.IOReply")
	proto.RegisterType((*NetEntry)(nil), "stat.NetEntry")
	proto.RegisterType((*NetReply)(nil), "stat.NetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Stat service

type StatClient interface {
	CPUQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*CPUReply, error)
	MemQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*MemReply, error)
	IOQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*IOReply, error)
	NetQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*NetReply, error)
}

type statClient struct {
	cc *grpc.ClientConn
}

func NewStatClient(cc *grpc.ClientConn) StatClient {
	return &statClient{cc}
}

func (c *statClient) CPUQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*CPUReply, error) {
	out := new(CPUReply)
	err := grpc.Invoke(ctx, "/stat.Stat/CPUQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statClient) MemQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*MemReply, error) {
	out := new(MemReply)
	err := grpc.Invoke(ctx, "/stat.Stat/MemQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statClient) IOQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*IOReply, error) {
	out := new(IOReply)
	err := grpc.Invoke(ctx, "/stat.Stat/IOQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statClient) NetQuery(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*NetReply, error) {
	out := new(NetReply)
	err := grpc.Invoke(ctx, "/stat.Stat/NetQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stat service

type StatServer interface {
	CPUQuery(context.Context, *StatRequest) (*CPUReply, error)
	MemQuery(context.Context, *StatRequest) (*MemReply, error)
	IOQuery(context.Context, *StatRequest) (*IOReply, error)
	NetQuery(context.Context, *StatRequest) (*NetReply, error)
}

func RegisterStatServer(s *grpc.Server, srv StatServer) {
	s.RegisterService(&_Stat_serviceDesc, srv)
}

func _Stat_CPUQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).CPUQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/CPUQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).CPUQuery(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stat_MemQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).MemQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/MemQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).MemQuery(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stat_IOQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).IOQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/IOQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).IOQuery(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stat_NetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).NetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.Stat/NetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).NetQuery(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stat.Stat",
	HandlerType: (*StatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CPUQuery",
			Handler:    _Stat_CPUQuery_Handler,
		},
		{
			MethodName: "MemQuery",
			Handler:    _Stat_MemQuery_Handler,
		},
		{
			MethodName: "IOQuery",
			Handler:    _Stat_IOQuery_Handler,
		},
		{
			MethodName: "NetQuery",
			Handler:    _Stat_NetQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("stat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x51, 0x4e, 0x1b, 0x49,
	0x10, 0xc5, 0xd8, 0xc6, 0xe3, 0x32, 0x18, 0xd3, 0xb0, 0x68, 0x76, 0x57, 0x08, 0xd6, 0x42, 0x5a,
	0x6b, 0x57, 0xcb, 0x4a, 0x5e, 0x4e, 0xb0, 0x04, 0x29, 0x56, 0x84, 0x93, 0x0c, 0xa0, 0x7c, 0x5a,
	0xcd, 0x4c, 0x05, 0x5a, 0x78, 0x66, 0x48, 0x77, 0x39, 0xb1, 0x73, 0x98, 0x9c, 0x22, 0x87, 0xc8,
	0x49, 0xf2, 0x9b, 0x2b, 0x44, 0x5d, 0xdd, 0x63, 0x4f, 0x8c, 0x02, 0xfc, 0x4d, 0xbd, 0x7a, 0x55,
	0xfd, 0x5e, 0x55, 0x81, 0x01, 0x0c, 0x49, 0x3a, 0xba, 0xd3, 0x39, 0xe5, 0xa2, 0x66, 0xbf, 0xbb,
	0x5f, 0x6b, 0xd0, 0x3a, 0x27, 0x49, 0x11, 0xbe, 0x9b, 0xa0, 0x21, 0xb1, 0x0b, 0x6b, 0x29, 0x92,
	0x56, 0x71, 0x58, 0x39, 0xa8, 0xf4, 0x9a, 0x91, 0x8f, 0xc4, 0x21, 0x6c, 0x24, 0xca, 0xc4, 0x5a,
	0xa5, 0x2a, 0x93, 0x94, 0xeb, 0x70, 0x95, 0xd3, 0x3f, 0x82, 0xe2, 0x6f, 0xd8, 0x7a, 0xab, 0xc6,
	0x84, 0x7a, 0x94, 0x48, 0x92, 0x31, 0x66, 0x84, 0x3a, 0xac, 0x32, 0xb3, 0xe3, 0x12, 0xcf, 0xe6,
	0xb8, 0xd8, 0x87, 0x96, 0x27, 0xdf, 0xe4, 0x86, 0xc2, 0x1a, 0xd3, 0xc0, 0x41, 0xcf, 0x73, 0x43,
	0xe2, 0x08, 0xb6, 0x3d, 0x21, 0xce, 0x33, 0x92, 0x2a, 0x43, 0x3d, 0x52, 0x49, 0x58, 0x67, 0xa2,
	0x7f, 0xe8, 0xa4, 0xc8, 0x0c, 0x12, 0xd1, 0x87, 0x5f, 0xee, 0xf1, 0x33, 0x99, 0x62, 0xb8, 0xc6,
	0x15, 0xdb, 0x4b, 0x15, 0x43, 0x99, 0xa2, 0x38, 0x86, 0xdd, 0xfb, 0x6f, 0xa4, 0xf2, 0x1a, 0xc3,
	0x06, 0x17, 0xed, 0x2c, 0x3f, 0x63, 0x73, 0xe2, 0xaf, 0xb9, 0x4f, 0x83, 0xfa, 0xbd, 0x8a, 0xd1,
	0xea, 0x0a, 0xb8, 0x60, 0xd3, 0x25, 0xce, 0x1d, 0x3e, 0x48, 0x4a, 0x2e, 0x0a, 0x2e, 0x6b, 0x6a,
	0x96, 0x5d, 0x78, 0x36, 0x2b, 0x3a, 0x84, 0xb6, 0xe7, 0x93, 0x34, 0xb7, 0xb6, 0x31, 0x30, 0x75,
	0xdd, 0xa1, 0x17, 0xd2, 0xdc, 0x0e, 0x12, 0xd1, 0x83, 0x4e, 0x99, 0xc5, 0x2d, 0x5b, 0xcc, 0x6b,
	0x2f, 0x78, 0x4b, 0xfd, 0xb2, 0x3c, 0x61, 0xa1, 0xeb, 0xe5, 0x7e, 0xc3, 0x3c, 0xb1, 0x2a, 0x77,
	0xa0, 0x6e, 0x54, 0x16, 0x63, 0xb8, 0xc1, 0x49, 0x17, 0x58, 0x74, 0x92, 0x91, 0x1a, 0x87, 0x6d,
	0x87, 0x72, 0x60, 0x6f, 0xe4, 0x0e, 0xb5, 0xca, 0x93, 0x70, 0xd3, 0xdd, 0x88, 0x8b, 0xc4, 0xef,
	0xd0, 0x24, 0x95, 0xe2, 0x68, 0x92, 0x29, 0x0a, 0x3b, 0x9c, 0x0a, 0x2c, 0x70, 0x99, 0x29, 0xea,
	0x7e, 0xae, 0x40, 0x70, 0xf2, 0xea, 0xf2, 0x34, 0x23, 0x3d, 0x13, 0x6d, 0x58, 0x55, 0x89, 0xbf,
	0xb0, 0x55, 0x95, 0x08, 0x01, 0x35, 0x76, 0xe0, 0x8e, 0x8a, 0xbf, 0xc5, 0x1f, 0xb0, 0x3e, 0x31,
	0xf2, 0x1a, 0x47, 0x66, 0x66, 0x08, 0x53, 0x3e, 0xa3, 0x6a, 0xd4, 0x62, 0xec, 0x9c, 0xa1, 0x05,
	0xe5, 0x16, 0x75, 0x86, 0x63, 0x3e, 0xa1, 0x82, 0xf2, 0x82, 0x21, 0xb1, 0x07, 0xe0, 0x28, 0x13,
	0x83, 0x9a, 0x4f, 0xa7, 0x1a, 0x35, 0x19, 0xb9, 0x34, 0xee, 0x06, 0x5d, 0x9a, 0x72, 0x92, 0x63,
	0x3e, 0x94, 0x6a, 0xe4, 0x2a, 0x2e, 0x2c, 0xd2, 0x3d, 0x66, 0xd5, 0x11, 0xde, 0x8d, 0x67, 0xa2,
	0x07, 0x0d, 0xcc, 0x48, 0x2b, 0x34, 0x61, 0xe5, 0xa0, 0xda, 0x6b, 0xf5, 0xdb, 0x47, 0xfc, 0xf7,
	0x54, 0xd8, 0x8a, 0x8a, 0x74, 0x77, 0x0c, 0xc1, 0x19, 0xa6, 0x4f, 0xf7, 0xba, 0x03, 0xf5, 0x58,
	0xc6, 0x37, 0xe8, 0x4d, 0xba, 0x40, 0x74, 0xa0, 0xaa, 0x8d, 0xf1, 0xae, 0xec, 0x27, 0xef, 0xc3,
	0x6a, 0xf3, 0x46, 0x5c, 0x60, 0x35, 0x9e, 0x61, 0xfa, 0xb0, 0xc6, 0x42, 0xce, 0x42, 0xe3, 0xb7,
	0x0a, 0x34, 0x06, 0x2f, 0xe7, 0x1a, 0x07, 0x8f, 0x69, 0xdc, 0x87, 0x56, 0x36, 0x49, 0xaf, 0x50,
	0x8f, 0x34, 0xca, 0xc4, 0x2b, 0x05, 0x07, 0x45, 0x28, 0x13, 0xbb, 0x0d, 0x4f, 0xf8, 0xa0, 0x15,
	0x61, 0xb1, 0x0d, 0x87, 0xbd, 0xb1, 0x50, 0x89, 0xe2, 0xe6, 0x5d, 0x2f, 0x53, 0x78, 0xe0, 0xf6,
	0x88, 0x8c, 0xfa, 0x88, 0xee, 0x11, 0xb7, 0x8f, 0xc0, 0x02, 0xfc, 0xc4, 0x1e, 0x00, 0x27, 0xdd,
	0x03, 0x0d, 0xb7, 0x4d, 0x8b, 0xb8, 0xf6, 0x45, 0xda, 0x35, 0x0f, 0x16, 0x69, 0xb7, 0xcb, 0xbe,
	0x35, 0xec, 0xc6, 0xf4, 0xe7, 0xf2, 0x98, 0x36, 0xdc, 0x98, 0xfc, 0x40, 0x16, 0x53, 0xfa, 0x54,
	0x81, 0x60, 0x88, 0xf4, 0xf4, 0x55, 0xfe, 0x0a, 0x81, 0x9e, 0x8e, 0xae, 0x66, 0x84, 0xc6, 0xcf,
	0xa8, 0xa1, 0xa7, 0xff, 0xdb, 0xd0, 0x5a, 0xd3, 0xd3, 0x11, 0x6a, 0x9d, 0xeb, 0x62, 0xab, 0x81,
	0x9e, 0x9e, 0x72, 0x6c, 0xeb, 0xa8, 0xa8, 0x73, 0x63, 0x69, 0xd0, 0xa2, 0x8e, 0xe6, 0x75, 0x7e,
	0x24, 0xe4, 0xeb, 0xec, 0xf2, 0x87, 0x48, 0x0f, 0x2f, 0xbf, 0x30, 0x30, 0xb7, 0xd5, 0xff, 0x52,
	0x81, 0x9a, 0xfd, 0xb7, 0x2f, 0xfe, 0xe5, 0xfb, 0x7e, 0x3d, 0x41, 0x3d, 0x13, 0x5b, 0x8e, 0x5d,
	0xfa, 0x39, 0xf8, 0x6d, 0x71, 0xe1, 0xfc, 0x42, 0x77, 0xc5, 0x16, 0x9c, 0x61, 0xfa, 0x58, 0x41,
	0x71, 0x8f, 0xdd, 0x15, 0xf1, 0x8f, 0x9d, 0xfa, 0x4f, 0xf9, 0xf3, 0xb9, 0x97, 0xfa, 0x0f, 0x91,
	0x1e, 0xeb, 0x5f, 0x58, 0xee, 0xae, 0x5c, 0xad, 0xf1, 0xcf, 0xd9, 0x7f, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x82, 0xe5, 0x59, 0xb0, 0xdc, 0x06, 0x00, 0x00,
}
