// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/build/build.proto
// DO NOT EDIT!

/*
Package build is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/build/build.proto

It has these top-level messages:
	Ping
	Pong
	ProjectRequest
	ProjectQuery
	ProjectList
	Project
	BuildRequest
	BuildList
	Build
	Log
*/
package build

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Pong struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ProjectRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ProjectRequest) Reset()                    { *m = ProjectRequest{} }
func (m *ProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectRequest) ProtoMessage()               {}
func (*ProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ProjectQuery struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Latest       bool   `protobuf:"varint,2,opt,name=latest" json:"latest,omitempty"`
}

func (m *ProjectQuery) Reset()                    { *m = ProjectQuery{} }
func (m *ProjectQuery) String() string            { return proto.CompactTextString(m) }
func (*ProjectQuery) ProtoMessage()               {}
func (*ProjectQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ProjectList struct {
	Projects []*Project `protobuf:"bytes,1,rep,name=projects" json:"projects,omitempty"`
}

func (m *ProjectList) Reset()                    { *m = ProjectList{} }
func (m *ProjectList) String() string            { return proto.CompactTextString(m) }
func (*ProjectList) ProtoMessage()               {}
func (*ProjectList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProjectList) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type Project struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Owner  string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type BuildRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Sha   string `protobuf:"bytes,3,opt,name=sha" json:"sha,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type BuildList struct {
	Builds []*Build `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty"`
}

func (m *BuildList) Reset()                    { *m = BuildList{} }
func (m *BuildList) String() string            { return proto.CompactTextString(m) }
func (*BuildList) ProtoMessage()               {}
func (*BuildList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BuildList) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type Build struct {
	Owner         string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Sha           string `protobuf:"bytes,3,opt,name=sha" json:"sha,omitempty"`
	Status        string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	CommitMessage string `protobuf:"bytes,5,opt,name=commit_message,json=commitMessage" json:"commit_message,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Log struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*Ping)(nil), "build.Ping")
	proto.RegisterType((*Pong)(nil), "build.Pong")
	proto.RegisterType((*ProjectRequest)(nil), "build.ProjectRequest")
	proto.RegisterType((*ProjectQuery)(nil), "build.ProjectQuery")
	proto.RegisterType((*ProjectList)(nil), "build.ProjectList")
	proto.RegisterType((*Project)(nil), "build.Project")
	proto.RegisterType((*BuildRequest)(nil), "build.BuildRequest")
	proto.RegisterType((*BuildList)(nil), "build.BuildList")
	proto.RegisterType((*Build)(nil), "build.Build")
	proto.RegisterType((*Log)(nil), "build.Log")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AmpBuild service

type AmpBuildClient interface {
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	CreateProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*Project, error)
	ListProjects(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (*ProjectList, error)
	ListBuilds(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*BuildList, error)
	BuildLog(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (AmpBuild_BuildLogClient, error)
	Rebuild(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*Build, error)
}

type ampBuildClient struct {
	cc *grpc.ClientConn
}

func NewAmpBuildClient(cc *grpc.ClientConn) AmpBuildClient {
	return &ampBuildClient{cc}
}

func (c *ampBuildClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/build.AmpBuild/PingPong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampBuildClient) CreateProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/build.AmpBuild/CreateProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampBuildClient) DeleteProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/build.AmpBuild/DeleteProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampBuildClient) ListProjects(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (*ProjectList, error) {
	out := new(ProjectList)
	err := grpc.Invoke(ctx, "/build.AmpBuild/ListProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampBuildClient) ListBuilds(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*BuildList, error) {
	out := new(BuildList)
	err := grpc.Invoke(ctx, "/build.AmpBuild/ListBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampBuildClient) BuildLog(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (AmpBuild_BuildLogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AmpBuild_serviceDesc.Streams[0], c.cc, "/build.AmpBuild/BuildLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &ampBuildBuildLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AmpBuild_BuildLogClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type ampBuildBuildLogClient struct {
	grpc.ClientStream
}

func (x *ampBuildBuildLogClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ampBuildClient) Rebuild(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/build.AmpBuild/Rebuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AmpBuild service

type AmpBuildServer interface {
	PingPong(context.Context, *Ping) (*Pong, error)
	CreateProject(context.Context, *ProjectRequest) (*Project, error)
	DeleteProject(context.Context, *ProjectRequest) (*Project, error)
	ListProjects(context.Context, *ProjectQuery) (*ProjectList, error)
	ListBuilds(context.Context, *ProjectRequest) (*BuildList, error)
	BuildLog(*BuildRequest, AmpBuild_BuildLogServer) error
	Rebuild(context.Context, *BuildRequest) (*Build, error)
}

func RegisterAmpBuildServer(s *grpc.Server, srv AmpBuildServer) {
	s.RegisterService(&_AmpBuild_serviceDesc, srv)
}

func _AmpBuild_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpBuildServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.AmpBuild/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpBuildServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmpBuild_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpBuildServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.AmpBuild/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpBuildServer).CreateProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmpBuild_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpBuildServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.AmpBuild/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpBuildServer).DeleteProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmpBuild_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpBuildServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.AmpBuild/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpBuildServer).ListProjects(ctx, req.(*ProjectQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmpBuild_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpBuildServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.AmpBuild/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpBuildServer).ListBuilds(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmpBuild_BuildLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AmpBuildServer).BuildLog(m, &ampBuildBuildLogServer{stream})
}

type AmpBuild_BuildLogServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type ampBuildBuildLogServer struct {
	grpc.ServerStream
}

func (x *ampBuildBuildLogServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

func _AmpBuild_Rebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpBuildServer).Rebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.AmpBuild/Rebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpBuildServer).Rebuild(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmpBuild_serviceDesc = grpc.ServiceDesc{
	ServiceName: "build.AmpBuild",
	HandlerType: (*AmpBuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _AmpBuild_PingPong_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _AmpBuild_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _AmpBuild_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _AmpBuild_ListProjects_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _AmpBuild_ListBuilds_Handler,
		},
		{
			MethodName: "Rebuild",
			Handler:    _AmpBuild_Rebuild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildLog",
			Handler:       _AmpBuild_BuildLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/build/build.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x4b, 0x6f, 0xd4, 0x30,
	0x10, 0xde, 0x64, 0x5f, 0xe9, 0xec, 0x43, 0x95, 0x79, 0x28, 0xda, 0x0b, 0x2b, 0x0b, 0x50, 0xc5,
	0x61, 0x03, 0x45, 0x08, 0xca, 0x8d, 0xc7, 0x09, 0x2d, 0x52, 0xc9, 0x95, 0x03, 0xf2, 0x66, 0x47,
	0xa9, 0xd1, 0x26, 0x0e, 0xb6, 0x23, 0x04, 0x47, 0xfe, 0x36, 0x17, 0x94, 0xb1, 0xb3, 0x6d, 0xaa,
	0x76, 0x25, 0xe0, 0x12, 0xf9, 0xfb, 0x3c, 0x0f, 0x7f, 0x33, 0x9f, 0x02, 0x2f, 0x72, 0x69, 0x2f,
	0xea, 0xcd, 0x2a, 0x53, 0x45, 0x22, 0xaa, 0x2a, 0xc3, 0x1d, 0x6a, 0x61, 0x95, 0x4e, 0x44, 0x51,
	0x25, 0xa2, 0x92, 0x89, 0xae, 0xb2, 0x64, 0x53, 0xcb, 0xdd, 0xd6, 0x7d, 0x57, 0x95, 0x56, 0x56,
	0xb1, 0x21, 0x01, 0xbe, 0x84, 0xc1, 0xb9, 0x2c, 0x73, 0x16, 0xc3, 0xb8, 0x40, 0x63, 0x44, 0x8e,
	0x71, 0xb0, 0x0c, 0x4e, 0x8e, 0xd2, 0x16, 0x52, 0x84, 0x3a, 0x18, 0xf1, 0x1a, 0xe6, 0xe7, 0x5a,
	0x7d, 0xc5, 0xcc, 0xa6, 0xf8, 0xad, 0x46, 0x63, 0xd9, 0x5d, 0x18, 0xaa, 0xef, 0x25, 0x6a, 0x1f,
	0xe9, 0x00, 0x63, 0x30, 0x28, 0x45, 0x81, 0x71, 0x48, 0x24, 0x9d, 0xf9, 0x07, 0x98, 0xfa, 0xdc,
	0x4f, 0x35, 0xea, 0x1f, 0x8c, 0xc3, 0x54, 0xe9, 0x5c, 0x94, 0xf2, 0xa7, 0xb0, 0x52, 0x95, 0xbe,
	0x40, 0x87, 0x63, 0xf7, 0x61, 0xb4, 0x13, 0x16, 0x8d, 0xa5, 0x4a, 0x51, 0xea, 0x11, 0x3f, 0x83,
	0x89, 0xaf, 0xb5, 0x96, 0xc6, 0xb2, 0x27, 0x10, 0x55, 0x0e, 0x9a, 0x38, 0x58, 0xf6, 0x4f, 0x26,
	0xa7, 0xf3, 0x95, 0x9b, 0x40, 0xfb, 0xda, 0xfd, 0x3d, 0xff, 0x0c, 0x63, 0x4f, 0xb2, 0x39, 0x84,
	0x72, 0x4b, 0x7d, 0x67, 0x69, 0x28, 0xb7, 0x97, 0x5a, 0xc2, 0x9b, 0xb4, 0xf4, 0x2f, 0xb5, 0x34,
	0xef, 0x32, 0x56, 0xd8, 0xda, 0xc4, 0x03, 0x62, 0x3d, 0x6a, 0x34, 0xbe, 0x6d, 0xfa, 0xfe, 0xf5,
	0x74, 0xd8, 0x31, 0xf4, 0xcd, 0x85, 0xf0, 0x4d, 0x9a, 0x23, 0x7f, 0x06, 0x47, 0x54, 0x8b, 0x14,
	0x3e, 0x84, 0x11, 0x09, 0x6a, 0xf5, 0x4d, 0xbd, 0x3e, 0xd7, 0xcd, 0xdf, 0xf1, 0x5f, 0x01, 0x0c,
	0x89, 0xf9, 0x9f, 0xc6, 0xb7, 0x89, 0x63, 0x8f, 0x60, 0x9e, 0xa9, 0xa2, 0x90, 0xf6, 0x4b, 0xeb,
	0x8e, 0x21, 0xdd, 0xcf, 0x1c, 0xfb, 0xd1, 0x7b, 0xe4, 0x01, 0xf4, 0xd7, 0xea, 0x80, 0x89, 0x4e,
	0x7f, 0x87, 0x10, 0xbd, 0x29, 0x2a, 0xf7, 0xd0, 0xc7, 0x10, 0x35, 0xae, 0x24, 0xdf, 0x4d, 0xda,
	0xa5, 0xc9, 0x32, 0x5f, 0xec, 0x81, 0x2a, 0x73, 0xde, 0x63, 0xaf, 0x60, 0xf6, 0x4e, 0xa3, 0xb0,
	0xd8, 0x2e, 0xef, 0xde, 0xb5, 0x0d, 0xbb, 0x89, 0x2f, 0xae, 0x2d, 0xde, 0x65, 0xbe, 0xc7, 0x1d,
	0xfe, 0x43, 0xe6, 0x19, 0x4c, 0x9b, 0xe1, 0x7b, 0xc2, 0xb0, 0x3b, 0xdd, 0x08, 0xb2, 0xf1, 0x82,
	0x75, 0xc9, 0x26, 0x81, 0xf7, 0xd8, 0x4b, 0x80, 0xe6, 0x44, 0x1a, 0xcd, 0x6d, 0x1d, 0x8f, 0xaf,
	0x2e, 0xd1, 0x27, 0x26, 0x10, 0x39, 0xa8, 0xf2, 0x7d, 0xbf, 0xab, 0x96, 0x5a, 0x80, 0x27, 0xd7,
	0x2a, 0xe7, 0xbd, 0xa7, 0x01, 0x5b, 0xc1, 0x38, 0x45, 0xa2, 0x6e, 0x8e, 0xef, 0x38, 0x85, 0xf7,
	0x36, 0x23, 0xfa, 0x29, 0x3c, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x86, 0xf9, 0x59, 0x4d,
	0x04, 0x00, 0x00,
}
