{
  "swagger": "2.0",
  "info": {
    "title": "github.com/appcelerator/amp/api/rpc/service/service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/inspect/{service_id}": {
      "get": {
        "operationId": "InspectService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/serviceServiceInspectReply"
            }
          }
        },
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Service"
        ]
      }
    },
    "/v1/scale/{service_id}": {
      "put": {
        "operationId": "ScaleService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Service"
        ]
      }
    },
    "/v1/services": {
      "get": {
        "operationId": "ListService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/serviceServiceListReply"
            }
          }
        },
        "tags": [
          "Service"
        ]
      }
    },
    "/v1/tasks/{service_id}": {
      "get": {
        "operationId": "Tasks",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/serviceTasksReply"
            }
          }
        },
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Service"
        ]
      }
    }
  },
  "definitions": {
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "serviceServiceEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "serviceServiceInspectReply": {
      "type": "object",
      "properties": {
        "service_entity": {
          "type": "string"
        }
      }
    },
    "serviceServiceInspectRequest": {
      "type": "object",
      "properties": {
        "service_id": {
          "type": "string"
        }
      }
    },
    "serviceServiceListEntry": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/serviceServiceEntity"
        },
        "ready_tasks": {
          "type": "integer",
          "format": "int32"
        },
        "total_tasks": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "serviceServiceListReply": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceServiceListEntry"
          }
        }
      }
    },
    "serviceServiceListRequest": {
      "type": "object"
    },
    "serviceServiceScaleRequest": {
      "type": "object",
      "properties": {
        "service_id": {
          "type": "string"
        },
        "replicas_number": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "serviceTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "current_state": {
          "type": "string"
        },
        "desired_state": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        }
      }
    },
    "serviceTasksReply": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceTask"
          }
        }
      }
    },
    "serviceTasksRequest": {
      "type": "object",
      "properties": {
        "service_id": {
          "type": "string"
        }
      }
    }
  }
}
