// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/appcelerator/amp/api/rpc/service/service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/service/service.proto

It has these top-level messages:
	PsRequest
	Task
	PsReply
	ListRequest
	ListReply
	ServiceEntry
	InspectRequest
	InspectReply
	ScaleRequest
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PsRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PsRequest) Reset()                    { *m = PsRequest{} }
func (m *PsRequest) String() string            { return proto.CompactTextString(m) }
func (*PsRequest) ProtoMessage()               {}
func (*PsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type Task struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Image        string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	CurrentState string `protobuf:"bytes,3,opt,name=current_state,json=currentState" json:"current_state,omitempty"`
	DesiredState string `protobuf:"bytes,4,opt,name=desired_state,json=desiredState" json:"desired_state,omitempty"`
	NodeId       string `protobuf:"bytes,5,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Error        string `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	Name         string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Slot         int32  `protobuf:"varint,8,opt,name=slot" json:"slot,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Task) GetCurrentState() string {
	if m != nil {
		return m.CurrentState
	}
	return ""
}

func (m *Task) GetDesiredState() string {
	if m != nil {
		return m.DesiredState
	}
	return ""
}

func (m *Task) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Task) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type PsReply struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *PsReply) Reset()                    { *m = PsReply{} }
func (m *PsReply) String() string            { return proto.CompactTextString(m) }
func (*PsReply) ProtoMessage()               {}
func (*PsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PsReply) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ListRequest struct {
	Stack string `protobuf:"bytes,1,opt,name=stack" json:"stack,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListRequest) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

type ListReply struct {
	Entries []*ServiceEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListReply) GetEntries() []*ServiceEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ServiceEntry struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Mode         string `protobuf:"bytes,3,opt,name=mode" json:"mode,omitempty"`
	Image        string `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Tag          string `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
	RunningTasks int32  `protobuf:"varint,6,opt,name=running_tasks,json=runningTasks" json:"running_tasks,omitempty"`
	TotalTasks   int32  `protobuf:"varint,7,opt,name=total_tasks,json=totalTasks" json:"total_tasks,omitempty"`
	Status       string `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
}

func (m *ServiceEntry) Reset()                    { *m = ServiceEntry{} }
func (m *ServiceEntry) String() string            { return proto.CompactTextString(m) }
func (*ServiceEntry) ProtoMessage()               {}
func (*ServiceEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServiceEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceEntry) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *ServiceEntry) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ServiceEntry) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ServiceEntry) GetRunningTasks() int32 {
	if m != nil {
		return m.RunningTasks
	}
	return 0
}

func (m *ServiceEntry) GetTotalTasks() int32 {
	if m != nil {
		return m.TotalTasks
	}
	return 0
}

func (m *ServiceEntry) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type InspectRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *InspectRequest) Reset()                    { *m = InspectRequest{} }
func (m *InspectRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectRequest) ProtoMessage()               {}
func (*InspectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InspectRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type InspectReply struct {
	Json string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
}

func (m *InspectReply) Reset()                    { *m = InspectReply{} }
func (m *InspectReply) String() string            { return proto.CompactTextString(m) }
func (*InspectReply) ProtoMessage()               {}
func (*InspectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InspectReply) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type ScaleRequest struct {
	Service  string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Replicas uint64 `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
}

func (m *ScaleRequest) Reset()                    { *m = ScaleRequest{} }
func (m *ScaleRequest) String() string            { return proto.CompactTextString(m) }
func (*ScaleRequest) ProtoMessage()               {}
func (*ScaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ScaleRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ScaleRequest) GetReplicas() uint64 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func init() {
	proto.RegisterType((*PsRequest)(nil), "service.PsRequest")
	proto.RegisterType((*Task)(nil), "service.Task")
	proto.RegisterType((*PsReply)(nil), "service.PsReply")
	proto.RegisterType((*ListRequest)(nil), "service.ListRequest")
	proto.RegisterType((*ListReply)(nil), "service.ListReply")
	proto.RegisterType((*ServiceEntry)(nil), "service.ServiceEntry")
	proto.RegisterType((*InspectRequest)(nil), "service.InspectRequest")
	proto.RegisterType((*InspectReply)(nil), "service.InspectReply")
	proto.RegisterType((*ScaleRequest)(nil), "service.ScaleRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	ServicePs(ctx context.Context, in *PsRequest, opts ...grpc.CallOption) (*PsReply, error)
	ServiceList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	ServiceInspect(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectReply, error)
	ServiceScale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ServicePs(ctx context.Context, in *PsRequest, opts ...grpc.CallOption) (*PsReply, error) {
	out := new(PsReply)
	err := grpc.Invoke(ctx, "/service.Service/ServicePs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ServiceList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/service.Service/ServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ServiceInspect(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectReply, error) {
	out := new(InspectReply)
	err := grpc.Invoke(ctx, "/service.Service/ServiceInspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ServiceScale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/service.Service/ServiceScale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	ServicePs(context.Context, *PsRequest) (*PsReply, error)
	ServiceList(context.Context, *ListRequest) (*ListReply, error)
	ServiceInspect(context.Context, *InspectRequest) (*InspectReply, error)
	ServiceScale(context.Context, *ScaleRequest) (*google_protobuf1.Empty, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_ServicePs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ServicePs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/ServicePs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ServicePs(ctx, req.(*PsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/ServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ServiceList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ServiceInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ServiceInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/ServiceInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ServiceInspect(ctx, req.(*InspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ServiceScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ServiceScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/ServiceScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ServiceScale(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServicePs",
			Handler:    _Service_ServicePs_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _Service_ServiceList_Handler,
		},
		{
			MethodName: "ServiceInspect",
			Handler:    _Service_ServiceInspect_Handler,
		},
		{
			MethodName: "ServiceScale",
			Handler:    _Service_ServiceScale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/service/service.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/service/service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xdb, 0x38,
	0x10, 0x86, 0x1d, 0xdb, 0x8a, 0xc7, 0x4e, 0x10, 0x70, 0xed, 0x44, 0xd0, 0x66, 0x77, 0x0d, 0x05,
	0x5b, 0x04, 0x3d, 0x88, 0x68, 0x72, 0x2a, 0xd0, 0x63, 0x73, 0x08, 0x50, 0x14, 0x81, 0xd2, 0x9e,
	0x0d, 0x46, 0x62, 0x55, 0x36, 0x32, 0xc9, 0x92, 0x74, 0x00, 0x23, 0xc8, 0xa5, 0xaf, 0xd0, 0xd7,
	0x6a, 0x4f, 0x7d, 0x85, 0x3e, 0x44, 0x8f, 0x05, 0x7f, 0xa4, 0x28, 0xcd, 0x21, 0x17, 0x6b, 0xe6,
	0x9b, 0x8f, 0x1f, 0x39, 0x1f, 0xc7, 0x84, 0x97, 0x15, 0x33, 0x1f, 0xd7, 0x57, 0x59, 0x21, 0x56,
	0x98, 0x48, 0x59, 0xd0, 0x9a, 0x2a, 0x62, 0x84, 0xc2, 0x64, 0x25, 0x31, 0x91, 0x0c, 0x2b, 0x59,
	0x60, 0x4d, 0xd5, 0x0d, 0x2b, 0x68, 0xf3, 0xcd, 0xa4, 0x12, 0x46, 0xa0, 0x28, 0xa4, 0xc9, 0x61,
	0x25, 0x44, 0x55, 0x53, 0x47, 0x27, 0x9c, 0x0b, 0x43, 0x0c, 0x13, 0x5c, 0x7b, 0x5a, 0x72, 0xda,
	0xd9, 0xa1, 0x12, 0x35, 0xe1, 0x15, 0x76, 0x85, 0xab, 0xf5, 0x07, 0x2c, 0xcd, 0x46, 0x52, 0x8d,
	0xe9, 0x4a, 0x9a, 0x8d, 0xff, 0xf5, 0x8b, 0xd2, 0xff, 0x61, 0x7c, 0xa1, 0x73, 0xfa, 0x79, 0x4d,
	0xb5, 0x41, 0x31, 0x34, 0x5b, 0xc5, 0xbd, 0x45, 0xef, 0x78, 0x9c, 0x37, 0x69, 0xfa, 0xbd, 0x07,
	0x83, 0x77, 0x44, 0x5f, 0xa3, 0x5d, 0xe8, 0xb3, 0x32, 0x54, 0xfb, 0xac, 0x44, 0x33, 0x18, 0xb2,
	0x15, 0xa9, 0x68, 0xdc, 0x77, 0x90, 0x4f, 0xd0, 0x11, 0xec, 0x14, 0x6b, 0xa5, 0x28, 0x37, 0x4b,
	0x6d, 0x88, 0xa1, 0xf1, 0x96, 0xab, 0x4e, 0x03, 0x78, 0x69, 0x31, 0x4b, 0x2a, 0xa9, 0x66, 0x8a,
	0x96, 0x81, 0x34, 0xf0, 0xa4, 0x00, 0x7a, 0xd2, 0x01, 0x44, 0x5c, 0x94, 0x74, 0xc9, 0xca, 0x78,
	0xe8, 0xca, 0x23, 0x9b, 0x9e, 0xbb, 0x8d, 0xa9, 0x52, 0x42, 0xc5, 0x23, 0xbf, 0xb1, 0x4b, 0x10,
	0x82, 0x01, 0x27, 0x2b, 0x1a, 0x47, 0x0e, 0x74, 0xb1, 0xc5, 0x74, 0x2d, 0x4c, 0xbc, 0xbd, 0xe8,
	0x1d, 0x0f, 0x73, 0x17, 0xa7, 0x19, 0x44, 0xb6, 0x6d, 0x59, 0x6f, 0xd0, 0x11, 0x0c, 0x0d, 0xd1,
	0xd7, 0x3a, 0xee, 0x2d, 0xb6, 0x8e, 0x27, 0x27, 0x3b, 0x59, 0x63, 0xbe, 0xed, 0x37, 0xf7, 0xb5,
	0xf4, 0x08, 0x26, 0x6f, 0x98, 0x36, 0x8d, 0x51, 0x33, 0x18, 0x6a, 0x43, 0x8a, 0xeb, 0x60, 0x84,
	0x4f, 0xd2, 0x57, 0x30, 0xf6, 0x24, 0x2b, 0x8b, 0x21, 0xa2, 0xdc, 0x28, 0x46, 0x1b, 0xe1, 0x79,
	0x2b, 0x7c, 0xe9, 0xbf, 0x67, 0xdc, 0xa8, 0x4d, 0xde, 0xb0, 0xd2, 0x6f, 0x3d, 0x98, 0x76, 0x2b,
	0x8f, 0xac, 0x6e, 0x7a, 0xeb, 0x3f, 0xec, 0x6d, 0x25, 0xca, 0xc6, 0x5f, 0x17, 0xdf, 0x5f, 0xc9,
	0xa0, 0x7b, 0x25, 0x7b, 0xb0, 0x65, 0x48, 0x15, 0x4c, 0xb4, 0xa1, 0xf5, 0x5f, 0xad, 0x39, 0x67,
	0xbc, 0x5a, 0x7a, 0x03, 0x46, 0xce, 0xa0, 0x69, 0x00, 0x6d, 0xfb, 0x1a, 0xfd, 0x07, 0x13, 0x23,
	0x0c, 0xa9, 0x03, 0x25, 0x72, 0x14, 0x70, 0x90, 0x27, 0xec, 0xc3, 0xc8, 0xde, 0xde, 0x5a, 0x3b,
	0x7f, 0xc7, 0x79, 0xc8, 0xd2, 0xe7, 0xb0, 0x7b, 0xce, 0xb5, 0xa4, 0x85, 0x79, 0x7a, 0xba, 0x52,
	0x98, 0xb6, 0x5c, 0xeb, 0x1d, 0x82, 0xc1, 0x27, 0x2d, 0x78, 0xa0, 0xb9, 0x38, 0x7d, 0x0d, 0xd3,
	0xcb, 0x82, 0xd4, 0xf4, 0x49, 0x35, 0x94, 0xc0, 0xb6, 0xa2, 0xb2, 0x66, 0x05, 0xd1, 0xce, 0xab,
	0x41, 0xde, 0xe6, 0x27, 0xbf, 0xfa, 0x10, 0x05, 0x93, 0xd1, 0x5b, 0x18, 0x87, 0xf0, 0x42, 0x23,
	0xd4, 0xde, 0x4e, 0xfb, 0x77, 0x48, 0xf6, 0x1e, 0x60, 0xb2, 0xde, 0xa4, 0x7f, 0x7f, 0xf9, 0xf1,
	0xf3, 0x6b, 0x7f, 0x8e, 0xfe, 0xc2, 0x37, 0x2f, 0xb0, 0x73, 0x04, 0xdf, 0x06, 0xce, 0x1d, 0x7a,
	0x0f, 0x93, 0xa0, 0x67, 0xa7, 0x00, 0xcd, 0xda, 0xd5, 0x9d, 0xc9, 0x49, 0xd0, 0x1f, 0xa8, 0x55,
	0x3d, 0x74, 0xaa, 0xfb, 0x68, 0x66, 0x55, 0x43, 0xd9, 0x0a, 0xdb, 0xa1, 0xba, 0x43, 0x4b, 0xd8,
	0x0d, 0xb2, 0xc1, 0x23, 0x74, 0xd0, 0x6a, 0x3c, 0x74, 0x38, 0x99, 0x3f, 0x2e, 0x58, 0xfd, 0x7f,
	0x9c, 0xfe, 0x01, 0x9a, 0x5b, 0x7d, 0xe6, 0x2b, 0x9d, 0x73, 0xd3, 0x76, 0xee, 0x9c, 0xc1, 0xa8,
	0x33, 0xa8, 0x1d, 0xc3, 0x93, 0xfd, 0xcc, 0xbf, 0x3e, 0x59, 0xf3, 0xa8, 0x64, 0x67, 0xf6, 0x1d,
	0x49, 0x9f, 0x39, 0xf5, 0x45, 0xf2, 0xaf, 0x3b, 0xbd, 0x5d, 0x71, 0xaf, 0x8d, 0x6f, 0x1b, 0xe7,
	0xef, 0xae, 0x46, 0x6e, 0xdd, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xb9, 0x92, 0x06,
	0x09, 0x05, 0x00, 0x00,
}
