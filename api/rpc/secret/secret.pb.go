// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/secret/secret.proto
// DO NOT EDIT!

/*
Package secret is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/secret/secret.proto

It has these top-level messages:
	SecretSpec
	Secret
	CreateSecretRequest
	CreateSecretResponse
*/
package secret

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/appcelerator/amp/api/rpc/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SecretSpec specifies a user-provided secret.
// from: api/specs.proto
type SecretSpec struct {
	Annotations *types.Annotations `protobuf:"bytes,1,opt,name=annotations" json:"annotations,omitempty"`
	// Data is the secret payload - the maximum size is 500KB (that is, 500*1024 bytes)
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Templating controls whether and how to evaluate the secret payload as
	// a template. If it is not set, no templating is used.
	//
	// The currently recognized values are:
	// - golang: Go templating
	Templating *types.Driver `protobuf:"bytes,3,opt,name=templating" json:"templating,omitempty"`
}

func (m *SecretSpec) Reset()                    { *m = SecretSpec{} }
func (m *SecretSpec) String() string            { return proto.CompactTextString(m) }
func (*SecretSpec) ProtoMessage()               {}
func (*SecretSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SecretSpec) GetAnnotations() *types.Annotations {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *SecretSpec) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SecretSpec) GetTemplating() *types.Driver {
	if m != nil {
		return m.Templating
	}
	return nil
}

// Secret represents a secret that should be passed to a container or a node,
// and is immutable.
// from: api/objects.proto
type Secret struct {
	Id   string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta *types.Meta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	// Spec contains the actual secret data, as well as any context around the
	// secret data that the user provides.
	Spec *SecretSpec `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	// Whether the secret is an internal secret (not set by a user) or not.
	Internal bool `protobuf:"varint,4,opt,name=internal" json:"internal,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Secret) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Secret) GetMeta() *types.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Secret) GetSpec() *SecretSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Secret) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

// CreateSecretRequest specifies a new secret (it will not update an existing
// secret) to create.
// from: api/control.proto
type CreateSecretRequest struct {
	Spec *SecretSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *CreateSecretRequest) Reset()                    { *m = CreateSecretRequest{} }
func (m *CreateSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSecretRequest) ProtoMessage()               {}
func (*CreateSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateSecretRequest) GetSpec() *SecretSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// CreateSecretResponse contains the newly created `Secret` corresponding to the
// name in `CreateSecretRequest`.  The `Secret.Spec.Data` field should be nil instead
// of actually containing the secret bytes.
// from: api/control.proto
type CreateSecretResponse struct {
	Secret *Secret `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *CreateSecretResponse) Reset()                    { *m = CreateSecretResponse{} }
func (m *CreateSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSecretResponse) ProtoMessage()               {}
func (*CreateSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateSecretResponse) GetSecret() *Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

func init() {
	proto.RegisterType((*SecretSpec)(nil), "secret.SecretSpec")
	proto.RegisterType((*Secret)(nil), "secret.Secret")
	proto.RegisterType((*CreateSecretRequest)(nil), "secret.CreateSecretRequest")
	proto.RegisterType((*CreateSecretResponse)(nil), "secret.CreateSecretResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SecretService service

type SecretServiceClient interface {
	// CreateSecret creates and return a `CreateSecretResponse` with a `Secret` based
	// on the provided `CreateSecretRequest.SecretSpec`.
	// - Returns `InvalidArgument` if the `CreateSecretRequest.SecretSpec` is malformed,
	//   or if the secret data is too long or contains invalid characters.
	// - Returns an error if the creation fails.
	// From: api/control.proto
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
}

type secretServiceClient struct {
	cc *grpc.ClientConn
}

func NewSecretServiceClient(cc *grpc.ClientConn) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := grpc.Invoke(ctx, "/secret.SecretService/CreateSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecretService service

type SecretServiceServer interface {
	// CreateSecret creates and return a `CreateSecretResponse` with a `Secret` based
	// on the provided `CreateSecretRequest.SecretSpec`.
	// - Returns `InvalidArgument` if the `CreateSecretRequest.SecretSpec` is malformed,
	//   or if the secret data is too long or contains invalid characters.
	// - Returns an error if the creation fails.
	// From: api/control.proto
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
}

func RegisterSecretServiceServer(s *grpc.Server, srv SecretServiceServer) {
	s.RegisterService(&_SecretService_serviceDesc, srv)
}

func _SecretService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretService/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecretService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "secret.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSecret",
			Handler:    _SecretService_CreateSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/secret/secret.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/secret/secret.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0x0d, 0xa5, 0x4e, 0xda, 0x1e, 0x46, 0x0f, 0xa1, 0x0a, 0x96, 0x1c, 0x4a, 0x2f,
	0x26, 0x50, 0x15, 0x4f, 0x0a, 0xa2, 0x37, 0xf1, 0xb2, 0xbd, 0x7a, 0xd9, 0xa6, 0x43, 0x5d, 0x68,
	0x92, 0x75, 0x77, 0x5a, 0xf0, 0xe0, 0xd1, 0xef, 0x2d, 0xec, 0xae, 0xfd, 0x03, 0x45, 0xbc, 0x24,
	0x3b, 0xbc, 0x79, 0xbf, 0x79, 0xbb, 0x03, 0x77, 0x0b, 0xc5, 0xef, 0xab, 0x59, 0x5e, 0x36, 0x55,
	0x21, 0xb5, 0x2e, 0x69, 0x49, 0x46, 0x72, 0x63, 0x0a, 0x59, 0xe9, 0x42, 0x6a, 0x55, 0x18, 0x5d,
	0x16, 0x96, 0x4a, 0x43, 0x1c, 0x7e, 0xb9, 0x36, 0x0d, 0x37, 0xd8, 0xf6, 0xd5, 0xe0, 0xf6, 0x3f,
	0x00, 0xfe, 0xd4, 0x64, 0xfd, 0xd7, 0xdb, 0xb3, 0xef, 0x08, 0x60, 0xea, 0x08, 0x53, 0x4d, 0x25,
	0xde, 0x40, 0x22, 0xeb, 0xba, 0x61, 0xc9, 0xaa, 0xa9, 0x6d, 0x1a, 0x0d, 0xa3, 0x71, 0x32, 0xc1,
	0xdc, 0x3b, 0x1e, 0xb7, 0x8a, 0xd8, 0x6d, 0x43, 0x84, 0x78, 0x2e, 0x59, 0xa6, 0xad, 0x61, 0x34,
	0xee, 0x0a, 0x77, 0xc6, 0x2b, 0x00, 0xa6, 0x4a, 0x2f, 0x25, 0xab, 0x7a, 0x91, 0x1e, 0x3b, 0x50,
	0x2f, 0x80, 0x9e, 0x8d, 0x5a, 0x93, 0x11, 0x3b, 0x0d, 0xd9, 0x17, 0xb4, 0x7d, 0x0c, 0xec, 0x43,
	0x4b, 0xcd, 0xdd, 0xe4, 0x13, 0xd1, 0x52, 0x73, 0xbc, 0x84, 0xb8, 0xa2, 0x00, 0x4f, 0x26, 0x49,
	0x40, 0xbc, 0x12, 0x4b, 0xe1, 0x04, 0x1c, 0x41, 0x6c, 0x35, 0x95, 0x61, 0x06, 0xe6, 0xe1, 0x79,
	0xb6, 0xb7, 0x12, 0x4e, 0xc7, 0x01, 0x74, 0x54, 0xcd, 0x64, 0x6a, 0xb9, 0x4c, 0xe3, 0x61, 0x34,
	0xee, 0x88, 0x4d, 0x9d, 0xdd, 0xc3, 0xe9, 0x93, 0x21, 0xc9, 0xe4, 0x5d, 0x82, 0x3e, 0x56, 0x64,
	0x79, 0x83, 0x8e, 0xfe, 0x46, 0x67, 0x0f, 0x70, 0xb6, 0x6f, 0xb7, 0xba, 0xa9, 0x2d, 0xe1, 0x08,
	0xc2, 0x7a, 0x02, 0xa1, 0xbf, 0x4f, 0x10, 0x41, 0x9d, 0xbc, 0x41, 0x2f, 0x30, 0xc9, 0xac, 0x55,
	0x49, 0xf8, 0x02, 0xdd, 0x5d, 0x20, 0x9e, 0xff, 0x1a, 0x0f, 0xa4, 0x1c, 0x5c, 0x1c, 0x16, 0x7d,
	0x86, 0xec, 0x68, 0xd6, 0x76, 0xab, 0xbe, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x8e, 0xd7,
	0xdf, 0x64, 0x02, 0x00, 0x00,
}
