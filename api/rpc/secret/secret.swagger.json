{
  "swagger": "2.0",
  "info": {
    "title": "github.com/appcelerator/amp/api/rpc/secret/secret.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "ListSecretsRequestFilters": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id_prefixes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name_prefixes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "secretCreateSecretRequest": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/secretSecretSpec"
        }
      },
      "title": "CreateSecretRequest specifies a new secret (it will not update an existing\nsecret) to create.\nfrom: api/control.proto"
    },
    "secretCreateSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/secretSecret"
        }
      },
      "title": "CreateSecretResponse contains the newly created `Secret` corresponding to the\nname in `CreateSecretRequest`.  The `Secret.Spec.Data` field should be nil instead\nof actually containing the secret bytes.\nfrom: api/control.proto"
    },
    "secretListSecretsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/ListSecretsRequestFilters"
        }
      },
      "title": "ListSecretRequest is the request to list all non-internal secrets in the secret store,\nor all secrets filtered by (name or name prefix or id prefix) and labels.\nfrom: api/control.proto"
    },
    "secretListSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/secretSecret"
          }
        }
      },
      "title": "ListSecretResponse contains a list of all the secrets that match the name or\nname prefix filters provided in `ListSecretRequest`.  The `Secret.Spec.Data`\nfield in each `Secret` object should be nil instead of actually containing\nthe secret bytes.\nfrom: api/control.proto"
    },
    "secretRemoveSecretRequest": {
      "type": "object",
      "properties": {
        "secret_id": {
          "type": "string"
        }
      },
      "title": "RemoveSecretRequest contains the ID of the secret that should be removed.  This\nremoves all versions of the secret.\nFrom: api/control.proto"
    },
    "secretRemoveSecretResponse": {
      "type": "object",
      "title": "RemoveSecretResponse is an empty object indicating the successful removal of\na secret.\nFrom: api/control.proto"
    },
    "secretSecret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/typesMeta"
        },
        "spec": {
          "$ref": "#/definitions/secretSecretSpec",
          "description": "Spec contains the actual secret data, as well as any context around the\nsecret data that the user provides."
        },
        "internal": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the secret is an internal secret (not set by a user) or not."
        }
      },
      "title": "Secret represents a secret that should be passed to a container or a node,\nand is immutable.\nfrom: api/objects.proto"
    },
    "secretSecretSpec": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/typesAnnotations"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Data is the secret payload - the maximum size is 500KB (that is, 500*1024 bytes)"
        },
        "templating": {
          "$ref": "#/definitions/typesDriver",
          "description": "Templating controls whether and how to evaluate the secret payload as\na template. If it is not set, no templating is used.\n\nThe currently recognized values are:\n- golang: Go templating"
        }
      },
      "title": "SecretSpec specifies a user-provided secret.\nfrom: api/specs.proto"
    },
    "typesAnnotations": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "indices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesIndexEntry"
          },
          "description": "Indices provides keys and values for indexing this object.\nA single key may have multiple values."
        }
      },
      "description": "Annotations provide useful information to identify API objects. They are\ncommon to all API specs."
    },
    "typesDriver": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Driver is a generic driver type to be used throughout the API. For now, a\ndriver is simply a name and set of options. The field contents depend on the\ntarget use case and driver application. For example, a network driver may\nhave different rules than a volume driver."
    },
    "typesIndexEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "val": {
          "type": "string"
        }
      }
    },
    "typesMeta": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/typesVersion",
          "description": "Version tracks the current version of the object."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Object timestamps.\nNote: can't use stdtime because these fields are nullable."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Meta contains metadata about objects. Every object contains a meta field.\nfrom: api/objects.proto"
    },
    "typesVersion": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "Version tracks the last time an object in the store was updated."
    }
  }
}
