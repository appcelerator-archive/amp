syntax = "proto3";

package secret;
// Attribution: Docker (github.com/docker/swarmkit)
// This proto file based on docker/swarmkit/api/types.proto and docker/swarmkit/api/specs.proto
// This is an interim approach toward leveraging swarmkit types
// Notes: we're not using gogoprotbuf (but maybe we should)

import "github.com/appcelerator/amp/api/rpc/types/types.proto";

// SecretSpec specifies a user-provided secret.
// from: api/specs.proto
message SecretSpec {
  types.Annotations annotations = 1;

  // Data is the secret payload - the maximum size is 500KB (that is, 500*1024 bytes)
  bytes data = 2;

  // Templating controls whether and how to evaluate the secret payload as
  // a template. If it is not set, no templating is used.
  //
  // The currently recognized values are:
  // - golang: Go templating
  types.Driver templating = 3;
}

// Secret represents a secret that should be passed to a container or a node,
// and is immutable.
// from: api/objects.proto
message Secret {
  string id = 1;

  types.Meta meta = 2;

  // Spec contains the actual secret data, as well as any context around the
  // secret data that the user provides.
  SecretSpec spec = 3;

  // Whether the secret is an internal secret (not set by a user) or not.
  bool internal = 4;
}

// CreateSecretRequest specifies a new secret (it will not update an existing
// secret) to create.
// from: api/control.proto
message CreateSecretRequest {
  SecretSpec spec = 1;
}

// CreateSecretResponse contains the newly created `Secret` corresponding to the
// name in `CreateSecretRequest`.  The `Secret.Spec.Data` field should be nil instead
// of actually containing the secret bytes.
// from: api/control.proto
message CreateSecretResponse {
  Secret secret = 1;
}

// ListSecretRequest is the request to list all non-internal secrets in the secret store,
// or all secrets filtered by (name or name prefix or id prefix) and labels.
// from: api/control.proto
message ListSecretsRequest {
  message Filters {
    repeated string names = 1;
    repeated string id_prefixes = 2;
    map<string, string> labels = 3;
    repeated string name_prefixes = 4;
  }

  Filters filters = 1;
}

// ListSecretResponse contains a list of all the secrets that match the name or
// name prefix filters provided in `ListSecretRequest`.  The `Secret.Spec.Data`
// field in each `Secret` object should be nil instead of actually containing
// the secret bytes.
// from: api/control.proto
message ListSecretsResponse {
  repeated Secret secrets = 1;
}

// RemoveSecretRequest contains the ID of the secret that should be removed.  This
// removes all versions of the secret.
// From: api/control.proto
message RemoveSecretRequest {
  string secret_id = 1;
}

// RemoveSecretResponse is an empty object indicating the successful removal of
// a secret.
// From: api/control.proto
message RemoveSecretResponse {}

service SecretService {
  // CreateSecret creates and return a `CreateSecretResponse` with a `Secret` based
  // on the provided `CreateSecretRequest.SecretSpec`.
  // - Returns `InvalidArgument` if the `CreateSecretRequest.SecretSpec` is malformed,
  //   or if the secret data is too long or contains invalid characters.
  // - Returns an error if the creation fails.
  // From: api/control.proto
  rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {}

  // ListSecrets returns a `ListSecretResponse` with a list of all non-internal `Secret`s being
  // managed, or all secrets matching any name in `ListSecretsRequest.Names`, any
  // name prefix in `ListSecretsRequest.NamePrefixes`, any id in
  // `ListSecretsRequest.SecretIDs`, or any id prefix in `ListSecretsRequest.IDPrefixes`.
  // - Returns an error if listing fails.
  // From: api/control.proto
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {}

  // RemoveSecret removes the secret referenced by `RemoveSecretRequest.ID`.
  // - Returns `InvalidArgument` if `RemoveSecretRequest.ID` is empty.
  // - Returns `NotFound` if the a secret named `RemoveSecretRequest.ID` is not found.
  // - Returns an error if the deletion fails.
  // From: api/control.proto
  rpc RemoveSecret(RemoveSecretRequest) returns (RemoveSecretResponse) {}
}
