// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/dashboard/dashboard.proto
// DO NOT EDIT!

/*
Package dashboard is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/dashboard/dashboard.proto

It has these top-level messages:
	CreateRequest
	CreateReply
	GetRequest
	GetReply
	UpdateNameRequest
	UpdateDataRequest
	ListRequest
	ListReply
	RemoveRequest
*/
package dashboard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dashboards "github.com/appcelerator/amp/data/dashboards"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type CreateReply struct {
	Dashboard *dashboards.Dashboard `protobuf:"bytes,1,opt,name=dashboard" json:"dashboard,omitempty"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateReply) GetDashboard() *dashboards.Dashboard {
	if m != nil {
		return m.Dashboard
	}
	return nil
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetReply struct {
	Dashboard *dashboards.Dashboard `protobuf:"bytes,1,opt,name=dashboard" json:"dashboard,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetReply) GetDashboard() *dashboards.Dashboard {
	if m != nil {
		return m.Dashboard
	}
	return nil
}

type UpdateNameRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateNameRequest) Reset()                    { *m = UpdateNameRequest{} }
func (m *UpdateNameRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNameRequest) ProtoMessage()               {}
func (*UpdateNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateNameRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateDataRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *UpdateDataRequest) Reset()                    { *m = UpdateDataRequest{} }
func (m *UpdateDataRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDataRequest) ProtoMessage()               {}
func (*UpdateDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateDataRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListReply struct {
	Dashboards []*dashboards.Dashboard `protobuf:"bytes,1,rep,name=dashboards" json:"dashboards,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListReply) GetDashboards() []*dashboards.Dashboard {
	if m != nil {
		return m.Dashboards
	}
	return nil
}

type RemoveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RemoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "dashboard.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "dashboard.CreateReply")
	proto.RegisterType((*GetRequest)(nil), "dashboard.GetRequest")
	proto.RegisterType((*GetReply)(nil), "dashboard.GetReply")
	proto.RegisterType((*UpdateNameRequest)(nil), "dashboard.UpdateNameRequest")
	proto.RegisterType((*UpdateDataRequest)(nil), "dashboard.UpdateDataRequest")
	proto.RegisterType((*ListRequest)(nil), "dashboard.ListRequest")
	proto.RegisterType((*ListReply)(nil), "dashboard.ListReply")
	proto.RegisterType((*RemoveRequest)(nil), "dashboard.RemoveRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dashboard service

type DashboardClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type dashboardClient struct {
	cc *grpc.ClientConn
}

func NewDashboardClient(cc *grpc.ClientConn) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := grpc.Invoke(ctx, "/dashboard.Dashboard/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/dashboard.Dashboard/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/dashboard.Dashboard/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/dashboard.Dashboard/UpdateName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/dashboard.Dashboard/UpdateData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/dashboard.Dashboard/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dashboard service

type DashboardServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	UpdateName(context.Context, *UpdateNameRequest) (*google_protobuf.Empty, error)
	UpdateData(context.Context, *UpdateDataRequest) (*google_protobuf.Empty, error)
	Remove(context.Context, *RemoveRequest) (*google_protobuf.Empty, error)
}

func RegisterDashboardServer(s *grpc.Server, srv DashboardServer) {
	s.RegisterService(&_Dashboard_serviceDesc, srv)
}

func _Dashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Dashboard/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Dashboard/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Dashboard/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Dashboard/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).UpdateName(ctx, req.(*UpdateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Dashboard/UpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).UpdateData(ctx, req.(*UpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Dashboard/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dashboard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Dashboard_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Dashboard_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Dashboard_List_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _Dashboard_UpdateName_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _Dashboard_UpdateData_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Dashboard_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/dashboard/dashboard.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/dashboard/dashboard.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0xdc, 0x2a, 0x22, 0x13, 0xa5, 0x82, 0x0d, 0x8d, 0x8c, 0x09, 0x6a, 0x59, 0x0e, 0xa0,
	0x1e, 0xbc, 0xa2, 0x11, 0xaa, 0x84, 0x40, 0x48, 0xa5, 0xa8, 0x97, 0xaa, 0x87, 0x48, 0x15, 0xe7,
	0x49, 0xbc, 0xb8, 0x16, 0xb6, 0x77, 0xb1, 0x37, 0x95, 0xa2, 0xaa, 0x17, 0x7e, 0x81, 0x0f, 0xe1,
	0x63, 0xf8, 0x05, 0x3e, 0x04, 0xed, 0x3a, 0xce, 0x6e, 0x1a, 0xbb, 0x07, 0x2e, 0xd6, 0x78, 0x76,
	0xdf, 0x7b, 0xf3, 0x66, 0x66, 0xe1, 0x63, 0x9c, 0xa8, 0xeb, 0xc5, 0x2c, 0x9c, 0x8b, 0x8c, 0xa1,
	0x94, 0x73, 0x9e, 0xf2, 0x02, 0x95, 0x28, 0x18, 0x66, 0x92, 0xa1, 0x4c, 0x58, 0x21, 0xe7, 0x2c,
	0xc2, 0xf2, 0x7a, 0x26, 0xb0, 0x88, 0x6c, 0x14, 0xca, 0x42, 0x28, 0x41, 0x7a, 0xeb, 0x44, 0xf0,
	0xe1, 0x21, 0xa6, 0x08, 0x15, 0x5a, 0x70, 0xe9, 0x84, 0x15, 0x51, 0x30, 0x71, 0xd0, 0xb1, 0x48,
	0x31, 0x8f, 0x99, 0x39, 0x98, 0x2d, 0xbe, 0x31, 0xa9, 0x96, 0x92, 0x97, 0x8c, 0x67, 0x52, 0x2d,
	0xab, 0xef, 0x0a, 0x34, 0x8e, 0x85, 0x88, 0x53, 0x6e, 0xea, 0xc4, 0x3c, 0x17, 0x0a, 0x55, 0x22,
	0xf2, 0x15, 0x25, 0x3d, 0x81, 0xc1, 0xe7, 0x82, 0xa3, 0xe2, 0x53, 0xfe, 0x63, 0xc1, 0x4b, 0x45,
	0x08, 0xec, 0xe6, 0x98, 0x71, 0xbf, 0x73, 0xd8, 0x79, 0xd3, 0x9b, 0x9a, 0x58, 0xe7, 0x74, 0x6d,
	0xbe, 0x57, 0xe5, 0x74, 0x4c, 0x4f, 0xa1, 0x5f, 0x03, 0x65, 0xba, 0x24, 0x13, 0xb0, 0x2e, 0x0d,
	0xb6, 0x7f, 0xbc, 0x1f, 0x3a, 0x06, 0xce, 0xea, 0x70, 0x6a, 0xef, 0xd1, 0x31, 0xc0, 0x39, 0x57,
	0xb5, 0xf2, 0x1e, 0x78, 0x49, 0xb4, 0xd2, 0xf5, 0x92, 0x88, 0x7e, 0x82, 0x47, 0xe6, 0xf4, 0xbf,
	0xe9, 0x4f, 0xe0, 0xc9, 0x95, 0x8c, 0x50, 0xf1, 0x4b, 0xcc, 0x78, 0x8b, 0xca, 0xda, 0xaf, 0x67,
	0xfd, 0x5a, 0xe0, 0x19, 0x2a, 0x7c, 0x00, 0xb8, 0xd5, 0x94, 0x01, 0xf4, 0x2f, 0x92, 0xb2, 0x76,
	0x44, 0x4f, 0xa1, 0x57, 0xfd, 0x6a, 0x0b, 0xef, 0x00, 0x6c, 0xc1, 0x7e, 0xe7, 0x70, 0xa7, 0xdd,
	0x83, 0x73, 0x91, 0x1e, 0xc0, 0x60, 0xca, 0x33, 0x71, 0xd3, 0x66, 0xe0, 0xf8, 0xf7, 0x2e, 0xf4,
	0xd6, 0x50, 0x72, 0x05, 0xdd, 0x6a, 0x2c, 0xc4, 0xb7, 0xdc, 0xe1, 0xc6, 0x88, 0x83, 0x51, 0xc3,
	0x89, 0x4c, 0x97, 0xf4, 0xd9, 0xcf, 0x3f, 0x7f, 0x7f, 0x79, 0x43, 0xba, 0xc7, 0x6e, 0xde, 0x3a,
	0xcb, 0xf7, 0xbe, 0x73, 0x44, 0x2e, 0x61, 0xe7, 0x9c, 0x2b, 0xe2, 0xd4, 0x1b, 0xda, 0xc9, 0x05,
	0xc3, 0xfb, 0x69, 0xcd, 0xf6, 0xdc, 0xb0, 0xed, 0x93, 0xe1, 0x26, 0x1b, 0xbb, 0x4d, 0xa2, 0x3b,
	0x72, 0x01, 0xbb, 0xba, 0x33, 0xc4, 0x2d, 0xc5, 0xe9, 0x5c, 0xf0, 0x74, 0x2b, 0xaf, 0x29, 0x47,
	0x86, 0xf2, 0x31, 0xb9, 0x57, 0x20, 0xf9, 0x0e, 0x60, 0x07, 0x4d, 0xc6, 0x0e, 0x76, 0x6b, 0xfe,
	0xc1, 0x28, 0xac, 0xde, 0x43, 0x58, 0xbf, 0x9c, 0xf0, 0x8b, 0x7e, 0x2c, 0xf4, 0xb5, 0xe1, 0x7e,
	0x19, 0x1c, 0x34, 0x94, 0xcb, 0xf4, 0x56, 0xb0, 0x5b, 0xfd, 0xbd, 0x23, 0x71, 0x2d, 0xa6, 0x97,
	0xa3, 0x41, 0xcc, 0xd9, 0x99, 0x56, 0xb1, 0x57, 0x46, 0xec, 0x45, 0xe0, 0x37, 0x89, 0xe9, 0x4d,
	0xd2, 0x3d, 0xff, 0x0a, 0xdd, 0x6a, 0xf2, 0x1b, 0xa3, 0xdc, 0x58, 0x86, 0x56, 0x81, 0x55, 0xf3,
	0x8f, 0x9a, 0x9a, 0x3f, 0xeb, 0x9a, 0xcb, 0x93, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xea,
	0x25, 0x50, 0xd7, 0x04, 0x00, 0x00,
}
