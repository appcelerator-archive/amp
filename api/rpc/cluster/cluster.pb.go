// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/appcelerator/amp/api/rpc/cluster/cluster.proto

/*
Package cluster is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/cluster/cluster.proto

It has these top-level messages:
	CreateRequest
	CreateReply
	ListRequest
	ListReply
	InfoRequest
	InfoReply
	StatusRequest
	StatusReply
	UpdateRequest
	UpdateReply
	RemoveRequest
	RemoveReply
	NodeListRequest
	NodeListReply
	NodeReply
	EnginePlugin
*/
package cluster

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Compose []byte `protobuf:"bytes,2,opt,name=compose,proto3" json:"compose,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetCompose() []byte {
	if m != nil {
		return m.Compose
	}
	return nil
}

type CreateReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListReply struct {
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type InfoReply struct {
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StatusReply struct {
	Name             string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider         string `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Region           string `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	SwarmStatus      string `protobuf:"bytes,4,opt,name=swarm_status,json=swarmStatus" json:"swarm_status,omitempty"`
	CoreServices     string `protobuf:"bytes,5,opt,name=core_services,json=coreServices" json:"core_services,omitempty"`
	UserServices     string `protobuf:"bytes,6,opt,name=user_services,json=userServices" json:"user_services,omitempty"`
	Endpoint         string `protobuf:"bytes,7,opt,name=endpoint" json:"endpoint,omitempty"`
	NfsEndpoint      string `protobuf:"bytes,8,opt,name=nfs_endpoint,json=nfsEndpoint" json:"nfs_endpoint,omitempty"`
	InternalEndpoint string `protobuf:"bytes,9,opt,name=internal_endpoint,json=internalEndpoint" json:"internal_endpoint,omitempty"`
	InternalPki      string `protobuf:"bytes,10,opt,name=internal_pki,json=internalPki" json:"internal_pki,omitempty"`
	Pki              string `protobuf:"bytes,11,opt,name=pki" json:"pki,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StatusReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatusReply) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *StatusReply) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *StatusReply) GetSwarmStatus() string {
	if m != nil {
		return m.SwarmStatus
	}
	return ""
}

func (m *StatusReply) GetCoreServices() string {
	if m != nil {
		return m.CoreServices
	}
	return ""
}

func (m *StatusReply) GetUserServices() string {
	if m != nil {
		return m.UserServices
	}
	return ""
}

func (m *StatusReply) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *StatusReply) GetNfsEndpoint() string {
	if m != nil {
		return m.NfsEndpoint
	}
	return ""
}

func (m *StatusReply) GetInternalEndpoint() string {
	if m != nil {
		return m.InternalEndpoint
	}
	return ""
}

func (m *StatusReply) GetInternalPki() string {
	if m != nil {
		return m.InternalPki
	}
	return ""
}

func (m *StatusReply) GetPki() string {
	if m != nil {
		return m.Pki
	}
	return ""
}

type UpdateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpdateReply) Reset()                    { *m = UpdateReply{} }
func (m *UpdateReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()               {}
func (*UpdateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemoveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RemoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemoveReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveReply) Reset()                    { *m = RemoveReply{} }
func (m *RemoveReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveReply) ProtoMessage()               {}
func (*RemoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RemoveReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NodeListRequest struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Role        string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
	NodeLabel   string `protobuf:"bytes,4,opt,name=node_label,json=nodeLabel" json:"node_label,omitempty"`
	EngineLabel string `protobuf:"bytes,5,opt,name=engine_label,json=engineLabel" json:"engine_label,omitempty"`
}

func (m *NodeListRequest) Reset()                    { *m = NodeListRequest{} }
func (m *NodeListRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeListRequest) ProtoMessage()               {}
func (*NodeListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NodeListRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeListRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *NodeListRequest) GetNodeLabel() string {
	if m != nil {
		return m.NodeLabel
	}
	return ""
}

func (m *NodeListRequest) GetEngineLabel() string {
	if m != nil {
		return m.EngineLabel
	}
	return ""
}

type NodeListReply struct {
	Nodes []*NodeReply `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodeListReply) Reset()                    { *m = NodeListReply{} }
func (m *NodeListReply) String() string            { return proto.CompactTextString(m) }
func (*NodeListReply) ProtoMessage()               {}
func (*NodeListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NodeListReply) GetNodes() []*NodeReply {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeReply struct {
	Id            string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Hostname      string            `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Status        string            `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Availability  string            `protobuf:"bytes,4,opt,name=availability" json:"availability,omitempty"`
	Role          string            `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	ManagerLeader bool              `protobuf:"varint,6,opt,name=manager_leader,json=managerLeader" json:"manager_leader,omitempty"`
	NanoCpus      int64             `protobuf:"varint,7,opt,name=nano_cpus,json=nanoCpus" json:"nano_cpus,omitempty"`
	MemoryBytes   int64             `protobuf:"varint,8,opt,name=memory_bytes,json=memoryBytes" json:"memory_bytes,omitempty"`
	NodeLabels    map[string]string `protobuf:"bytes,9,rep,name=node_labels,json=nodeLabels" json:"node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EngineLabels  map[string]string `protobuf:"bytes,10,rep,name=engine_labels,json=engineLabels" json:"engine_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EnginePlugins []*EnginePlugin   `protobuf:"bytes,11,rep,name=engine_plugins,json=enginePlugins" json:"engine_plugins,omitempty"`
	EngineVersion string            `protobuf:"bytes,12,opt,name=engine_version,json=engineVersion" json:"engine_version,omitempty"`
}

func (m *NodeReply) Reset()                    { *m = NodeReply{} }
func (m *NodeReply) String() string            { return proto.CompactTextString(m) }
func (*NodeReply) ProtoMessage()               {}
func (*NodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NodeReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeReply) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeReply) GetAvailability() string {
	if m != nil {
		return m.Availability
	}
	return ""
}

func (m *NodeReply) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *NodeReply) GetManagerLeader() bool {
	if m != nil {
		return m.ManagerLeader
	}
	return false
}

func (m *NodeReply) GetNanoCpus() int64 {
	if m != nil {
		return m.NanoCpus
	}
	return 0
}

func (m *NodeReply) GetMemoryBytes() int64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

func (m *NodeReply) GetNodeLabels() map[string]string {
	if m != nil {
		return m.NodeLabels
	}
	return nil
}

func (m *NodeReply) GetEngineLabels() map[string]string {
	if m != nil {
		return m.EngineLabels
	}
	return nil
}

func (m *NodeReply) GetEnginePlugins() []*EnginePlugin {
	if m != nil {
		return m.EnginePlugins
	}
	return nil
}

func (m *NodeReply) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

type EnginePlugin struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EnginePlugin) Reset()                    { *m = EnginePlugin{} }
func (m *EnginePlugin) String() string            { return proto.CompactTextString(m) }
func (*EnginePlugin) ProtoMessage()               {}
func (*EnginePlugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EnginePlugin) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EnginePlugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "cluster.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "cluster.CreateReply")
	proto.RegisterType((*ListRequest)(nil), "cluster.ListRequest")
	proto.RegisterType((*ListReply)(nil), "cluster.ListReply")
	proto.RegisterType((*InfoRequest)(nil), "cluster.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "cluster.InfoReply")
	proto.RegisterType((*StatusRequest)(nil), "cluster.StatusRequest")
	proto.RegisterType((*StatusReply)(nil), "cluster.StatusReply")
	proto.RegisterType((*UpdateRequest)(nil), "cluster.UpdateRequest")
	proto.RegisterType((*UpdateReply)(nil), "cluster.UpdateReply")
	proto.RegisterType((*RemoveRequest)(nil), "cluster.RemoveRequest")
	proto.RegisterType((*RemoveReply)(nil), "cluster.RemoveReply")
	proto.RegisterType((*NodeListRequest)(nil), "cluster.NodeListRequest")
	proto.RegisterType((*NodeListReply)(nil), "cluster.NodeListReply")
	proto.RegisterType((*NodeReply)(nil), "cluster.NodeReply")
	proto.RegisterType((*EnginePlugin)(nil), "cluster.EnginePlugin")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	ClusterCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	ClusterList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	ClusterNodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListReply, error)
	ClusterStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	ClusterUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	ClusterRemove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) ClusterCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/ClusterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/ClusterList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterNodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListReply, error) {
	out := new(NodeListReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/ClusterNodeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/ClusterStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/ClusterUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterRemove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/ClusterRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	ClusterCreate(context.Context, *CreateRequest) (*CreateReply, error)
	ClusterList(context.Context, *ListRequest) (*ListReply, error)
	ClusterNodeList(context.Context, *NodeListRequest) (*NodeListReply, error)
	ClusterStatus(context.Context, *StatusRequest) (*StatusReply, error)
	ClusterUpdate(context.Context, *UpdateRequest) (*UpdateReply, error)
	ClusterRemove(context.Context, *RemoveRequest) (*RemoveReply, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_ClusterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/ClusterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterCreate(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/ClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/ClusterNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterNodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/ClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/ClusterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/ClusterRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterRemove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClusterCreate",
			Handler:    _Cluster_ClusterCreate_Handler,
		},
		{
			MethodName: "ClusterList",
			Handler:    _Cluster_ClusterList_Handler,
		},
		{
			MethodName: "ClusterNodeList",
			Handler:    _Cluster_ClusterNodeList_Handler,
		},
		{
			MethodName: "ClusterStatus",
			Handler:    _Cluster_ClusterStatus_Handler,
		},
		{
			MethodName: "ClusterUpdate",
			Handler:    _Cluster_ClusterUpdate_Handler,
		},
		{
			MethodName: "ClusterRemove",
			Handler:    _Cluster_ClusterRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/cluster/cluster.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/cluster/cluster.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0x7f, 0x92, 0xd8, 0x67, 0xbd, 0x49, 0x33, 0x4d, 0xc3, 0xb2, 0x6d, 0xd4, 0xb0, 0x80,
	0x14, 0x15, 0x29, 0x16, 0x45, 0x42, 0xb4, 0xa2, 0x42, 0x22, 0xf2, 0x45, 0xa5, 0x80, 0xaa, 0xad,
	0xa8, 0x10, 0x5c, 0x58, 0x63, 0x7b, 0xe2, 0x8e, 0xb2, 0x3b, 0x33, 0xcc, 0xcc, 0x1a, 0x59, 0x88,
	0x1b, 0x6e, 0xb9, 0xe4, 0x15, 0x78, 0x23, 0x1e, 0xa1, 0x3c, 0x08, 0x9a, 0x9f, 0x5d, 0xcf, 0xc6,
	0x16, 0x52, 0xaf, 0x3c, 0xe7, 0x3b, 0xdf, 0x7c, 0x3b, 0x73, 0xfe, 0xc6, 0xf0, 0x6c, 0x49, 0xf5,
	0xdb, 0x6a, 0x76, 0x39, 0xe7, 0xe5, 0x18, 0x0b, 0x31, 0x27, 0x05, 0x91, 0x58, 0x73, 0x39, 0xc6,
	0xa5, 0x18, 0x63, 0x41, 0xc7, 0x52, 0xcc, 0xc7, 0xf3, 0xa2, 0x52, 0x9a, 0xc8, 0xfa, 0xf7, 0x52,
	0x48, 0xae, 0x39, 0x3a, 0xf0, 0x66, 0xfa, 0x68, 0xc9, 0xf9, 0xb2, 0x20, 0x96, 0x8e, 0x19, 0xe3,
	0x1a, 0x6b, 0xca, 0x99, 0x72, 0xb4, 0xec, 0x05, 0xc4, 0x57, 0x92, 0x60, 0x4d, 0x72, 0xf2, 0x4b,
	0x45, 0x94, 0x46, 0x08, 0xfa, 0x0c, 0x97, 0x24, 0xe9, 0x9c, 0x77, 0x2e, 0x86, 0xb9, 0x5d, 0xa3,
	0x04, 0x0e, 0xe6, 0xbc, 0x14, 0x5c, 0x91, 0xa4, 0x7b, 0xde, 0xb9, 0x18, 0xe5, 0xb5, 0x99, 0x9d,
	0x41, 0x54, 0x6f, 0x17, 0xc5, 0x1a, 0x1d, 0x42, 0x97, 0x2e, 0xfc, 0xd6, 0x2e, 0x5d, 0x64, 0x31,
	0x44, 0xd7, 0x54, 0x69, 0xaf, 0x9d, 0x45, 0x30, 0x74, 0xa6, 0x28, 0xd6, 0xc6, 0xf7, 0x92, 0xdd,
	0xf0, 0xc0, 0xe7, 0x4c, 0xe3, 0x3b, 0x82, 0xf8, 0xb5, 0xc6, 0xba, 0x52, 0xb5, 0xf7, 0x5d, 0x17,
	0xa2, 0x1a, 0x31, 0x1f, 0xda, 0x75, 0xca, 0x14, 0x06, 0x42, 0xf2, 0x15, 0x5d, 0x10, 0x69, 0x8f,
	0x39, 0xcc, 0x1b, 0x1b, 0x9d, 0xc2, 0xbe, 0x24, 0x4b, 0xca, 0x59, 0xd2, 0xb3, 0x1e, 0x6f, 0xa1,
	0x8f, 0x60, 0xa4, 0x7e, 0xc5, 0xb2, 0x9c, 0x2a, 0x2b, 0x9e, 0xf4, 0xad, 0x37, 0xb2, 0x98, 0xfb,
	0x1e, 0xfa, 0x18, 0xe2, 0x39, 0x97, 0x64, 0xaa, 0x88, 0x5c, 0xd1, 0x39, 0x51, 0xc9, 0x9e, 0xe5,
	0x8c, 0x0c, 0xf8, 0xda, 0x63, 0x86, 0x54, 0x29, 0x22, 0x37, 0xa4, 0x7d, 0x47, 0x32, 0x60, 0x43,
	0x4a, 0x61, 0x40, 0xd8, 0x42, 0x70, 0xca, 0x74, 0x72, 0xe0, 0x0e, 0x58, 0xdb, 0xe6, 0x20, 0xec,
	0x46, 0x4d, 0x1b, 0xff, 0xc0, 0x1d, 0x84, 0xdd, 0xa8, 0x49, 0x4d, 0xf9, 0x0c, 0x8e, 0x29, 0xd3,
	0x44, 0x32, 0x5c, 0x6c, 0x78, 0x43, 0xcb, 0xbb, 0x57, 0x3b, 0x26, 0x81, 0x5e, 0x43, 0x16, 0xb7,
	0x34, 0x01, 0xa7, 0x57, 0x63, 0xaf, 0x6e, 0x29, 0xba, 0x07, 0x3d, 0xe3, 0x89, 0xac, 0xc7, 0x2c,
	0xb3, 0xc7, 0x10, 0xff, 0x20, 0x16, 0x41, 0x31, 0xdc, 0xcd, 0xe7, 0x19, 0x44, 0x35, 0x61, 0x57,
	0xba, 0x1f, 0x43, 0x9c, 0x93, 0x92, 0xaf, 0xfe, 0x6f, 0x7f, 0x4d, 0xd8, 0xb5, 0xff, 0xcf, 0x0e,
	0x1c, 0x7d, 0xcf, 0x17, 0x24, 0xa8, 0x99, 0xbb, 0x9c, 0x26, 0xf3, 0xdd, 0x20, 0xf3, 0x08, 0xfa,
	0x92, 0x17, 0xc4, 0xe7, 0xd6, 0xae, 0xd1, 0x19, 0x00, 0xe3, 0x0b, 0x32, 0x2d, 0xf0, 0x8c, 0x14,
	0x3e, 0xaf, 0x43, 0x83, 0x5c, 0x1b, 0xc0, 0xc4, 0x87, 0xb0, 0x25, 0x65, 0x35, 0xc1, 0x25, 0x35,
	0x72, 0x98, 0xa5, 0x64, 0xcf, 0x20, 0xde, 0x1c, 0xc6, 0x1c, 0xf7, 0x02, 0xf6, 0x8c, 0x80, 0x4a,
	0x3a, 0xe7, 0xbd, 0x8b, 0xe8, 0x29, 0xba, 0xac, 0x3b, 0xce, 0xd0, 0x2c, 0x25, 0x77, 0x84, 0xec,
	0x5d, 0x1f, 0x86, 0x0d, 0xb8, 0x75, 0x85, 0x14, 0x06, 0x6f, 0xb9, 0xd2, 0xc1, 0x35, 0x1a, 0xdb,
	0x14, 0xaa, 0x2f, 0x45, 0x5f, 0xa8, 0xce, 0x42, 0x19, 0x8c, 0xf0, 0x0a, 0xd3, 0x02, 0xcf, 0x68,
	0x41, 0xf5, 0xda, 0x5f, 0xa8, 0x85, 0x35, 0x61, 0xd8, 0x0b, 0xc2, 0xf0, 0x29, 0x1c, 0x96, 0x98,
	0xe1, 0x25, 0x91, 0xd3, 0x82, 0x60, 0xd3, 0x1a, 0xa6, 0x32, 0x07, 0x79, 0xec, 0xd1, 0x6b, 0x0b,
	0xa2, 0x87, 0x30, 0x64, 0x98, 0xf1, 0xe9, 0x5c, 0x54, 0xca, 0xd6, 0x66, 0x2f, 0x1f, 0x18, 0xe0,
	0x4a, 0x54, 0xca, 0xc4, 0xaa, 0x24, 0x25, 0x97, 0xeb, 0xe9, 0x6c, 0xad, 0x89, 0xb2, 0xb5, 0xd9,
	0xcb, 0x23, 0x87, 0x7d, 0x6b, 0x20, 0x74, 0x05, 0xd1, 0x26, 0xda, 0x2a, 0x19, 0xda, 0x00, 0x65,
	0xdb, 0x01, 0xb2, 0x2b, 0x1b, 0x5e, 0x35, 0x61, 0x5a, 0xae, 0x73, 0x68, 0x52, 0xa2, 0xd0, 0x4b,
	0x88, 0xc3, 0x9c, 0xa8, 0x04, 0xac, 0xcc, 0x27, 0x3b, 0x64, 0x26, 0x9b, 0x3c, 0x79, 0xa1, 0x51,
	0x90, 0x3a, 0x85, 0xbe, 0x86, 0x43, 0x2f, 0x25, 0x8a, 0x6a, 0x49, 0x99, 0x4a, 0x22, 0xab, 0xf5,
	0xa0, 0xd1, 0x72, 0x0a, 0xaf, 0xac, 0x37, 0xf7, 0xdf, 0x75, 0x96, 0x32, 0x41, 0xf3, 0xbb, 0x57,
	0x44, 0x2a, 0x33, 0x35, 0x46, 0x36, 0xa4, 0x9e, 0xf6, 0xc6, 0x81, 0xe9, 0x0b, 0x5f, 0xad, 0x9b,
	0x53, 0x98, 0x9e, 0xba, 0x25, 0x6b, 0x9f, 0x6b, 0xb3, 0x44, 0x27, 0xb0, 0xb7, 0xc2, 0x45, 0x55,
	0x67, 0xda, 0x19, 0xcf, 0xbb, 0x5f, 0x75, 0xd2, 0x6f, 0xe0, 0x78, 0xeb, 0x1a, 0xef, 0x23, 0x90,
	0x7d, 0x09, 0xa3, 0xf0, 0x16, 0x26, 0xff, 0x7a, 0x2d, 0x9a, 0xa1, 0x68, 0xd6, 0xbb, 0xda, 0xe5,
	0xe9, 0xdf, 0x7d, 0x38, 0xb8, 0x72, 0x61, 0x40, 0x6f, 0x20, 0xf6, 0x4b, 0x37, 0xc7, 0xd1, 0x69,
	0x13, 0xa1, 0xd6, 0xbb, 0x90, 0x9e, 0x6c, 0xe1, 0x66, 0x50, 0x7f, 0xf0, 0xc7, 0x3f, 0xff, 0xfe,
	0xd5, 0x3d, 0xce, 0x46, 0xe3, 0xd5, 0xe7, 0xf5, 0x03, 0xa4, 0x9e, 0x77, 0x9e, 0xa0, 0xef, 0x20,
	0xf2, 0xba, 0xa6, 0x7f, 0xd0, 0x66, 0x77, 0xd0, 0xdb, 0x29, 0xba, 0x83, 0x1a, 0xc5, 0x13, 0xab,
	0x78, 0x88, 0x5a, 0x8a, 0x68, 0x0a, 0x47, 0x5e, 0xae, 0x6e, 0x49, 0x94, 0xb4, 0xca, 0x22, 0x94,
	0x3d, 0xdd, 0xe1, 0x31, 0xd2, 0xa9, 0x95, 0x3e, 0x41, 0x28, 0x94, 0x1e, 0xdb, 0x8e, 0x45, 0x3f,
	0x35, 0x71, 0xf0, 0x63, 0x7f, 0x23, 0xd2, 0x7a, 0x89, 0x82, 0x38, 0x04, 0xef, 0x51, 0xf6, 0xd0,
	0x4a, 0x3f, 0x40, 0xf7, 0x5b, 0xd2, 0xbe, 0x77, 0x7f, 0x6e, 0xb4, 0xdd, 0xf0, 0x0c, 0xb4, 0x5b,
	0xe3, 0x36, 0xd0, 0x0e, 0xa6, 0x6c, 0xf6, 0xc8, 0x6a, 0x9f, 0xa6, 0xc7, 0x2d, 0xed, 0xdf, 0xe8,
	0xe2, 0x77, 0x13, 0xe8, 0x1f, 0x1b, 0x71, 0x37, 0x59, 0x03, 0xf1, 0xd6, 0x2c, 0x0e, 0xc4, 0x83,
	0x11, 0x9c, 0x7d, 0x68, 0xc5, 0xef, 0x3f, 0xd9, 0x16, 0x9f, 0xed, 0xdb, 0x7f, 0x08, 0x5f, 0xfc,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x23, 0xc1, 0x97, 0x85, 0x08, 0x00, 0x00,
}
