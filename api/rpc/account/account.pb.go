// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/account/account.proto
// DO NOT EDIT!

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/account/account.proto

It has these top-level messages:
	SignUpRequest
	VerificationRequest
	LogInRequest
	LogInReply
	SwitchRequest
	SwitchAnswer
	PasswordResetRequest
	PasswordSetRequest
	PasswordChangeRequest
	ForgotLoginRequest
	GetUserRequest
	GetUserReply
	GetUserOrganizationsRequest
	GetUserOrganizationsReply
	ListUsersRequest
	ListUsersReply
	DeleteUserRequest
	CreateOrganizationRequest
	AddUserToOrganizationRequest
	RemoveUserFromOrganizationRequest
	ChangeOrganizationMemberRoleRequest
	GetOrganizationRequest
	GetOrganizationReply
	ListOrganizationsRequest
	ListOrganizationsReply
	DeleteOrganizationRequest
	CreateTeamRequest
	AddUserToTeamRequest
	RemoveUserFromTeamRequest
	ChangeTeamNameRequest
	GetTeamRequest
	GetTeamReply
	ListTeamsRequest
	ListTeamsReply
	DeleteTeamRequest
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import accounts "github.com/appcelerator/amp/data/accounts"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Users
type SignUpRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Url      string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
}

func (m *SignUpRequest) Reset()                    { *m = SignUpRequest{} }
func (m *SignUpRequest) String() string            { return proto.CompactTextString(m) }
func (*SignUpRequest) ProtoMessage()               {}
func (*SignUpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignUpRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SignUpRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SignUpRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SignUpRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type VerificationRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *VerificationRequest) Reset()                    { *m = VerificationRequest{} }
func (m *VerificationRequest) String() string            { return proto.CompactTextString(m) }
func (*VerificationRequest) ProtoMessage()               {}
func (*VerificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VerificationRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LogInRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LogInRequest) Reset()                    { *m = LogInRequest{} }
func (m *LogInRequest) String() string            { return proto.CompactTextString(m) }
func (*LogInRequest) ProtoMessage()               {}
func (*LogInRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogInRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogInRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LogInReply struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *LogInReply) Reset()                    { *m = LogInReply{} }
func (m *LogInReply) String() string            { return proto.CompactTextString(m) }
func (*LogInReply) ProtoMessage()               {}
func (*LogInReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogInReply) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type SwitchRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *SwitchRequest) Reset()                    { *m = SwitchRequest{} }
func (m *SwitchRequest) String() string            { return proto.CompactTextString(m) }
func (*SwitchRequest) ProtoMessage()               {}
func (*SwitchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SwitchRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type SwitchAnswer struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *SwitchAnswer) Reset()                    { *m = SwitchAnswer{} }
func (m *SwitchAnswer) String() string            { return proto.CompactTextString(m) }
func (*SwitchAnswer) ProtoMessage()               {}
func (*SwitchAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SwitchAnswer) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type PasswordResetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PasswordResetRequest) Reset()                    { *m = PasswordResetRequest{} }
func (m *PasswordResetRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordResetRequest) ProtoMessage()               {}
func (*PasswordResetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PasswordResetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PasswordSetRequest struct {
	Token    string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *PasswordSetRequest) Reset()                    { *m = PasswordSetRequest{} }
func (m *PasswordSetRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordSetRequest) ProtoMessage()               {}
func (*PasswordSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PasswordSetRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PasswordSetRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type PasswordChangeRequest struct {
	ExistingPassword string `protobuf:"bytes,1,opt,name=existingPassword" json:"existingPassword,omitempty"`
	NewPassword      string `protobuf:"bytes,2,opt,name=newPassword" json:"newPassword,omitempty"`
}

func (m *PasswordChangeRequest) Reset()                    { *m = PasswordChangeRequest{} }
func (m *PasswordChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordChangeRequest) ProtoMessage()               {}
func (*PasswordChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PasswordChangeRequest) GetExistingPassword() string {
	if m != nil {
		return m.ExistingPassword
	}
	return ""
}

func (m *PasswordChangeRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type ForgotLoginRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *ForgotLoginRequest) Reset()                    { *m = ForgotLoginRequest{} }
func (m *ForgotLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*ForgotLoginRequest) ProtoMessage()               {}
func (*ForgotLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ForgotLoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type GetUserRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUserReply struct {
	User *accounts.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetUserReply) Reset()                    { *m = GetUserReply{} }
func (m *GetUserReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserReply) ProtoMessage()               {}
func (*GetUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetUserReply) GetUser() *accounts.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserOrganizationsRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetUserOrganizationsRequest) Reset()                    { *m = GetUserOrganizationsRequest{} }
func (m *GetUserOrganizationsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserOrganizationsRequest) ProtoMessage()               {}
func (*GetUserOrganizationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetUserOrganizationsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUserOrganizationsReply struct {
	Organizations []*accounts.Organization `protobuf:"bytes,1,rep,name=organizations" json:"organizations,omitempty"`
}

func (m *GetUserOrganizationsReply) Reset()                    { *m = GetUserOrganizationsReply{} }
func (m *GetUserOrganizationsReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserOrganizationsReply) ProtoMessage()               {}
func (*GetUserOrganizationsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetUserOrganizationsReply) GetOrganizations() []*accounts.Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type ListUsersRequest struct {
}

func (m *ListUsersRequest) Reset()                    { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()               {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ListUsersReply struct {
	Users []*accounts.User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *ListUsersReply) Reset()                    { *m = ListUsersReply{} }
func (m *ListUsersReply) String() string            { return proto.CompactTextString(m) }
func (*ListUsersReply) ProtoMessage()               {}
func (*ListUsersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListUsersReply) GetUsers() []*accounts.User {
	if m != nil {
		return m.Users
	}
	return nil
}

type DeleteUserRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Organizations
type CreateOrganizationRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *CreateOrganizationRequest) Reset()                    { *m = CreateOrganizationRequest{} }
func (m *CreateOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateOrganizationRequest) ProtoMessage()               {}
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateOrganizationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AddUserToOrganizationRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	UserName         string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (m *AddUserToOrganizationRequest) Reset()                    { *m = AddUserToOrganizationRequest{} }
func (m *AddUserToOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserToOrganizationRequest) ProtoMessage()               {}
func (*AddUserToOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AddUserToOrganizationRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *AddUserToOrganizationRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type RemoveUserFromOrganizationRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	UserName         string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (m *RemoveUserFromOrganizationRequest) Reset()         { *m = RemoveUserFromOrganizationRequest{} }
func (m *RemoveUserFromOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveUserFromOrganizationRequest) ProtoMessage()    {}
func (*RemoveUserFromOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *RemoveUserFromOrganizationRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *RemoveUserFromOrganizationRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type ChangeOrganizationMemberRoleRequest struct {
	OrganizationName string                    `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	UserName         string                    `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Role             accounts.OrganizationRole `protobuf:"varint,3,opt,name=role,enum=accounts.OrganizationRole" json:"role,omitempty"`
}

func (m *ChangeOrganizationMemberRoleRequest) Reset()         { *m = ChangeOrganizationMemberRoleRequest{} }
func (m *ChangeOrganizationMemberRoleRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeOrganizationMemberRoleRequest) ProtoMessage()    {}
func (*ChangeOrganizationMemberRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *ChangeOrganizationMemberRoleRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *ChangeOrganizationMemberRoleRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ChangeOrganizationMemberRoleRequest) GetRole() accounts.OrganizationRole {
	if m != nil {
		return m.Role
	}
	return accounts.OrganizationRole_ORGANIZATION_MEMBER
}

type GetOrganizationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetOrganizationRequest) Reset()                    { *m = GetOrganizationRequest{} }
func (m *GetOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationRequest) ProtoMessage()               {}
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetOrganizationReply struct {
	Organization *accounts.Organization `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
}

func (m *GetOrganizationReply) Reset()                    { *m = GetOrganizationReply{} }
func (m *GetOrganizationReply) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationReply) ProtoMessage()               {}
func (*GetOrganizationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetOrganizationReply) GetOrganization() *accounts.Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

type ListOrganizationsRequest struct {
}

func (m *ListOrganizationsRequest) Reset()                    { *m = ListOrganizationsRequest{} }
func (m *ListOrganizationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListOrganizationsRequest) ProtoMessage()               {}
func (*ListOrganizationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type ListOrganizationsReply struct {
	Organizations []*accounts.Organization `protobuf:"bytes,1,rep,name=organizations" json:"organizations,omitempty"`
}

func (m *ListOrganizationsReply) Reset()                    { *m = ListOrganizationsReply{} }
func (m *ListOrganizationsReply) String() string            { return proto.CompactTextString(m) }
func (*ListOrganizationsReply) ProtoMessage()               {}
func (*ListOrganizationsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ListOrganizationsReply) GetOrganizations() []*accounts.Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type DeleteOrganizationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteOrganizationRequest) Reset()                    { *m = DeleteOrganizationRequest{} }
func (m *DeleteOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteOrganizationRequest) ProtoMessage()               {}
func (*DeleteOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeleteOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Teams
type CreateTeamRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	TeamName         string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
}

func (m *CreateTeamRequest) Reset()                    { *m = CreateTeamRequest{} }
func (m *CreateTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamRequest) ProtoMessage()               {}
func (*CreateTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CreateTeamRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *CreateTeamRequest) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

type AddUserToTeamRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	TeamName         string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	UserName         string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (m *AddUserToTeamRequest) Reset()                    { *m = AddUserToTeamRequest{} }
func (m *AddUserToTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserToTeamRequest) ProtoMessage()               {}
func (*AddUserToTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AddUserToTeamRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *AddUserToTeamRequest) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *AddUserToTeamRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type RemoveUserFromTeamRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	TeamName         string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	UserName         string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (m *RemoveUserFromTeamRequest) Reset()                    { *m = RemoveUserFromTeamRequest{} }
func (m *RemoveUserFromTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserFromTeamRequest) ProtoMessage()               {}
func (*RemoveUserFromTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RemoveUserFromTeamRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *RemoveUserFromTeamRequest) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *RemoveUserFromTeamRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type ChangeTeamNameRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	TeamName         string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	NewName          string `protobuf:"bytes,3,opt,name=new_name,json=newName" json:"new_name,omitempty"`
}

func (m *ChangeTeamNameRequest) Reset()                    { *m = ChangeTeamNameRequest{} }
func (m *ChangeTeamNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeTeamNameRequest) ProtoMessage()               {}
func (*ChangeTeamNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ChangeTeamNameRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *ChangeTeamNameRequest) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *ChangeTeamNameRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type GetTeamRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	TeamName         string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
}

func (m *GetTeamRequest) Reset()                    { *m = GetTeamRequest{} }
func (m *GetTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamRequest) ProtoMessage()               {}
func (*GetTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetTeamRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *GetTeamRequest) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

type GetTeamReply struct {
	Team *accounts.Team `protobuf:"bytes,1,opt,name=team" json:"team,omitempty"`
}

func (m *GetTeamReply) Reset()                    { *m = GetTeamReply{} }
func (m *GetTeamReply) String() string            { return proto.CompactTextString(m) }
func (*GetTeamReply) ProtoMessage()               {}
func (*GetTeamReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetTeamReply) GetTeam() *accounts.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type ListTeamsRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
}

func (m *ListTeamsRequest) Reset()                    { *m = ListTeamsRequest{} }
func (m *ListTeamsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTeamsRequest) ProtoMessage()               {}
func (*ListTeamsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ListTeamsRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

type ListTeamsReply struct {
	Teams []*accounts.Team `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
}

func (m *ListTeamsReply) Reset()                    { *m = ListTeamsReply{} }
func (m *ListTeamsReply) String() string            { return proto.CompactTextString(m) }
func (*ListTeamsReply) ProtoMessage()               {}
func (*ListTeamsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListTeamsReply) GetTeams() []*accounts.Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type DeleteTeamRequest struct {
	OrganizationName string `protobuf:"bytes,1,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	TeamName         string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
}

func (m *DeleteTeamRequest) Reset()                    { *m = DeleteTeamRequest{} }
func (m *DeleteTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTeamRequest) ProtoMessage()               {}
func (*DeleteTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DeleteTeamRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *DeleteTeamRequest) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func init() {
	proto.RegisterType((*SignUpRequest)(nil), "account.SignUpRequest")
	proto.RegisterType((*VerificationRequest)(nil), "account.VerificationRequest")
	proto.RegisterType((*LogInRequest)(nil), "account.LogInRequest")
	proto.RegisterType((*LogInReply)(nil), "account.LogInReply")
	proto.RegisterType((*SwitchRequest)(nil), "account.SwitchRequest")
	proto.RegisterType((*SwitchAnswer)(nil), "account.SwitchAnswer")
	proto.RegisterType((*PasswordResetRequest)(nil), "account.PasswordResetRequest")
	proto.RegisterType((*PasswordSetRequest)(nil), "account.PasswordSetRequest")
	proto.RegisterType((*PasswordChangeRequest)(nil), "account.PasswordChangeRequest")
	proto.RegisterType((*ForgotLoginRequest)(nil), "account.ForgotLoginRequest")
	proto.RegisterType((*GetUserRequest)(nil), "account.GetUserRequest")
	proto.RegisterType((*GetUserReply)(nil), "account.GetUserReply")
	proto.RegisterType((*GetUserOrganizationsRequest)(nil), "account.GetUserOrganizationsRequest")
	proto.RegisterType((*GetUserOrganizationsReply)(nil), "account.GetUserOrganizationsReply")
	proto.RegisterType((*ListUsersRequest)(nil), "account.ListUsersRequest")
	proto.RegisterType((*ListUsersReply)(nil), "account.ListUsersReply")
	proto.RegisterType((*DeleteUserRequest)(nil), "account.DeleteUserRequest")
	proto.RegisterType((*CreateOrganizationRequest)(nil), "account.CreateOrganizationRequest")
	proto.RegisterType((*AddUserToOrganizationRequest)(nil), "account.AddUserToOrganizationRequest")
	proto.RegisterType((*RemoveUserFromOrganizationRequest)(nil), "account.RemoveUserFromOrganizationRequest")
	proto.RegisterType((*ChangeOrganizationMemberRoleRequest)(nil), "account.ChangeOrganizationMemberRoleRequest")
	proto.RegisterType((*GetOrganizationRequest)(nil), "account.GetOrganizationRequest")
	proto.RegisterType((*GetOrganizationReply)(nil), "account.GetOrganizationReply")
	proto.RegisterType((*ListOrganizationsRequest)(nil), "account.ListOrganizationsRequest")
	proto.RegisterType((*ListOrganizationsReply)(nil), "account.ListOrganizationsReply")
	proto.RegisterType((*DeleteOrganizationRequest)(nil), "account.DeleteOrganizationRequest")
	proto.RegisterType((*CreateTeamRequest)(nil), "account.CreateTeamRequest")
	proto.RegisterType((*AddUserToTeamRequest)(nil), "account.AddUserToTeamRequest")
	proto.RegisterType((*RemoveUserFromTeamRequest)(nil), "account.RemoveUserFromTeamRequest")
	proto.RegisterType((*ChangeTeamNameRequest)(nil), "account.ChangeTeamNameRequest")
	proto.RegisterType((*GetTeamRequest)(nil), "account.GetTeamRequest")
	proto.RegisterType((*GetTeamReply)(nil), "account.GetTeamReply")
	proto.RegisterType((*ListTeamsRequest)(nil), "account.ListTeamsRequest")
	proto.RegisterType((*ListTeamsReply)(nil), "account.ListTeamsReply")
	proto.RegisterType((*DeleteTeamRequest)(nil), "account.DeleteTeamRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Account service

type AccountClient interface {
	// Global
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Verify(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Login(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInReply, error)
	Switch(ctx context.Context, in *SwitchRequest, opts ...grpc.CallOption) (*SwitchAnswer, error)
	// Users
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	PasswordSet(ctx context.Context, in *PasswordSetRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	PasswordChange(ctx context.Context, in *PasswordChangeRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ForgotLogin(ctx context.Context, in *ForgotLoginRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUserOrganizations(ctx context.Context, in *GetUserOrganizationsRequest, opts ...grpc.CallOption) (*GetUserOrganizationsReply, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersReply, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Organizations
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	AddUserToOrganization(ctx context.Context, in *AddUserToOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RemoveUserFromOrganization(ctx context.Context, in *RemoveUserFromOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ChangeOrganizationMemberRole(ctx context.Context, in *ChangeOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationReply, error)
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsReply, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Teams
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RemoveUserFromTeam(ctx context.Context, in *RemoveUserFromTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ChangeTeamName(ctx context.Context, in *ChangeTeamNameRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamReply, error)
	ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsReply, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Verify(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInReply, error) {
	out := new(LogInReply)
	err := grpc.Invoke(ctx, "/account.Account/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Switch(ctx context.Context, in *SwitchRequest, opts ...grpc.CallOption) (*SwitchAnswer, error) {
	out := new(SwitchAnswer)
	err := grpc.Invoke(ctx, "/account.Account/Switch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/PasswordReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PasswordSet(ctx context.Context, in *PasswordSetRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/PasswordSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PasswordChange(ctx context.Context, in *PasswordChangeRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/PasswordChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ForgotLogin(ctx context.Context, in *ForgotLoginRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/ForgotLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := grpc.Invoke(ctx, "/account.Account/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserOrganizations(ctx context.Context, in *GetUserOrganizationsRequest, opts ...grpc.CallOption) (*GetUserOrganizationsReply, error) {
	out := new(GetUserOrganizationsReply)
	err := grpc.Invoke(ctx, "/account.Account/GetUserOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersReply, error) {
	out := new(ListUsersReply)
	err := grpc.Invoke(ctx, "/account.Account/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/CreateOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AddUserToOrganization(ctx context.Context, in *AddUserToOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/AddUserToOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RemoveUserFromOrganization(ctx context.Context, in *RemoveUserFromOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/RemoveUserFromOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ChangeOrganizationMemberRole(ctx context.Context, in *ChangeOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/ChangeOrganizationMemberRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationReply, error) {
	out := new(GetOrganizationReply)
	err := grpc.Invoke(ctx, "/account.Account/GetOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsReply, error) {
	out := new(ListOrganizationsReply)
	err := grpc.Invoke(ctx, "/account.Account/ListOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/DeleteOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/CreateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/AddUserToTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RemoveUserFromTeam(ctx context.Context, in *RemoveUserFromTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/RemoveUserFromTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ChangeTeamName(ctx context.Context, in *ChangeTeamNameRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/ChangeTeamName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamReply, error) {
	out := new(GetTeamReply)
	err := grpc.Invoke(ctx, "/account.Account/GetTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsReply, error) {
	out := new(ListTeamsReply)
	err := grpc.Invoke(ctx, "/account.Account/ListTeams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/account.Account/DeleteTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountServer interface {
	// Global
	SignUp(context.Context, *SignUpRequest) (*google_protobuf.Empty, error)
	Verify(context.Context, *VerificationRequest) (*google_protobuf.Empty, error)
	Login(context.Context, *LogInRequest) (*LogInReply, error)
	Switch(context.Context, *SwitchRequest) (*SwitchAnswer, error)
	// Users
	PasswordReset(context.Context, *PasswordResetRequest) (*google_protobuf.Empty, error)
	PasswordSet(context.Context, *PasswordSetRequest) (*google_protobuf.Empty, error)
	PasswordChange(context.Context, *PasswordChangeRequest) (*google_protobuf.Empty, error)
	ForgotLogin(context.Context, *ForgotLoginRequest) (*google_protobuf.Empty, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetUserOrganizations(context.Context, *GetUserOrganizationsRequest) (*GetUserOrganizationsReply, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*google_protobuf.Empty, error)
	// Organizations
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*google_protobuf.Empty, error)
	AddUserToOrganization(context.Context, *AddUserToOrganizationRequest) (*google_protobuf.Empty, error)
	RemoveUserFromOrganization(context.Context, *RemoveUserFromOrganizationRequest) (*google_protobuf.Empty, error)
	ChangeOrganizationMemberRole(context.Context, *ChangeOrganizationMemberRoleRequest) (*google_protobuf.Empty, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationReply, error)
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsReply, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*google_protobuf.Empty, error)
	// Teams
	CreateTeam(context.Context, *CreateTeamRequest) (*google_protobuf.Empty, error)
	AddUserToTeam(context.Context, *AddUserToTeamRequest) (*google_protobuf.Empty, error)
	RemoveUserFromTeam(context.Context, *RemoveUserFromTeamRequest) (*google_protobuf.Empty, error)
	ChangeTeamName(context.Context, *ChangeTeamNameRequest) (*google_protobuf.Empty, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamReply, error)
	ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsReply, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*google_protobuf.Empty, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Verify(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Switch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Switch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/Switch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Switch(ctx, req.(*SwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/PasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PasswordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PasswordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/PasswordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PasswordSet(ctx, req.(*PasswordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PasswordChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PasswordChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/PasswordChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PasswordChange(ctx, req.(*PasswordChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ForgotLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ForgotLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ForgotLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ForgotLogin(ctx, req.(*ForgotLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetUserOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserOrganizations(ctx, req.(*GetUserOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AddUserToOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AddUserToOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/AddUserToOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AddUserToOrganization(ctx, req.(*AddUserToOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RemoveUserFromOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RemoveUserFromOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/RemoveUserFromOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RemoveUserFromOrganization(ctx, req.(*RemoveUserFromOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ChangeOrganizationMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrganizationMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ChangeOrganizationMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ChangeOrganizationMemberRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ChangeOrganizationMemberRole(ctx, req.(*ChangeOrganizationMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AddUserToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AddUserToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/AddUserToTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AddUserToTeam(ctx, req.(*AddUserToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RemoveUserFromTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RemoveUserFromTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/RemoveUserFromTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RemoveUserFromTeam(ctx, req.(*RemoveUserFromTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ChangeTeamName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTeamNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ChangeTeamName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ChangeTeamName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ChangeTeamName(ctx, req.(*ChangeTeamNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListTeams(ctx, req.(*ListTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _Account_SignUp_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Account_Verify_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
		{
			MethodName: "Switch",
			Handler:    _Account_Switch_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _Account_PasswordReset_Handler,
		},
		{
			MethodName: "PasswordSet",
			Handler:    _Account_PasswordSet_Handler,
		},
		{
			MethodName: "PasswordChange",
			Handler:    _Account_PasswordChange_Handler,
		},
		{
			MethodName: "ForgotLogin",
			Handler:    _Account_ForgotLogin_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Account_GetUser_Handler,
		},
		{
			MethodName: "GetUserOrganizations",
			Handler:    _Account_GetUserOrganizations_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Account_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Account_DeleteUser_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _Account_CreateOrganization_Handler,
		},
		{
			MethodName: "AddUserToOrganization",
			Handler:    _Account_AddUserToOrganization_Handler,
		},
		{
			MethodName: "RemoveUserFromOrganization",
			Handler:    _Account_RemoveUserFromOrganization_Handler,
		},
		{
			MethodName: "ChangeOrganizationMemberRole",
			Handler:    _Account_ChangeOrganizationMemberRole_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Account_GetOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _Account_ListOrganizations_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _Account_DeleteOrganization_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Account_CreateTeam_Handler,
		},
		{
			MethodName: "AddUserToTeam",
			Handler:    _Account_AddUserToTeam_Handler,
		},
		{
			MethodName: "RemoveUserFromTeam",
			Handler:    _Account_RemoveUserFromTeam_Handler,
		},
		{
			MethodName: "ChangeTeamName",
			Handler:    _Account_ChangeTeamName_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Account_GetTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _Account_ListTeams_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Account_DeleteTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/account/account.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/account/account.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x5b, 0x6f, 0xd4, 0x46,
	0x14, 0x96, 0xc9, 0x8d, 0x9c, 0x24, 0x4b, 0x72, 0xd8, 0x0d, 0xbb, 0x4e, 0x20, 0x61, 0x1a, 0x5a,
	0xba, 0xd0, 0x35, 0x04, 0x89, 0x02, 0xad, 0x40, 0x11, 0x37, 0xd1, 0x86, 0x8b, 0x36, 0x80, 0x54,
	0xa4, 0xaa, 0x72, 0x36, 0x83, 0x63, 0x75, 0x7d, 0xc1, 0xf6, 0x26, 0x84, 0x74, 0x1f, 0xca, 0x53,
	0x1f, 0xab, 0xf2, 0x5a, 0xa9, 0x0f, 0x55, 0x5f, 0xfa, 0x77, 0xfa, 0x17, 0xfa, 0x43, 0xaa, 0x39,
	0xbe, 0xec, 0x78, 0x6d, 0x6f, 0xc2, 0x42, 0xd4, 0x97, 0x64, 0x3d, 0x73, 0xe6, 0x7c, 0xdf, 0x9c,
	0x8b, 0xcf, 0x67, 0xb8, 0x6e, 0x98, 0xc1, 0x76, 0x67, 0xb3, 0xd1, 0x72, 0x2c, 0x4d, 0x77, 0xdd,
	0x16, 0x6f, 0x73, 0x4f, 0x0f, 0x1c, 0x4f, 0xd3, 0x2d, 0x57, 0xd3, 0x5d, 0x53, 0xf3, 0xdc, 0x96,
	0xa6, 0xb7, 0x5a, 0x4e, 0xc7, 0x0e, 0xe2, 0xff, 0x0d, 0xd7, 0x73, 0x02, 0x07, 0x27, 0xa2, 0x47,
	0xf5, 0x8a, 0xe4, 0xc3, 0x70, 0xda, 0xba, 0x6d, 0x68, 0x64, 0xb1, 0xd9, 0x79, 0xa9, 0xb9, 0xc1,
	0x9e, 0xcb, 0x7d, 0x8d, 0x5b, 0x6e, 0xb0, 0x17, 0xfe, 0x0d, 0x4f, 0xab, 0xd7, 0x06, 0x01, 0x6f,
	0xe9, 0x81, 0x1e, 0xa3, 0xf9, 0xc9, 0x8f, 0xe8, 0xe4, 0xa2, 0xe1, 0x38, 0x46, 0x9b, 0x13, 0x3b,
	0xdd, 0xb6, 0x9d, 0x40, 0x0f, 0x4c, 0xc7, 0x8e, 0x76, 0x99, 0x01, 0x33, 0x1b, 0xa6, 0x61, 0x3f,
	0x73, 0x9b, 0xfc, 0x55, 0x87, 0xfb, 0x01, 0x22, 0x8c, 0xda, 0xba, 0xc5, 0xab, 0xca, 0xb2, 0x72,
	0x7e, 0xb2, 0x49, 0xbf, 0x51, 0x85, 0xe3, 0xae, 0xee, 0xfb, 0xbb, 0x8e, 0xb7, 0x55, 0x3d, 0x46,
	0xeb, 0xc9, 0x33, 0x96, 0x61, 0x8c, 0x5b, 0xba, 0xd9, 0xae, 0x8e, 0xd0, 0x46, 0xf8, 0x80, 0xb3,
	0x30, 0xd2, 0xf1, 0xda, 0xd5, 0x51, 0x5a, 0x13, 0x3f, 0xd9, 0x05, 0x38, 0xf9, 0x9c, 0x7b, 0xe6,
	0x4b, 0xb3, 0x45, 0xf8, 0x31, 0x5c, 0x19, 0xc6, 0x02, 0xe7, 0x47, 0x6e, 0x47, 0x78, 0xe1, 0x03,
	0xbb, 0x09, 0xd3, 0xeb, 0x8e, 0xf1, 0xc0, 0x1e, 0x92, 0x14, 0x5b, 0x06, 0x88, 0xce, 0xbb, 0xed,
	0x3d, 0x71, 0x5a, 0xef, 0x04, 0xdb, 0xf1, 0x69, 0xf1, 0x9b, 0x7d, 0x0e, 0x33, 0x1b, 0xbb, 0x66,
	0xd0, 0xda, 0x8e, 0x21, 0xaa, 0x10, 0x27, 0x28, 0xb2, 0x8b, 0x1f, 0x19, 0x83, 0xe9, 0xd0, 0x74,
	0xcd, 0xf6, 0x77, 0xb9, 0x97, 0xeb, 0xae, 0x0e, 0xe5, 0x27, 0x11, 0x78, 0x93, 0xfb, 0x3c, 0x18,
	0x40, 0x9c, 0xdd, 0x03, 0x8c, 0x6d, 0x37, 0x7a, 0x96, 0xb9, 0x81, 0x18, 0x78, 0x49, 0x0e, 0x95,
	0xd8, 0xcf, 0xed, 0x6d, 0xdd, 0x36, 0x78, 0xec, 0xaa, 0x0e, 0xb3, 0xfc, 0xb5, 0xe9, 0x07, 0xa6,
	0x6d, 0xc4, 0x06, 0x91, 0xd7, 0xcc, 0x3a, 0x2e, 0xc3, 0x94, 0xcd, 0x77, 0x9f, 0xa4, 0x31, 0xe4,
	0x25, 0x56, 0x07, 0xbc, 0xe7, 0x78, 0x86, 0x13, 0xac, 0x3b, 0x86, 0x29, 0xe7, 0x2d, 0x4c, 0xbb,
	0x22, 0xa5, 0x9d, 0xad, 0x40, 0xe9, 0x3e, 0x0f, 0x9e, 0xf9, 0xdc, 0x1b, 0x14, 0x80, 0x55, 0x98,
	0x4e, 0xac, 0x44, 0x7e, 0x18, 0x8c, 0x76, 0x7c, 0xee, 0x91, 0xcd, 0xd4, 0x6a, 0xa9, 0x91, 0x14,
	0x30, 0x99, 0xd0, 0x1e, 0xbb, 0x0c, 0x0b, 0xd1, 0x99, 0xc7, 0x9e, 0xa1, 0xdb, 0xe6, 0x9b, 0xb0,
	0x8a, 0x07, 0xc1, 0x7c, 0x07, 0xb5, 0xfc, 0x23, 0x02, 0xf3, 0x6b, 0x98, 0x71, 0xe4, 0xd5, 0xaa,
	0xb2, 0x3c, 0x72, 0x7e, 0x6a, 0x75, 0xbe, 0x07, 0x2e, 0x1f, 0x6a, 0xa6, 0x8d, 0x19, 0xc2, 0xec,
	0xba, 0xe9, 0x93, 0xef, 0x98, 0x02, 0xbb, 0x0a, 0x25, 0x69, 0x4d, 0x60, 0xac, 0xc0, 0x98, 0xe0,
	0x1e, 0xfb, 0xee, 0xbf, 0x58, 0xb8, 0xc9, 0x3e, 0x83, 0xb9, 0x3b, 0xbc, 0xcd, 0x03, 0x7e, 0x50,
	0xd8, 0xee, 0x42, 0xed, 0xb6, 0xc7, 0xf5, 0x80, 0xa7, 0x98, 0x0d, 0xe8, 0x90, 0x24, 0x47, 0xc7,
	0xe4, 0x1c, 0x6d, 0xc3, 0xe2, 0xda, 0xd6, 0x96, 0x00, 0x7b, 0xea, 0xe4, 0x79, 0xba, 0x00, 0x73,
	0xf2, 0x65, 0x7f, 0x90, 0xdc, 0xce, 0xca, 0x1b, 0x8f, 0x04, 0xc4, 0x02, 0x4c, 0x8a, 0x5b, 0x84,
	0x46, 0x51, 0x81, 0x8a, 0x05, 0xb1, 0xc9, 0x2c, 0x38, 0xdb, 0xe4, 0x96, 0xb3, 0x43, 0x37, 0xbb,
	0xe7, 0x39, 0xd6, 0xd1, 0xc2, 0xfd, 0xa1, 0xc0, 0x27, 0x61, 0x23, 0xc8, 0x38, 0x0f, 0xb9, 0xb5,
	0xc9, 0xbd, 0xa6, 0xd3, 0xe6, 0x1f, 0x1d, 0x11, 0x1b, 0x30, 0xea, 0x39, 0x6d, 0x4e, 0xaf, 0xbe,
	0xd2, 0xaa, 0x5a, 0x50, 0x3b, 0x02, 0x9a, 0xec, 0xd8, 0x45, 0x98, 0xbf, 0xcf, 0x83, 0x43, 0xa6,
	0x8f, 0x35, 0xa1, 0x9c, 0xb1, 0x16, 0x65, 0x75, 0x03, 0xa6, 0x65, 0x9a, 0x51, 0xdb, 0x14, 0x55,
	0x6e, 0xca, 0x96, 0xa9, 0x50, 0x15, 0x45, 0x9a, 0xd7, 0x43, 0xec, 0x39, 0xcc, 0xe7, 0xec, 0x7d,
	0x78, 0xb3, 0x68, 0x50, 0x0b, 0x0b, 0xfc, 0xb0, 0x17, 0xff, 0x1e, 0xe6, 0xc2, 0x42, 0x7f, 0xca,
	0x75, 0x6b, 0xd8, 0xac, 0x05, 0x5c, 0xb7, 0x52, 0x59, 0x13, 0x0b, 0x54, 0x27, 0x5d, 0x28, 0x27,
	0x0d, 0x70, 0x24, 0x08, 0xe9, 0xa2, 0x19, 0xe9, 0x2b, 0xd3, 0xb7, 0x0a, 0xd4, 0xd2, 0x6d, 0xf1,
	0x3f, 0x90, 0xf8, 0x09, 0x2a, 0x61, 0xab, 0x3c, 0x8d, 0xcc, 0x3f, 0x3e, 0x7e, 0x0d, 0x8e, 0xdb,
	0x7c, 0x57, 0x86, 0x9f, 0xb0, 0xf9, 0x2e, 0xa1, 0xbf, 0xa0, 0x31, 0x71, 0x34, 0xd9, 0x0d, 0x87,
	0x4b, 0xe8, 0x3b, 0x1a, 0x2e, 0x62, 0x2f, 0x3b, 0x5c, 0xc8, 0x84, 0xf6, 0xd8, 0xad, 0xf0, 0x75,
	0x2e, 0x56, 0xfc, 0x61, 0x18, 0xc5, 0xef, 0xfe, 0xc8, 0x41, 0xf4, 0xee, 0x17, 0xae, 0x73, 0xde,
	0xfd, 0x84, 0x1b, 0x6e, 0x8a, 0x4a, 0x0f, 0x5b, 0xe3, 0x48, 0x62, 0xb1, 0xfa, 0xae, 0x0a, 0x13,
	0x6b, 0x21, 0x2e, 0x3e, 0x86, 0xf1, 0x50, 0xe8, 0x61, 0xd2, 0xb6, 0x8d, 0x94, 0xf2, 0x53, 0xe7,
	0x1b, 0xa1, 0x52, 0x6c, 0xc4, 0x6a, 0xb4, 0x71, 0x57, 0x08, 0x50, 0x56, 0x79, 0xfb, 0xcf, 0xbf,
	0xef, 0x8e, 0x9d, 0x60, 0xa0, 0xed, 0x5c, 0xd6, 0x7c, 0xd3, 0xb0, 0x3b, 0xee, 0x0d, 0xa5, 0x8e,
	0x2f, 0x60, 0x9c, 0x04, 0xdd, 0x1e, 0x2e, 0x26, 0x0e, 0x73, 0x14, 0x5e, 0xa1, 0x5b, 0x95, 0xdc,
	0x96, 0x19, 0x0a, 0xb7, 0x3b, 0xe4, 0x49, 0xdb, 0x27, 0xd5, 0xd3, 0xc5, 0x07, 0x30, 0x46, 0x6a,
	0x03, 0x2b, 0x89, 0x6b, 0x59, 0x0f, 0xaa, 0x27, 0xfb, 0x97, 0xdd, 0xf6, 0x1e, 0x2b, 0x93, 0xc3,
	0x12, 0x9b, 0x14, 0x0e, 0xdb, 0xe2, 0xb8, 0xa0, 0xf9, 0x08, 0xc6, 0x43, 0xf5, 0x26, 0xdf, 0x5b,
	0x56, 0x7e, 0x6a, 0xa5, 0x6f, 0x3d, 0x94, 0x79, 0x7d, 0xd7, 0xa6, 0x1d, 0xe1, 0xcf, 0x83, 0x99,
	0x94, 0xd2, 0xc3, 0xd3, 0xc9, 0xf1, 0x3c, 0x05, 0x58, 0x78, 0xfd, 0x3a, 0xb9, 0x5f, 0x61, 0x4b,
	0xc2, 0x3d, 0x29, 0x01, 0x6d, 0x5f, 0x24, 0xb1, 0xab, 0xc5, 0x02, 0x4f, 0xf3, 0x84, 0x1f, 0x81,
	0xc9, 0x61, 0x4a, 0x52, 0x8c, 0xb8, 0x90, 0x41, 0xdc, 0x38, 0x18, 0xef, 0x2c, 0xe1, 0x2d, 0xb0,
	0xf9, 0x1e, 0x5e, 0x02, 0x14, 0xc1, 0xd8, 0x50, 0x4a, 0x0b, 0x4a, 0x3c, 0x93, 0x41, 0x4a, 0x29,
	0xcd, 0x42, 0xb0, 0x15, 0x02, 0x3b, 0xa3, 0xd6, 0x72, 0xc0, 0x5a, 0xe4, 0x41, 0xe0, 0x99, 0x30,
	0x25, 0x29, 0x4b, 0xe9, 0x5a, 0x59, 0xbd, 0x59, 0x88, 0x74, 0x8e, 0x90, 0x96, 0x98, 0x2a, 0x85,
	0x91, 0x74, 0x4e, 0x57, 0xf3, 0xb8, 0x65, 0xda, 0x5b, 0xdc, 0x13, 0x50, 0x1b, 0x30, 0x11, 0x69,
	0x41, 0x3c, 0x95, 0xc0, 0xa4, 0xa5, 0xaa, 0x54, 0x07, 0xb2, 0x3a, 0x65, 0x55, 0x42, 0x40, 0x9c,
	0xed, 0x4f, 0x14, 0xfe, 0xa2, 0xd0, 0x84, 0xce, 0x28, 0x4c, 0x5c, 0xe9, 0xf7, 0x94, 0x37, 0x6f,
	0x55, 0x76, 0x80, 0x95, 0x00, 0xff, 0x94, 0xc0, 0x97, 0xf1, 0x4c, 0xa6, 0x4a, 0x52, 0x33, 0x16,
	0x9b, 0x30, 0x99, 0x88, 0x4f, 0xac, 0xf5, 0xba, 0xa3, 0x4f, 0xa4, 0xaa, 0xa7, 0xf2, 0xb6, 0x04,
	0xd0, 0x1c, 0x01, 0x4d, 0xe1, 0x64, 0x02, 0x84, 0x2f, 0x00, 0x7a, 0xc2, 0x14, 0x13, 0x75, 0xd3,
	0xc8, 0xa8, 0xd5, 0xc2, 0xe4, 0x44, 0xa1, 0xab, 0x67, 0x43, 0x67, 0x03, 0x66, 0xb5, 0x2c, 0xf6,
	0x22, 0x52, 0x28, 0x74, 0x0b, 0xb1, 0x16, 0x09, 0x6b, 0x9e, 0xcd, 0x09, 0xac, 0x54, 0x70, 0x44,
	0xfe, 0x7f, 0x55, 0xa0, 0x92, 0xab, 0x7a, 0xf1, 0x5c, 0x82, 0x39, 0x48, 0x15, 0x17, 0xc2, 0x5e,
	0x23, 0xd8, 0x55, 0xf6, 0x45, 0x06, 0x56, 0xdb, 0xcf, 0xbc, 0xc5, 0xbb, 0x9a, 0x45, 0x6a, 0x94,
	0x28, 0xfd, 0xa9, 0x80, 0x5a, 0x2c, 0x8f, 0xb1, 0x9e, 0xf0, 0x3a, 0x50, 0x43, 0x17, 0x92, 0x5b,
	0x23, 0x72, 0x5f, 0xd5, 0xaf, 0xbf, 0x17, 0x39, 0x6d, 0x3f, 0xd1, 0x0d, 0x5d, 0xfc, 0x5b, 0x81,
	0xc5, 0x41, 0xa2, 0x1a, 0x2f, 0xf6, 0x72, 0x76, 0xb0, 0xf6, 0x2e, 0x64, 0x7a, 0x87, 0x98, 0xde,
	0x54, 0x87, 0x67, 0x2a, 0x42, 0xea, 0xc3, 0x89, 0x3e, 0xc5, 0x8c, 0x4b, 0x72, 0x93, 0xe5, 0xc5,
	0xee, 0x74, 0xb1, 0x81, 0xe8, 0x8b, 0x65, 0x22, 0xa6, 0x62, 0x35, 0x87, 0x58, 0x18, 0x21, 0x0f,
	0xe6, 0x32, 0xb2, 0x19, 0xcf, 0xa6, 0xfa, 0x2c, 0xb7, 0xfd, 0x97, 0x06, 0x99, 0x08, 0xe8, 0x1a,
	0x41, 0x9f, 0xc4, 0x6c, 0x45, 0xa3, 0x07, 0x98, 0x95, 0xd4, 0x52, 0xfb, 0x14, 0xea, 0xed, 0xc2,
	0x04, 0x44, 0xf7, 0xac, 0x17, 0xdf, 0xf3, 0x35, 0x40, 0x4f, 0x95, 0x4b, 0xaf, 0x83, 0x8c, 0x54,
	0x2f, 0xc4, 0xb8, 0x4a, 0x18, 0x97, 0xd8, 0x85, 0xc3, 0x25, 0x99, 0x24, 0x92, 0x48, 0xeb, 0x6f,
	0x0a, 0xcc, 0xa4, 0x14, 0xbb, 0x34, 0x73, 0xf3, 0x94, 0x7c, 0x21, 0x81, 0x6f, 0x88, 0xc0, 0x1d,
	0x76, 0xeb, 0x3d, 0x08, 0x68, 0xfb, 0x89, 0xbe, 0x4a, 0xb5, 0xef, 0x5f, 0x0a, 0x60, 0x56, 0xc6,
	0x4b, 0x39, 0x28, 0xd4, 0xf8, 0x85, 0xf4, 0x36, 0x88, 0xde, 0xc3, 0xfa, 0xb7, 0x1f, 0x48, 0x2f,
	0xd5, 0xc0, 0xbf, 0x2b, 0x50, 0x4a, 0x4b, 0x7d, 0x69, 0xaa, 0xe7, 0x7e, 0x03, 0x14, 0xf2, 0x6b,
	0x12, 0xbf, 0x75, 0xf5, 0xfe, 0xb0, 0xfc, 0xc4, 0x5f, 0x6d, 0x3f, 0xfe, 0x2a, 0xa0, 0x96, 0x7d,
	0x43, 0x83, 0x99, 0x42, 0x97, 0x1a, 0xcc, 0x72, 0xbc, 0x2a, 0xd9, 0x0d, 0xd1, 0x1f, 0xb7, 0x88,
	0xce, 0x75, 0xfc, 0x72, 0x48, 0x3a, 0xf8, 0x2a, 0x1c, 0x9a, 0xa4, 0xda, 0xfb, 0x86, 0xa6, 0xfc,
	0x29, 0xd0, 0x37, 0x34, 0x7b, 0x22, 0x9f, 0x5d, 0x22, 0x06, 0x75, 0x3c, 0x7f, 0x58, 0x78, 0xfc,
	0x59, 0x89, 0x87, 0x6a, 0x5f, 0x17, 0x65, 0x3e, 0x03, 0x0a, 0xb3, 0x10, 0x5d, 0xbb, 0x3e, 0xec,
	0xb5, 0x37, 0xc7, 0xc9, 0xe1, 0x95, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x35, 0x84, 0x67,
	0xcc, 0x16, 0x00, 0x00,
}
