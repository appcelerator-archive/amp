syntax = "proto3";

package account;

import "github.com/golang/protobuf/ptypes/empty/empty.proto";
import "github.com/appcelerator/amp/data/accounts/accounts.proto";
import "google/api/annotations.proto";

service Account {
  // Global
  rpc SignUp (SignUpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/signup",
      body: "*"
    };
  };
  rpc Verify (VerificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/verify/{token}"
    };
  };
  rpc Login (LogInRequest) returns (LogInAnswer) {
    option (google.api.http) = {
      post: "/v1/login",
      body: "*"
    };
  };
  rpc Switch (SwitchRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/switch",
      body: "*"
    };
  };

  // Users
  rpc PasswordReset (PasswordResetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{name}/password/reset",
      body: "*"
    };
  };
  rpc PasswordSet (PasswordSetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/password/set",
      body: "*"
    };
  };
  rpc PasswordChange (PasswordChangeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/users/password/change",
      body: "*"
    };
  };
  rpc ForgotLogin (ForgotLoginRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{email}/reminder",
      body: "*"
    };
  };
  rpc GetUser (GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get: "/v1/users/{name}"
    };
  };
  rpc GetUserOrganizations (GetUserOrganizationsRequest) returns (GetUserOrganizationsReply) {
    option (google.api.http) = {
      get: "/v1/users/{name}/organizations"
    };
  };
  rpc ListUsers (ListUsersRequest) returns (ListUsersReply) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  };
  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{name}"
    };
  };

  // Organizations
  rpc CreateOrganization (CreateOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/organizations",
      body: "*"
    };
  };
  rpc AddUserToOrganization (AddUserToOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/members",
      body: "*"
    };
  };
  rpc RemoveUserFromOrganization (RemoveUserFromOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_name}/members/{user_name}"
    };
  };
  rpc ChangeOrganizationMemberRole (ChangeOrganizationMemberRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_name}/members/{user_name}",
      body: "*"
    };
  };
  rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizationReply) {
    option (google.api.http) = {
      get: "/v1/organizations/{name}"
    };
  };
  rpc ListOrganizations (ListOrganizationsRequest) returns (ListOrganizationsReply) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
  };
  rpc DeleteOrganization (DeleteOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{name}"
    };
  };

  // Teams
  rpc CreateTeam (CreateTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/teams",
      body: "*"
    };
  };
  rpc AddUserToTeam (AddUserToTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/teams/{team_name}/members",
      body: "*"
    };
  };
  rpc RemoveUserFromTeam (RemoveUserFromTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_name}/teams/{team_name}/members/{user_name}"
    };
  };
  rpc AddResourceToTeam (AddResourceToTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/teams/{team_name}/resources",
      body: "*"
    };
  };
  rpc RemoveResourceFromTeam (RemoveResourceFromTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_name}/teams/{team_name}/resources"
    };
  };
  rpc ChangeTeamResourcePermissionLevel (ChangeTeamResourcePermissionLevelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_name}/teams/{team_name}/resources/{resource_id}",
      body: "*"
    };
  };
  rpc ChangeTeamName (ChangeTeamNameRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_name}/teams/{team_name}/name/{new_name}",
      body: "*"
    };
  };
  rpc GetTeam (GetTeamRequest) returns (GetTeamReply) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_name}/teams/{team_name}"
    };
  };
  rpc ListTeams (ListTeamsRequest) returns (ListTeamsReply) {
    option (google.api.http) = {
      get: "/organizations/{organization_name}/teams"
    };
  };
  rpc DeleteTeam (DeleteTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_name}/teams/{team_name}"
    };
  };
}

// Users
message SignUpRequest {
  string name = 1;
  string password = 2;
  string email = 3;
}

message VerificationRequest {
  string token = 1;
}

message LogInRequest {
  string name = 1;
  string password = 2;
}

message SwitchRequest {
  string account = 1;
}

message PasswordResetRequest {
  string name = 1;
}

message PasswordSetRequest {
  string token = 1;
  string password = 2;
}

message PasswordChangeRequest {
  string existingPassword = 1;
  string newPassword = 2;
}

message ForgotLoginRequest {
  string email = 1;
}

message GetUserRequest {
  string name = 1;
}

message GetUserReply {
  accounts.User user = 1;
}

message GetUserOrganizationsRequest {
  string name = 1;
}

message GetUserOrganizationsReply {
  repeated accounts.Organization organizations = 1;
}

message ListUsersRequest {
}

message ListUsersReply {
  repeated accounts.User users = 1;
}

message DeleteUserRequest {
  string name = 1;
}

// Organizations
message CreateOrganizationRequest {
  string name = 1;
  string email = 2;
}

message AddUserToOrganizationRequest {
  string organization_name = 1;
  string user_name = 2;
}

message RemoveUserFromOrganizationRequest {
  string organization_name = 1;
  string user_name = 2;
}

message ChangeOrganizationMemberRoleRequest {
  string organization_name = 1;
  string user_name = 2;
  accounts.OrganizationRole role = 3;
}

message GetOrganizationRequest {
  string name = 1;
}

message GetOrganizationReply {
  accounts.Organization organization = 1;
}

message ListOrganizationsRequest {
}

message ListOrganizationsReply {
  repeated accounts.Organization organizations = 1;
}

message DeleteOrganizationRequest {
  string name = 1;
}

// Teams
message CreateTeamRequest {
  string organization_name = 1;
  string team_name = 2;
}

message AddUserToTeamRequest {
  string organization_name = 1;
  string team_name = 2;
  string user_name = 3;
}

message RemoveUserFromTeamRequest {
  string organization_name = 1;
  string team_name = 2;
  string user_name = 3;
}

message AddResourceToTeamRequest {
  string organization_name = 1;
  string team_name = 2;
  string resource_id = 3;
}

message RemoveResourceFromTeamRequest {
  string organization_name = 1;
  string team_name = 2;
  string resource_id = 3;
}

message ChangeTeamResourcePermissionLevelRequest {
  string organization_name = 1;
  string team_name = 2;
  string resource_id = 3;
  accounts.TeamPermissionLevel permission_level = 4;
}

message ChangeTeamNameRequest {
  string organization_name = 1;
  string team_name = 2;
  string new_name = 3;
}

message GetTeamRequest {
  string organization_name = 1;
  string team_name = 2;
}

message GetTeamReply {
  accounts.Team team = 1;
}

message ListTeamsRequest {
  string organization_name = 1;
}

message ListTeamsReply {
  repeated accounts.Team teams = 1;
}

message DeleteTeamRequest {
  string organization_name = 1;
  string team_name = 2;
}

message LogInAnswer {
  string auth = 1;
}
