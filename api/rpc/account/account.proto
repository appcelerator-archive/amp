syntax = "proto3";

package account;

import "github.com/golang/protobuf/ptypes/empty/empty.proto";
import "github.com/appcelerator/amp/data/accounts/accounts.proto";
import "google/api/annotations.proto";

service Account {
  // Global
  rpc SignUp (SignUpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/signup",
      body: "*"
    };
  };
  rpc Verify (VerificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/verify/{token}"
    };
  };

  rpc Login (LogInRequest) returns (LogInReply) {
    option (google.api.http) = {
      post: "/v1/login",
      body: "*"
    };
  };

  // Users
  rpc PasswordReset (PasswordResetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{name}/password/reset",
      body: "*"
    };
  };
  rpc PasswordSet (PasswordSetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/password/set",
      body: "*"
    };
  };
  rpc PasswordChange (PasswordChangeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/users/password/change",
      body: "*"
    };
  };
  rpc ForgotLogin (ForgotLoginRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{email}/reminder",
      body: "*"
    };
  };
  rpc GetUser (GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get: "/v1/users/{name}"
    };
  };
  rpc ListUsers (ListUsersRequest) returns (ListUsersReply) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  };
  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{name}"
    };
  };
}

// Users
message SignUpRequest {
  string name = 1;
  string password = 2;
  string email = 3;
  string url = 4;
}

message VerificationRequest {
  string token = 1;
}

message LogInRequest {
  string name = 1;
  string password = 2;
}

message LogInReply {
  string auth = 1;
}

message PasswordResetRequest {
  string name = 1;
}

message PasswordSetRequest {
  string token = 1;
  string password = 2;
}

message PasswordChangeRequest {
  string existingPassword = 1;
  string newPassword = 2;
}

message ForgotLoginRequest {
  string email = 1;
}

message GetUserRequest {
  string name = 1;
}

message GetUserReply {
  accounts.User user = 1;
}

message ListUsersRequest {
}

message ListUsersReply {
  repeated accounts.User users = 1;
}

message DeleteUserRequest {
  string name = 1;
}
