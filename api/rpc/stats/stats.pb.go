// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/stats/stats.proto
// DO NOT EDIT!

/*
Package stats is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/stats/stats.proto

It has these top-level messages:
	MetricsEntry
	MetricsCPUEntry
	MetricsIOEntry
	MetricsMemEntry
	MetricsNetEntry
	StatsRequest
	StatsReply
*/
package stats

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricsEntry struct {
	Time               int64            `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Timestamp          string           `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	ContainerId        string           `protobuf:"bytes,3,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ContainerName      string           `protobuf:"bytes,4,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	ContainerShortName string           `protobuf:"bytes,5,opt,name=container_short_name,json=containerShortName" json:"container_short_name,omitempty"`
	ContainerState     string           `protobuf:"bytes,6,opt,name=container_state,json=containerState" json:"container_state,omitempty"`
	ServiceName        string           `protobuf:"bytes,7,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServiceId          string           `protobuf:"bytes,8,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	TaskId             string           `protobuf:"bytes,9,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	StackName          string           `protobuf:"bytes,10,opt,name=stack_name,json=stackName" json:"stack_name,omitempty"`
	NodeId             string           `protobuf:"bytes,11,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Role               string           `protobuf:"bytes,12,opt,name=role" json:"role,omitempty"`
	Cpu                *MetricsCPUEntry `protobuf:"bytes,13,opt,name=cpu" json:"cpu,omitempty"`
	Io                 *MetricsIOEntry  `protobuf:"bytes,14,opt,name=io" json:"io,omitempty"`
	Mem                *MetricsMemEntry `protobuf:"bytes,15,opt,name=mem" json:"mem,omitempty"`
	Net                *MetricsNetEntry `protobuf:"bytes,16,opt,name=net" json:"net,omitempty"`
}

func (m *MetricsEntry) Reset()                    { *m = MetricsEntry{} }
func (m *MetricsEntry) String() string            { return proto.CompactTextString(m) }
func (*MetricsEntry) ProtoMessage()               {}
func (*MetricsEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetricsEntry) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MetricsEntry) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *MetricsEntry) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *MetricsEntry) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *MetricsEntry) GetContainerShortName() string {
	if m != nil {
		return m.ContainerShortName
	}
	return ""
}

func (m *MetricsEntry) GetContainerState() string {
	if m != nil {
		return m.ContainerState
	}
	return ""
}

func (m *MetricsEntry) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MetricsEntry) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *MetricsEntry) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *MetricsEntry) GetStackName() string {
	if m != nil {
		return m.StackName
	}
	return ""
}

func (m *MetricsEntry) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MetricsEntry) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MetricsEntry) GetCpu() *MetricsCPUEntry {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *MetricsEntry) GetIo() *MetricsIOEntry {
	if m != nil {
		return m.Io
	}
	return nil
}

func (m *MetricsEntry) GetMem() *MetricsMemEntry {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *MetricsEntry) GetNet() *MetricsNetEntry {
	if m != nil {
		return m.Net
	}
	return nil
}

type MetricsCPUEntry struct {
	TotalUsage        float64 `protobuf:"fixed64,1,opt,name=total_usage,json=totalUsage" json:"total_usage,omitempty"`
	UsageInKernelMode float64 `protobuf:"fixed64,2,opt,name=usage_in_kernel_mode,json=usageInKernelMode" json:"usage_in_kernel_mode,omitempty"`
	UsageInUserMode   float64 `protobuf:"fixed64,3,opt,name=usage_in_user_mode,json=usageInUserMode" json:"usage_in_user_mode,omitempty"`
}

func (m *MetricsCPUEntry) Reset()                    { *m = MetricsCPUEntry{} }
func (m *MetricsCPUEntry) String() string            { return proto.CompactTextString(m) }
func (*MetricsCPUEntry) ProtoMessage()               {}
func (*MetricsCPUEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MetricsCPUEntry) GetTotalUsage() float64 {
	if m != nil {
		return m.TotalUsage
	}
	return 0
}

func (m *MetricsCPUEntry) GetUsageInKernelMode() float64 {
	if m != nil {
		return m.UsageInKernelMode
	}
	return 0
}

func (m *MetricsCPUEntry) GetUsageInUserMode() float64 {
	if m != nil {
		return m.UsageInUserMode
	}
	return 0
}

type MetricsIOEntry struct {
	Read  int64 `protobuf:"varint,1,opt,name=read" json:"read,omitempty"`
	Write int64 `protobuf:"varint,2,opt,name=write" json:"write,omitempty"`
	Total int64 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (m *MetricsIOEntry) Reset()                    { *m = MetricsIOEntry{} }
func (m *MetricsIOEntry) String() string            { return proto.CompactTextString(m) }
func (*MetricsIOEntry) ProtoMessage()               {}
func (*MetricsIOEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MetricsIOEntry) GetRead() int64 {
	if m != nil {
		return m.Read
	}
	return 0
}

func (m *MetricsIOEntry) GetWrite() int64 {
	if m != nil {
		return m.Write
	}
	return 0
}

func (m *MetricsIOEntry) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type MetricsMemEntry struct {
	Failcnt  int64   `protobuf:"varint,1,opt,name=failcnt" json:"failcnt,omitempty"`
	Limit    int64   `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Maxusage int64   `protobuf:"varint,3,opt,name=maxusage" json:"maxusage,omitempty"`
	Usage    int64   `protobuf:"varint,4,opt,name=usage" json:"usage,omitempty"`
	UsageP   float64 `protobuf:"fixed64,5,opt,name=usage_p,json=usageP" json:"usage_p,omitempty"`
}

func (m *MetricsMemEntry) Reset()                    { *m = MetricsMemEntry{} }
func (m *MetricsMemEntry) String() string            { return proto.CompactTextString(m) }
func (*MetricsMemEntry) ProtoMessage()               {}
func (*MetricsMemEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MetricsMemEntry) GetFailcnt() int64 {
	if m != nil {
		return m.Failcnt
	}
	return 0
}

func (m *MetricsMemEntry) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MetricsMemEntry) GetMaxusage() int64 {
	if m != nil {
		return m.Maxusage
	}
	return 0
}

func (m *MetricsMemEntry) GetUsage() int64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *MetricsMemEntry) GetUsageP() float64 {
	if m != nil {
		return m.UsageP
	}
	return 0
}

type MetricsNetEntry struct {
	TotalBytes int64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	RxBytes    int64 `protobuf:"varint,2,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	RxDropped  int64 `protobuf:"varint,3,opt,name=rx_dropped,json=rxDropped" json:"rx_dropped,omitempty"`
	RxErrors   int64 `protobuf:"varint,4,opt,name=rx_errors,json=rxErrors" json:"rx_errors,omitempty"`
	RxPackets  int64 `protobuf:"varint,5,opt,name=rx_packets,json=rxPackets" json:"rx_packets,omitempty"`
	TxBytes    int64 `protobuf:"varint,6,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	TxDropped  int64 `protobuf:"varint,7,opt,name=tx_dropped,json=txDropped" json:"tx_dropped,omitempty"`
	TxErrors   int64 `protobuf:"varint,8,opt,name=tx_errors,json=txErrors" json:"tx_errors,omitempty"`
	TxPackets  int64 `protobuf:"varint,9,opt,name=tx_packets,json=txPackets" json:"tx_packets,omitempty"`
}

func (m *MetricsNetEntry) Reset()                    { *m = MetricsNetEntry{} }
func (m *MetricsNetEntry) String() string            { return proto.CompactTextString(m) }
func (*MetricsNetEntry) ProtoMessage()               {}
func (*MetricsNetEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MetricsNetEntry) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *MetricsNetEntry) GetRxBytes() int64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *MetricsNetEntry) GetRxDropped() int64 {
	if m != nil {
		return m.RxDropped
	}
	return 0
}

func (m *MetricsNetEntry) GetRxErrors() int64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *MetricsNetEntry) GetRxPackets() int64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *MetricsNetEntry) GetTxBytes() int64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *MetricsNetEntry) GetTxDropped() int64 {
	if m != nil {
		return m.TxDropped
	}
	return 0
}

func (m *MetricsNetEntry) GetTxErrors() int64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *MetricsNetEntry) GetTxPackets() int64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

type StatsRequest struct {
	StatsCpu             bool   `protobuf:"varint,1,opt,name=stats_cpu,json=statsCpu" json:"stats_cpu,omitempty"`
	StatsMem             bool   `protobuf:"varint,2,opt,name=stats_mem,json=statsMem" json:"stats_mem,omitempty"`
	StatsIo              bool   `protobuf:"varint,3,opt,name=stats_io,json=statsIo" json:"stats_io,omitempty"`
	StatsNet             bool   `protobuf:"varint,4,opt,name=stats_net,json=statsNet" json:"stats_net,omitempty"`
	StatsFollow          bool   `protobuf:"varint,5,opt,name=stats_follow,json=statsFollow" json:"stats_follow,omitempty"`
	Discriminator        string `protobuf:"bytes,6,opt,name=discriminator" json:"discriminator,omitempty"`
	FilterDatacenter     string `protobuf:"bytes,7,opt,name=filter_datacenter,json=filterDatacenter" json:"filter_datacenter,omitempty"`
	FilterHost           string `protobuf:"bytes,8,opt,name=filter_host,json=filterHost" json:"filter_host,omitempty"`
	FilterContainerId    string `protobuf:"bytes,9,opt,name=filter_container_id,json=filterContainerId" json:"filter_container_id,omitempty"`
	FilterContainerName  string `protobuf:"bytes,10,opt,name=filter_container_name,json=filterContainerName" json:"filter_container_name,omitempty"`
	FilterContainerImage string `protobuf:"bytes,11,opt,name=filter_container_image,json=filterContainerImage" json:"filter_container_image,omitempty"`
	FilterServiceId      string `protobuf:"bytes,12,opt,name=filter_service_id,json=filterServiceId" json:"filter_service_id,omitempty"`
	FilterServiceName    string `protobuf:"bytes,13,opt,name=filter_service_name,json=filterServiceName" json:"filter_service_name,omitempty"`
	FilterTaskId         string `protobuf:"bytes,14,opt,name=filter_task_id,json=filterTaskId" json:"filter_task_id,omitempty"`
	FilterTaskName       string `protobuf:"bytes,15,opt,name=filter_task_name,json=filterTaskName" json:"filter_task_name,omitempty"`
	FilterNodeId         string `protobuf:"bytes,16,opt,name=filter_node_id,json=filterNodeId" json:"filter_node_id,omitempty"`
	FilterServiceIdent   string `protobuf:"bytes,17,opt,name=filter_service_ident,json=filterServiceIdent" json:"filter_service_ident,omitempty"`
	Since                string `protobuf:"bytes,18,opt,name=since" json:"since,omitempty"`
	Until                string `protobuf:"bytes,19,opt,name=until" json:"until,omitempty"`
	Period               string `protobuf:"bytes,20,opt,name=period" json:"period,omitempty"`
	TimeGroup            string `protobuf:"bytes,21,opt,name=time_group,json=timeGroup" json:"time_group,omitempty"`
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatsRequest) GetStatsCpu() bool {
	if m != nil {
		return m.StatsCpu
	}
	return false
}

func (m *StatsRequest) GetStatsMem() bool {
	if m != nil {
		return m.StatsMem
	}
	return false
}

func (m *StatsRequest) GetStatsIo() bool {
	if m != nil {
		return m.StatsIo
	}
	return false
}

func (m *StatsRequest) GetStatsNet() bool {
	if m != nil {
		return m.StatsNet
	}
	return false
}

func (m *StatsRequest) GetStatsFollow() bool {
	if m != nil {
		return m.StatsFollow
	}
	return false
}

func (m *StatsRequest) GetDiscriminator() string {
	if m != nil {
		return m.Discriminator
	}
	return ""
}

func (m *StatsRequest) GetFilterDatacenter() string {
	if m != nil {
		return m.FilterDatacenter
	}
	return ""
}

func (m *StatsRequest) GetFilterHost() string {
	if m != nil {
		return m.FilterHost
	}
	return ""
}

func (m *StatsRequest) GetFilterContainerId() string {
	if m != nil {
		return m.FilterContainerId
	}
	return ""
}

func (m *StatsRequest) GetFilterContainerName() string {
	if m != nil {
		return m.FilterContainerName
	}
	return ""
}

func (m *StatsRequest) GetFilterContainerImage() string {
	if m != nil {
		return m.FilterContainerImage
	}
	return ""
}

func (m *StatsRequest) GetFilterServiceId() string {
	if m != nil {
		return m.FilterServiceId
	}
	return ""
}

func (m *StatsRequest) GetFilterServiceName() string {
	if m != nil {
		return m.FilterServiceName
	}
	return ""
}

func (m *StatsRequest) GetFilterTaskId() string {
	if m != nil {
		return m.FilterTaskId
	}
	return ""
}

func (m *StatsRequest) GetFilterTaskName() string {
	if m != nil {
		return m.FilterTaskName
	}
	return ""
}

func (m *StatsRequest) GetFilterNodeId() string {
	if m != nil {
		return m.FilterNodeId
	}
	return ""
}

func (m *StatsRequest) GetFilterServiceIdent() string {
	if m != nil {
		return m.FilterServiceIdent
	}
	return ""
}

func (m *StatsRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *StatsRequest) GetUntil() string {
	if m != nil {
		return m.Until
	}
	return ""
}

func (m *StatsRequest) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *StatsRequest) GetTimeGroup() string {
	if m != nil {
		return m.TimeGroup
	}
	return ""
}

type StatsReply struct {
	Entries []*MetricsEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *StatsReply) Reset()                    { *m = StatsReply{} }
func (m *StatsReply) String() string            { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()               {}
func (*StatsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StatsReply) GetEntries() []*MetricsEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricsEntry)(nil), "stats.MetricsEntry")
	proto.RegisterType((*MetricsCPUEntry)(nil), "stats.MetricsCPUEntry")
	proto.RegisterType((*MetricsIOEntry)(nil), "stats.MetricsIOEntry")
	proto.RegisterType((*MetricsMemEntry)(nil), "stats.MetricsMemEntry")
	proto.RegisterType((*MetricsNetEntry)(nil), "stats.MetricsNetEntry")
	proto.RegisterType((*StatsRequest)(nil), "stats.StatsRequest")
	proto.RegisterType((*StatsReply)(nil), "stats.StatsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stats service

type StatsClient interface {
	StatsQuery(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
}

type statsClient struct {
	cc *grpc.ClientConn
}

func NewStatsClient(cc *grpc.ClientConn) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) StatsQuery(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := grpc.Invoke(ctx, "/stats.Stats/StatsQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stats service

type StatsServer interface {
	StatsQuery(context.Context, *StatsRequest) (*StatsReply, error)
}

func RegisterStatsServer(s *grpc.Server, srv StatsServer) {
	s.RegisterService(&_Stats_serviceDesc, srv)
}

func _Stats_StatsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).StatsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.Stats/StatsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).StatsQuery(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stats.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatsQuery",
			Handler:    _Stats_StatsQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/stats/stats.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/stats/stats.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0x2e, 0xc7, 0x89, 0x7f, 0xda, 0x49, 0x9c, 0x4c, 0xbc, 0xbb, 0x62, 0x61, 0x8b, 0xe0, 0xda,
	0x2d, 0x5c, 0x6c, 0x11, 0x6f, 0x85, 0xe5, 0x44, 0x71, 0x21, 0xbb, 0x80, 0x8b, 0x4a, 0x08, 0x0a,
	0x39, 0xbb, 0x14, 0xa9, 0x93, 0x4c, 0x45, 0xd2, 0x88, 0x51, 0x9b, 0x75, 0xde, 0x81, 0x03, 0x47,
	0x4e, 0xbc, 0x03, 0x6f, 0x48, 0x4d, 0xf7, 0xc8, 0x92, 0x93, 0xbd, 0x24, 0xea, 0xaf, 0xbf, 0xfe,
	0xd5, 0xcc, 0x27, 0xc3, 0xb7, 0x37, 0x9a, 0x6e, 0x17, 0x57, 0x47, 0xb1, 0xc9, 0xa6, 0x51, 0x51,
	0xc4, 0x98, 0xa2, 0x8d, 0xc8, 0xd8, 0x69, 0x94, 0x15, 0xd3, 0xa8, 0xd0, 0x53, 0x5b, 0xc4, 0xd3,
	0x92, 0x22, 0x2a, 0xe5, 0xef, 0x51, 0x61, 0x0d, 0x19, 0xb5, 0xc5, 0xc6, 0xf8, 0xbf, 0x4d, 0xd8,
	0x3e, 0x45, 0xb2, 0x3a, 0x2e, 0xdf, 0xe7, 0x64, 0xef, 0x95, 0x82, 0x4d, 0xd2, 0x19, 0x06, 0xad,
	0xc3, 0xd6, 0xa4, 0x1d, 0xf2, 0xb3, 0xfa, 0x0c, 0xfa, 0xee, 0x7f, 0x49, 0x51, 0x56, 0x04, 0x1b,
	0x87, 0xad, 0x49, 0x3f, 0xac, 0x01, 0xf5, 0x05, 0x6c, 0xc7, 0x26, 0xa7, 0x48, 0xe7, 0x68, 0xe7,
	0x3a, 0x09, 0xda, 0x4c, 0x18, 0xac, 0xb0, 0x59, 0xa2, 0x5e, 0xc1, 0x6e, 0x4d, 0xc9, 0xa3, 0x0c,
	0x83, 0x4d, 0x26, 0xed, 0xac, 0xd0, 0xb3, 0x28, 0x43, 0xf5, 0x06, 0x46, 0x35, 0xad, 0xbc, 0x35,
	0x96, 0x84, 0xbc, 0xc5, 0x64, 0xb5, 0xf2, 0x5d, 0x38, 0x17, 0x47, 0x7c, 0x09, 0xc3, 0x46, 0x04,
	0x45, 0x84, 0x41, 0x87, 0xc9, 0x75, 0xbd, 0x0b, 0x87, 0xba, 0x26, 0x4b, 0xb4, 0x7f, 0xea, 0x18,
	0x25, 0x65, 0x57, 0x9a, 0xf4, 0x18, 0xe7, 0x7a, 0x01, 0x50, 0x51, 0x74, 0x12, 0xf4, 0x64, 0x4c,
	0x8f, 0xcc, 0x12, 0xf5, 0x0c, 0xba, 0x14, 0x95, 0x77, 0xce, 0xd7, 0x67, 0x5f, 0xc7, 0x99, 0xb3,
	0x84, 0xe3, 0x28, 0x8a, 0xef, 0x24, 0x31, 0xf8, 0x38, 0x87, 0x70, 0xda, 0x67, 0xd0, 0xcd, 0x4d,
	0xc2, 0x39, 0x07, 0x12, 0xe7, 0xcc, 0x59, 0xe2, 0x36, 0x6d, 0x4d, 0x8a, 0xc1, 0x36, 0xa3, 0xfc,
	0xac, 0x26, 0xd0, 0x8e, 0x8b, 0x45, 0xb0, 0x73, 0xd8, 0x9a, 0x0c, 0x8e, 0x9f, 0x1e, 0xc9, 0x0b,
	0xf3, 0xef, 0xe7, 0xe4, 0xfc, 0x92, 0x5f, 0x51, 0xe8, 0x28, 0xea, 0x15, 0x6c, 0x68, 0x13, 0xec,
	0x32, 0xf1, 0xc9, 0x3a, 0x71, 0xf6, 0xab, 0xf0, 0x36, 0xb4, 0x71, 0x09, 0x33, 0xcc, 0x82, 0xe1,
	0xc7, 0x12, 0x9e, 0x62, 0xe6, 0x13, 0x66, 0x98, 0x39, 0x66, 0x8e, 0x14, 0xec, 0x7d, 0x8c, 0x79,
	0x86, 0xe4, 0x99, 0x39, 0xd2, 0xf8, 0xef, 0x16, 0x0c, 0x1f, 0xf4, 0xa4, 0x3e, 0x87, 0x01, 0x19,
	0x8a, 0xd2, 0xf9, 0xa2, 0x8c, 0x6e, 0xe4, 0xf4, 0xb4, 0x42, 0x60, 0xe8, 0xd2, 0x21, 0x6a, 0x0a,
	0x23, 0x76, 0xcd, 0x75, 0x3e, 0xbf, 0x43, 0x9b, 0x63, 0x3a, 0xcf, 0x4c, 0x82, 0x7c, 0x9c, 0x5a,
	0xe1, 0x3e, 0xfb, 0x66, 0xf9, 0x2f, 0xec, 0x39, 0x35, 0x09, 0xaa, 0xd7, 0xa0, 0x56, 0x01, 0x8b,
	0x12, 0xad, 0xd0, 0xdb, 0x4c, 0x1f, 0x7a, 0xfa, 0x65, 0x89, 0xd6, 0x91, 0xc7, 0xe7, 0xb0, 0xbb,
	0x3e, 0x3c, 0x6f, 0x17, 0xa3, 0xa4, 0x3a, 0xc7, 0xee, 0x59, 0x8d, 0x60, 0xeb, 0x83, 0xd5, 0x24,
	0x45, 0xdb, 0xa1, 0x18, 0x0e, 0xe5, 0x3e, 0x39, 0x77, 0x3b, 0x14, 0x63, 0xfc, 0x57, 0x3d, 0x64,
	0xb5, 0x27, 0x15, 0x40, 0xf7, 0x3a, 0xd2, 0x69, 0x9c, 0x93, 0x4f, 0x5b, 0x99, 0x2e, 0x47, 0xaa,
	0x33, 0x4d, 0x55, 0x66, 0x36, 0xd4, 0x73, 0xe8, 0x65, 0xd1, 0x52, 0x36, 0x22, 0xc9, 0x57, 0xb6,
	0x8b, 0x10, 0xc7, 0xa6, 0x44, 0x08, 0xfa, 0x0c, 0xba, 0x32, 0x74, 0xc1, 0x87, 0xbe, 0x15, 0x76,
	0xd8, 0x3c, 0x1f, 0xff, 0xbb, 0xb1, 0x6a, 0xa7, 0x7a, 0x19, 0xf5, 0xce, 0xaf, 0xee, 0x09, 0x4b,
	0xdf, 0x92, 0xec, 0xfc, 0x07, 0x87, 0xa8, 0x4f, 0xa0, 0x67, 0x97, 0xde, 0x2b, 0x8d, 0x75, 0xed,
	0x52, 0x5c, 0x2f, 0x00, 0xec, 0x72, 0x9e, 0x58, 0x53, 0x14, 0x98, 0xf8, 0xe6, 0xfa, 0x76, 0xf9,
	0x4e, 0x00, 0xf5, 0x29, 0xf4, 0xed, 0x72, 0x8e, 0xd6, 0x1a, 0x5b, 0xfa, 0x0e, 0x7b, 0x76, 0xf9,
	0x9e, 0x6d, 0x1f, 0x5b, 0x44, 0xf1, 0x1d, 0x52, 0xc9, 0x7d, 0x72, 0xec, 0xb9, 0x00, 0xae, 0x2a,
	0x55, 0x55, 0x3b, 0x52, 0x95, 0xea, 0xaa, 0x54, 0x57, 0xed, 0x4a, 0x24, 0x35, 0xab, 0xd2, 0xaa,
	0x6a, 0x4f, 0xaa, 0x52, 0xa3, 0x2a, 0xd5, 0x55, 0xfb, 0x55, 0xac, 0xaf, 0x3a, 0xfe, 0xa7, 0x03,
	0xdb, 0xee, 0xaa, 0x97, 0x21, 0xfe, 0xb1, 0xc0, 0x92, 0x5c, 0x32, 0x3e, 0xc3, 0x73, 0x77, 0xa1,
	0xdc, 0x6e, 0x7a, 0x61, 0x8f, 0x81, 0x93, 0x62, 0x51, 0x3b, 0xdd, 0xe5, 0xd8, 0x68, 0x38, 0x4f,
	0x31, 0x73, 0x03, 0x88, 0x53, 0x1b, 0xde, 0x4c, 0x2f, 0xec, 0xb2, 0x3d, 0x33, 0x75, 0x9c, 0xbb,
	0x2a, 0x9b, 0x8d, 0xb8, 0x33, 0x24, 0xd6, 0x18, 0x76, 0x5e, 0x9b, 0x34, 0x35, 0x1f, 0x78, 0x33,
	0xbd, 0x70, 0xc0, 0xd8, 0x8f, 0x0c, 0xa9, 0x97, 0xb0, 0x93, 0xe8, 0x32, 0xb6, 0x3a, 0xd3, 0xb9,
	0x13, 0x69, 0xaf, 0x56, 0xeb, 0xa0, 0x7a, 0x0d, 0xfb, 0xd7, 0x3a, 0x25, 0xb4, 0xf3, 0x24, 0xa2,
	0x28, 0xc6, 0x9c, 0xd0, 0x7a, 0xc5, 0xda, 0x13, 0xc7, 0xbb, 0x15, 0xee, 0x4e, 0x81, 0x27, 0xdf,
	0x9a, 0x92, 0xbc, 0x6e, 0x81, 0x40, 0x3f, 0x9b, 0x92, 0xd4, 0x11, 0x1c, 0x78, 0xc2, 0x9a, 0x4c,
	0x8b, 0x88, 0xf9, 0x42, 0x27, 0x0d, 0xb1, 0x3e, 0x86, 0x27, 0x8f, 0xf8, 0x0d, 0x69, 0x3b, 0x78,
	0x10, 0xc1, 0x22, 0xf7, 0x16, 0x9e, 0x3e, 0xae, 0x91, 0xb9, 0xe3, 0x2d, 0x9a, 0x37, 0x7a, 0x58,
	0xc6, 0xf9, 0xd4, 0x57, 0xab, 0x39, 0x1b, 0xc2, 0x2b, 0x72, 0x38, 0x14, 0xc7, 0xc5, 0x4a, 0x7e,
	0xeb, 0x29, 0xd6, 0x74, 0x7c, 0xa7, 0x39, 0xc5, 0x45, 0x43, 0xcd, 0x5f, 0xc2, 0xae, 0xe7, 0x57,
	0xaa, 0xbd, 0xcb, 0xd4, 0x6d, 0x41, 0x7f, 0x17, 0xed, 0x9e, 0xc0, 0x5e, 0x93, 0xc5, 0x29, 0x87,
	0xf2, 0x01, 0xa9, 0x79, 0x0f, 0xf2, 0x55, 0x6a, 0xbe, 0xd7, 0xcc, 0x77, 0x26, 0x9a, 0xfe, 0x06,
	0x46, 0x8f, 0x26, 0xc2, 0x9c, 0x82, 0x7d, 0xf9, 0x82, 0x3d, 0x18, 0x0a, 0x45, 0x39, 0x4a, 0x9d,
	0xc7, 0x18, 0x28, 0xa6, 0x88, 0xc1, 0xea, 0x90, 0x93, 0x4e, 0x83, 0x03, 0x41, 0xd9, 0x50, 0x4f,
	0xa1, 0x53, 0xa0, 0xd5, 0x26, 0x09, 0x46, 0xf2, 0x25, 0x11, 0x8b, 0xaf, 0x86, 0xce, 0x70, 0x7e,
	0x63, 0xcd, 0xa2, 0x08, 0x9e, 0xd4, 0x1f, 0xe8, 0x9f, 0x1c, 0x30, 0xfe, 0x0e, 0xc0, 0xdf, 0x8c,
	0x22, 0xbd, 0x57, 0x5f, 0x43, 0x17, 0x73, 0xb2, 0x9a, 0x15, 0xa3, 0x3d, 0x19, 0x1c, 0x1f, 0xac,
	0x6b, 0xbd, 0x08, 0x7d, 0xc5, 0x39, 0xfe, 0x1e, 0xb6, 0x38, 0x58, 0xbd, 0xf5, 0x59, 0x7e, 0x5b,
	0xa0, 0xbd, 0x57, 0x55, 0x50, 0xf3, 0xca, 0x3d, 0xdf, 0x5f, 0x07, 0x8b, 0xf4, 0xfe, 0xaa, 0xc3,
	0xbf, 0x36, 0xbe, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x1e, 0x1b, 0xe9, 0xa6, 0x08, 0x00,
	0x00,
}
