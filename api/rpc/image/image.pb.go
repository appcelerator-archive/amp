// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/appcelerator/amp/api/rpc/image/image.proto

/*
Package image is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/image/image.proto

It has these top-level messages:
	PushRequest
	PushReply
	ListRequest
	ImageEntry
	RepositoryEntry
	ListReply
	RemoveRequest
	RemoveReply
*/
package image

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PushRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PushRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushReply struct {
	Digest string `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
}

func (m *PushReply) Reset()                    { *m = PushReply{} }
func (m *PushReply) String() string            { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()               {}
func (*PushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushReply) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ImageEntry struct {
	Tag    string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Digest string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
}

func (m *ImageEntry) Reset()                    { *m = ImageEntry{} }
func (m *ImageEntry) String() string            { return proto.CompactTextString(m) }
func (*ImageEntry) ProtoMessage()               {}
func (*ImageEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ImageEntry) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ImageEntry) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type RepositoryEntry struct {
	Name    string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Entries []*ImageEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *RepositoryEntry) Reset()                    { *m = RepositoryEntry{} }
func (m *RepositoryEntry) String() string            { return proto.CompactTextString(m) }
func (*RepositoryEntry) ProtoMessage()               {}
func (*RepositoryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RepositoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryEntry) GetEntries() []*ImageEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListReply struct {
	Entries []*RepositoryEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListReply) GetEntries() []*RepositoryEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type RemoveRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Digest string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemoveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveRequest) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type RemoveReply struct {
}

func (m *RemoveReply) Reset()                    { *m = RemoveReply{} }
func (m *RemoveReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveReply) ProtoMessage()               {}
func (*RemoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*PushRequest)(nil), "image.PushRequest")
	proto.RegisterType((*PushReply)(nil), "image.PushReply")
	proto.RegisterType((*ListRequest)(nil), "image.ListRequest")
	proto.RegisterType((*ImageEntry)(nil), "image.ImageEntry")
	proto.RegisterType((*RepositoryEntry)(nil), "image.RepositoryEntry")
	proto.RegisterType((*ListReply)(nil), "image.ListReply")
	proto.RegisterType((*RemoveRequest)(nil), "image.RemoveRequest")
	proto.RegisterType((*RemoveReply)(nil), "image.RemoveReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Image service

type ImageClient interface {
	ImagePush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	ImageList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	ImageRemove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
}

type imageClient struct {
	cc *grpc.ClientConn
}

func NewImageClient(cc *grpc.ClientConn) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) ImagePush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := grpc.Invoke(ctx, "/image.Image/ImagePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) ImageList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/image.Image/ImageList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) ImageRemove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := grpc.Invoke(ctx, "/image.Image/ImageRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Image service

type ImageServer interface {
	ImagePush(context.Context, *PushRequest) (*PushReply, error)
	ImageList(context.Context, *ListRequest) (*ListReply, error)
	ImageRemove(context.Context, *RemoveRequest) (*RemoveReply, error)
}

func RegisterImageServer(s *grpc.Server, srv ImageServer) {
	s.RegisterService(&_Image_serviceDesc, srv)
}

func _Image_ImagePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ImagePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/ImagePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ImagePush(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_ImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/ImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ImageList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_ImageRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ImageRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/ImageRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ImageRemove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Image_serviceDesc = grpc.ServiceDesc{
	ServiceName: "image.Image",
	HandlerType: (*ImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImagePush",
			Handler:    _Image_ImagePush_Handler,
		},
		{
			MethodName: "ImageList",
			Handler:    _Image_ImageList_Handler,
		},
		{
			MethodName: "ImageRemove",
			Handler:    _Image_ImageRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/image/image.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/image/image.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x49, 0x6b, 0x2b, 0x99, 0x58, 0xac, 0x8b, 0x94, 0xd2, 0x53, 0x89, 0x97, 0x82, 0xd0,
	0x68, 0xa5, 0x7a, 0x10, 0x8f, 0x1e, 0x04, 0x0f, 0xb2, 0x6f, 0xb0, 0x6d, 0x87, 0x74, 0x21, 0xe9,
	0xae, 0xbb, 0x5b, 0x21, 0x2f, 0xe4, 0x73, 0xca, 0xfe, 0x69, 0x92, 0x16, 0xf5, 0x12, 0xbe, 0x19,
	0xf2, 0x9b, 0xf9, 0xbe, 0x49, 0x60, 0x99, 0x73, 0xb3, 0xdd, 0xaf, 0xe6, 0x6b, 0x51, 0x66, 0x4c,
	0xca, 0x35, 0x16, 0xa8, 0x98, 0x11, 0x2a, 0x63, 0xa5, 0xcc, 0x98, 0xe4, 0x99, 0x92, 0xeb, 0x8c,
	0x97, 0x2c, 0x47, 0xff, 0x9c, 0x4b, 0x25, 0x8c, 0x20, 0x3d, 0x57, 0xa4, 0x4b, 0x48, 0x3e, 0xf6,
	0x7a, 0x4b, 0xf1, 0x73, 0x8f, 0xda, 0x10, 0x02, 0x67, 0x3b, 0x56, 0xe2, 0x38, 0x9a, 0x46, 0xb3,
	0x98, 0x3a, 0x6d, 0x7b, 0x1b, 0x66, 0xd8, 0xb8, 0x33, 0x8d, 0x66, 0x17, 0xd4, 0xe9, 0xf4, 0x06,
	0x62, 0x8f, 0xc9, 0xa2, 0x22, 0x23, 0xe8, 0x6f, 0x78, 0x8e, 0xda, 0x04, 0x2c, 0x54, 0xe9, 0x00,
	0x92, 0x77, 0xae, 0x4d, 0x98, 0x9d, 0x3e, 0x02, 0xbc, 0xd9, 0x9d, 0xaf, 0x3b, 0xa3, 0x2a, 0x32,
	0x84, 0xae, 0x61, 0x79, 0x20, 0xac, 0x6c, 0x8d, 0xe9, 0x1c, 0x8d, 0xa1, 0x70, 0x49, 0x51, 0x0a,
	0xcd, 0x8d, 0x50, 0x95, 0x87, 0x7f, 0xb3, 0x79, 0x0b, 0xe7, 0xb8, 0x33, 0x8a, 0xa3, 0x1e, 0x77,
	0xa6, 0xdd, 0x59, 0xb2, 0xb8, 0x9a, 0xfb, 0xbc, 0xcd, 0x52, 0x7a, 0x78, 0x23, 0x7d, 0x81, 0xd8,
	0x5b, 0xb3, 0xfe, 0xef, 0x1a, 0x32, 0x72, 0xe4, 0x28, 0x90, 0x27, 0x6b, 0x1b, 0xfc, 0x19, 0x06,
	0x14, 0x4b, 0xf1, 0x85, 0xff, 0xdd, 0xed, 0xaf, 0x3c, 0x03, 0x48, 0x0e, 0xb0, 0x2c, 0xaa, 0xc5,
	0x77, 0x04, 0x3d, 0x67, 0x91, 0xdc, 0x43, 0xec, 0x84, 0xbd, 0x2c, 0x21, 0xc1, 0x43, 0xeb, 0xeb,
	0x4c, 0x86, 0x47, 0x3d, 0x6b, 0xfd, 0x80, 0xd8, 0x30, 0x35, 0xd2, 0x3a, 0x7a, 0x8d, 0x34, 0x69,
	0x9f, 0x20, 0x71, 0x88, 0xf7, 0x40, 0xae, 0xeb, 0xac, 0xad, 0x3c, 0x13, 0x72, 0xd2, 0x95, 0x45,
	0xb5, 0xea, 0xbb, 0x1f, 0xe7, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x88, 0x9b, 0x9f, 0x71,
	0x02, 0x00, 0x00,
}
